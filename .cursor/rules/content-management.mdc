---
globs: "notes/**/*.md,*.md"
---

# Content Management Guidelines

## Notes Structure

All content is organized in **[notes/](mdc:notes/)** with a hierarchical structure:

### Directory Organization
```
notes/
├── index.md - Main landing page
└── tutorials/
    ├── getting-started/ - Basic usage guides
    ├── features/ - Feature-specific documentation  
    └── advanced/ - Advanced configuration guides
```

### Content Guidelines

#### Markdown Syntax
- Use standard Markdown with GitHub Flavored Markdown extensions
- Code blocks should specify language for syntax highlighting:
  ```markdown
  ```javascript
  // Your code here
  ```
  ```

#### Frontmatter Support
- Use YAML frontmatter for metadata:
  ```yaml
  ---
  title: "Page Title"
  description: "Page description"
  tags: ["tag1", "tag2"]
  category: "category-name"
  ---
  ```

#### Linking Between Notes
- Use relative paths for internal links: `[Link Text](../other-file.md)`
- The application will handle routing automatically
- External links should open in new tabs

#### Images and Media
- Store images in a logical directory structure
- Use relative paths: `![Alt text](../images/screenshot.png)`
- Consider file sizes for offline usage

### Search Index

The **[notes-index.json](mdc:notes-index.json)** file is automatically generated by **[build.py](mdc:build.py)**:

#### Index Generation Process
1. Python script scans all `.md` files in [notes/](mdc:notes/)
2. Extracts frontmatter metadata (title, tags, description)
3. Creates search index with full-text content
4. Generates tag lists and category mappings
5. Outputs structured JSON for fast client-side search

#### Search Features
- Full-text search across all content
- Tag-based filtering with AND/OR modes
- Category-based organization
- Recent files tracking
- Bookmark management

### Content Creation Workflow

1. **Create New Note**: Add `.md` file in appropriate [notes/](mdc:notes/) subdirectory
2. **Add Frontmatter**: Include title, description, tags, and category
3. **Write Content**: Use standard Markdown with proper linking
4. **Rebuild Index**: Run `python3 build.py` to update search index
5. **Test**: Verify note appears in navigation and search works correctly

### Best Practices
- Keep file names descriptive and URL-friendly (kebab-case)
- Use consistent tagging across related content  
- Include proper headings for document structure
- Test all internal links after creation
- Keep individual files focused on single topics
