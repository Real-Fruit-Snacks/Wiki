{
  "notes": [
    {
      "path": "/notes/test-code-blocks.md",
      "context": null,
      "metadata": {
        "title": "Code Block Test",
        "tags": [
          "test",
          "debugging"
        ],
        "created": "2025-01-06",
        "author": "Debug",
        "description": "Testing various code block formats",
        "updated": null,
        "category": null,
        "status": null
      },
      "content_preview": "This file tests various code block formats to debug the [object Object] issue.\n\n\n\njavascript\nconsole.log('Hello, world!');\nconst x = 42;\nfunction test() {\n    return x  2;\n}\n\n\n\n\npython title:\"Example ...",
      "searchable_content": "\nCode Block Test\n\nThis file tests various code block formats to debug the [object Object] issue.\n\nSimple JavaScript Code Block\n\njavascript\nconsole.log('Hello, world!');\nconst x = 42;\nfunction test() {\n    return x  2;\n}\n\n\nPython Code Block with Title\n\npython title:\"Example Python Script\"\ndef hello():\n    print(\"Hello from Python\")\n    return True\n\nif name == \"main\":\n    hello()\n\n\nPlain Code Block (no language)\n\n\nThis is plain text\nwithout any highlighting\njust regular monospace\n\n\nBash Code Block\n\nbash\n#!/bin/bash\necho \"Testing bash highlighting\"\nls -la\ngrep \"pattern\" file.txt\n\n\nHTML Code Block\n\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Test</title>\n</head>\n<body>\n    <h1>Hello</h1>\n</body>\n</html>\n\n\nCSS Code Block\n\ncss\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n}\n\n.code-block {\n    background: #282c34;\n    padding: 1rem;\n}\n\n\nInline Code\n\nHere's some inline code: const inline = 'test'; within a paragraph.\n\nEmpty Code Block\n\njavascript\n\n\nCode Block with Special Characters\n\njavascript collapse:\"true\"\nconst special = \"This has 'quotes' and \\\"double quotes\\\"\";\nconst regex = /test\\s+pattern/gi;\nconst obj = { key: \"value\", nested: { deep: true } };\n console.log('Hello, world!');\nconst x = 42;\nfunction test() {\n    return x * 2;\n} python Example Python Script def hello():\n    print(\"Hello from Python\")\n    return True\n\nif __name__ == \"__main__\":\n    hello() This is plain text\nwithout any highlighting\njust regular monospace #!/bin/bash\necho \"Testing bash highlighting\"\nls -la\ngrep \"pattern\" file.txt <!DOCTYPE html>\n<html>\n<head>\n    <title>Test</title>\n</head>\n<body>\n    <h1>Hello</h1>\n</body>\n</html> body {\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n}\n\n.code-block {\n    background: #282c34;\n    padding: 1rem;\n} ",
      "code_blocks_count": 7
    },
    {
      "path": "/notes/theme-showcase.md",
      "context": null,
      "metadata": {
        "title": "Theme Showcase & Test",
        "tags": [
          "themes",
          "test",
          "showcase"
        ],
        "created": "2025-01-06",
        "author": "Wiki Admin",
        "description": "Comprehensive test of all 28 themes with various code examples",
        "updated": null,
        "category": null,
        "status": null
      },
      "content_preview": "This page tests all 28 available themes with various code examples to ensure syntax highlighting works correctly.\n\n\n\n1. Light - Clean light theme\n2. Dark - Easy on the eyes dark theme\n3. VSCode Dark+ ...",
      "searchable_content": "\nTheme Showcase & Test\n\nThis page tests all 28 available themes with various code examples to ensure syntax highlighting works correctly.\n\nAvailable Themes\n\n1. Light - Clean light theme\n2. Dark - Easy on the eyes dark theme\n3. VSCode Dark+ - Popular VSCode dark theme\n4. Monokai - Vibrant colors on dark background\n5. Dracula - Dark theme with vibrant colors\n6. One Dark Pro - Atom-inspired dark theme\n7. Solarized Light - Precision colors for machines and people\n8. Solarized Dark - Dark variant of Solarized\n9. GitHub Light - GitHub's clean light theme\n10. GitHub Dark - GitHub's dark theme\n11. Nord - Arctic, north-bluish color palette\n12. Gruvbox Dark - Retro groove dark theme\n13. Gruvbox Light - Retro groove light theme\n14. Tokyo Night - A clean dark theme that celebrates Tokyo at night\n15. Palenight - An elegant and juicy material-like theme\n16. Hot Dog Stand - Windows 3.1 classic - Bold red & yellow!\n17. Catppuccin Mocha - Dark theme with soft pastel colors\n18. Catppuccin Latte - Light theme with warm colors\n19. Ros\u00e9 Pine - Dark theme with muted colors\n20. Ros\u00e9 Pine Dawn - Light variant of Ros\u00e9 Pine\n21. Material Ocean - Material design dark theme\n22. Ayu Dark - Modern dark theme\n23. Ayu Light - Modern light theme\n24. Everforest Dark - Forest-inspired dark theme\n25. Kanagawa - Japanese aesthetic inspired dark theme\n26. Zenburn - Low contrast theme for reduced eye strain\n27. Tomorrow Night - Popular dark theme from the Tomorrow theme family\n28. Cobalt2 - Wes Bos's popular blue-based dark theme\n\nHow to Test\n\n1. Open the theme picker (sun/moon icon in header)\n2. Hover over each theme to preview it\n3. Click to apply the theme permanently\n4. Check that all code blocks below render correctly\n\nJavaScript Example\n\njavascript title:\"JavaScript Class Example\"\n// ES6 Class with various syntax elements\nclass ThemeManager {\n    constructor(options = {}) {\n        this.themes = options.themes || [];\n        this.currentTheme = options.defaultTheme || 'light';\n        this.callbacks = new Map();\n        this.initialized = false;\n    }\n\n    async initialize() {\n        try {\n            // Load saved theme from localStorage\n            const saved = localStorage.getItem('theme');\n            if (saved && this.themes.includes(saved)) {\n                this.currentTheme = saved;\n            }\n            \n            // Apply the theme\n            await this.applyTheme(this.currentTheme);\n            this.initialized = true;\n            \n            return { success: true, theme: this.currentTheme };\n        } catch (error) {\n            console.error('Failed to initialize theme:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    applyTheme(themeName) {\n        // Validate theme exists\n        if (!this.themes.includes(themeName)) {\n            throw new Error(Theme \"${themeName}\" not found);\n        }\n\n        // Apply theme to DOM\n        document.documentElement.setAttribute('data-theme', themeName);\n        \n        // Save preference\n        localStorage.setItem('theme', themeName);\n        \n        // Trigger callbacks\n        this.callbacks.forEach(callback => callback(themeName));\n    }\n\n    // Arrow function property\n    onChange = (callback) => {\n        const id = Date.now();\n        this.callbacks.set(id, callback);\n        return () => this.callbacks.delete(id);\n    }\n}\n\n// Usage\nconst manager = new ThemeManager({\n    themes: ['light', 'dark', 'monokai'],\n    defaultTheme: 'dark'\n});\n\nmanager.initialize().then(result => {\n    console.log('Theme initialized:', result);\n});\n\n\nPython Example\n\npython title:\"Python Data Processing\"\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional, Union\nimport asyncio\n\nclass DataProcessor:\n    \"\"\"Process and analyze time series data with various transformations.\"\"\"\n    \n    def init(self, datapath: str, cachesize: int = 1000):\n        self.datapath = datapath\n        self.cachesize = cachesize\n        self.cache: Dict[str, pd.DataFrame] = {}\n        self.metadata = {\n            'created': datetime.now(),\n            'version': '1.0.0',\n            'author': 'System'\n        }\n    \n    @property\n    def iscached(self) -> bool:\n        \"\"\"Check if data is currently cached.\"\"\"\n        return len(self.cache) > 0\n    \n    async def loaddataasync(self, \n                            filepath: str, \n                            columns: Optional[List[str]] = None) -> pd.DataFrame:\n        \"\"\"Asynchronously load data from CSV file.\"\"\"\n        try:\n            # Simulate async operation\n            await asyncio.sleep(0.1)\n            \n            df = pd.readcsv(filepath, usecols=columns)\n            \n            # Cache the result\n            if len(self.cache) < self.cachesize:\n                self.cache[filepath] = df\n            \n            return df\n            \n        except FileNotFoundError as e:\n            print(f\"Error: File {filepath} not found\")\n            raise e\n        except Exception as e:\n            print(f\"Unexpected error: {str(e)}\")\n            raise\n    \n    def processtimeseries(self, \n                          df: pd.DataFrame, \n                          windowsize: int = 7,\n                          aggregation: str = 'mean') -> pd.DataFrame:\n        \"\"\"Apply rolling window calculations to time series data.\"\"\"\n        \n        # Validate inputs\n        if windowsize <= 0:\n            raise ValueError(\"Window size must be positive\")\n        \n        validaggregations = ['mean', 'sum', 'min', 'max', 'std']\n        if aggregation not in validaggregations:\n            raise ValueError(f\"Aggregation must be one of {validaggregations}\")\n        \n        # Apply rolling calculation\n        numericcols = df.selectdtypes(include=[np.number]).columns\n        \n        result = df.copy()\n        for col in numericcols:\n            if aggregation == 'mean':\n                result[f'{col}rolling{windowsize}d'] = df[col].rolling(windowsize).mean()\n            elif aggregation == 'sum':\n                result[f'{col}rolling{windowsize}d'] = df[col].rolling(windowsize).sum()\n            # ... etc\n        \n        return result\n    \n    @staticmethod\n    def generatesampledata(nrows: int = 1000) -> pd.DataFrame:\n        \"\"\"Generate sample time series data for testing.\"\"\"\n        dates = pd.daterange(\n            start='2024-01-01', \n            periods=nrows, \n            freq='D'\n        )\n        \n        data = {\n            'date': dates,\n            'value': np.random.randn(nrows).cumsum() + 100,\n            'volume': np.random.randint(1000, 10000, nrows),\n            'category': np.random.choice(['A', 'B', 'C'], nrows)\n        }\n        \n        return pd.DataFrame(data)\n\nExample usage\nif name == \"main\":\n    processor = DataProcessor(\"./data\")\n    \n    # Generate and process sample data\n    df = DataProcessor.generatesampledata(365)\n    processed = processor.processtimeseries(df, windowsize=30)\n    \n    print(f\"Data shape: {processed.shape}\")\n    print(f\"Columns: {list(processed.columns)}\")\n\n\nHTML/CSS Example\n\nhtml title:\"Responsive Card Component\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Theme Card Component</title>\n    <style>\n        / CSS Custom Properties for theming /\n        :root {\n            --card-bg: #ffffff;\n            --card-border: #e5e7eb;\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            --text-primary: #111827;\n            --text-secondary: #6b7280;\n            --accent-color: #3b82f6;\n        }\n\n        / Dark theme override /\n        [data-theme=\"dark\"] {\n            --card-bg: #1f2937;\n            --card-border: #374151;\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n            --text-primary: #f3f4f6;\n            --text-secondary: #9ca3af;\n            --accent-color: #60a5fa;\n        }\n\n        / Card component styles /\n        .card {\n            background-color: var(--card-bg);\n            border: 1px solid var(--card-border);\n            border-radius: 0.5rem;\n            box-shadow: var(--card-shadow);\n            padding: 1.5rem;\n            margin: 1rem;\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\n        }\n\n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);\n        }\n\n        .card-title {\n            color: var(--text-primary);\n            font-size: 1.25rem;\n            font-weight: 600;\n            margin: 0 0 0.5rem 0;\n        }\n\n        .card-description {\n            color: var(--text-secondary);\n            line-height: 1.5;\n            margin: 0 0 1rem 0;\n        }\n\n        .card-link {\n            color: var(--accent-color);\n            text-decoration: none;\n            font-weight: 500;\n            display: inline-flex;\n            align-items: center;\n            gap: 0.25rem;\n        }\n\n        .card-link:hover {\n            text-decoration: underline;\n        }\n\n        / Responsive grid /\n        .card-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 1rem;\n            padding: 1rem;\n        }\n\n        @media (max-width: 768px) {\n            .card {\n                padding: 1rem;\n            }\n            \n            .card-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"card-grid\">\n        <article class=\"card\">\n            <h2 class=\"card-title\">Theme System</h2>\n            <p class=\"card-description\">\n                A comprehensive theming system with CSS custom properties \n                that supports multiple color schemes and automatic theme switching.\n            </p>\n            <a href=\"#\" class=\"card-link\">\n                Learn more\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                    <path d=\"M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z\"/>\n                </svg>\n            </a>\n        </article>\n    </div>\n</body>\n</html>\n\n\nBash/Shell Example\n\nbash title:\"Deployment Script\"\n#!/bin/bash\nTheme deployment and build script\n\nset -euo pipefail\n\nColor output helpers\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\nConfiguration\nTHEMESDIR=\"./themes\"\nBUILDDIR=\"./dist\"\nTHEMEFILES=(\n    \"light.css\"\n    \"dark.css\"\n    \"vscode-dark-plus.css\"\n    \"monokai.css\"\n    \"dracula.css\"\n    \"one-dark-pro.css\"\n    \"solarized-light.css\"\n    \"solarized-dark.css\"\n    \"github-light.css\"\n    \"github-dark.css\"\n    \"nord.css\"\n    \"gruvbox-dark.css\"\n    \"gruvbox-light.css\"\n    \"tokyo-night.css\"\n    \"palenight.css\"\n)\n\nFunction to print colored output\nlog() {\n    local level=$1\n    shift\n    case \"$level\" in\n        \"error\")\n            echo -e \"${RED}[ERROR]${NC} $\" >&2\n            ;;\n        \"success\")\n            echo -e \"${GREEN}[SUCCESS]${NC} $\"\n            ;;\n        \"warning\")\n            echo -e \"${YELLOW}[WARNING]${NC} $\"\n            ;;\n        )\n            echo \"[INFO] $\"\n            ;;\n    esac\n}\n\nValidate theme files exist\nvalidatethemes() {\n    log \"info\" \"Validating theme files...\"\n    \n    local missingthemes=()\n    \n    for theme in \"${THEMEFILES[@]}\"; do\n        if [[ ! -f \"$THEMESDIR/$theme\" ]]; then\n            missingthemes+=(\"$theme\")\n        fi\n    done\n    \n    if [[ ${#missingthemes[@]} -gt 0 ]]; then\n        log \"error\" \"Missing theme files:\"\n        printf '%s\\n' \"${missingthemes[@]}\"\n        return 1\n    fi\n    \n    log \"success\" \"All ${#THEMEFILES[@]} theme files found\"\n    return 0\n}\n\nMinify CSS files\nminifythemes() {\n    log \"info\" \"Minifying theme files...\"\n    \n    # Create build directory if it doesn't exist\n    mkdir -p \"$BUILDDIR/themes\"\n    \n    for theme in \"${THEMEFILES[@]}\"; do\n        local input=\"$THEMESDIR/$theme\"\n        local output=\"$BUILDDIR/themes/${theme%.css}.min.css\"\n        \n        # Simple CSS minification (remove comments and extra whitespace)\n        if command -v csso &> /dev/null; then\n            csso \"$input\" -o \"$output\"\n        else\n            # Fallback: basic minification with sed\n            sed -e 's/\\/\\[^]\\\\///g' \\\n                -e 's/\\s\\+/ /g' \\\n                -e 's/:\\s/:/g' \\\n                -e 's/;\\s/;/g' \\\n                -e 's/{\\s/{/g' \\\n                -e 's/}\\s/}/g' \\\n                -e 's/\\n//g' \\\n                \"$input\" > \"$output\"\n        fi\n        \n        log \"success\" \"Minified: ${theme%.css}.min.css\"\n    done\n}\n\nGenerate theme metadata\ngeneratemetadata() {\n    log \"info\" \"Generating theme metadata...\"\n    \n    cat > \"$BUILDDIR/themes/themes.json\" << EOF\n{\n    \"themes\": [\n        $(for i in \"${!THEMEFILES[@]}\"; do\n            theme=\"${THEMEFILES[$i]}\"\n            themeid=\"${theme%.css}\"\n            \n            # Add comma except for last item\n            if [[ $i -lt $((${#THEMEFILES[@]} - 1)) ]]; then\n                echo \"        \\\"$themeid\\\",\"\n            else\n                echo \"        \\\"$themeid\\\"\"\n            fi\n        done)\n    ],\n    \"count\": ${#THEMEFILES[@]},\n    \"generated\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\"\n}\nEOF\n    \n    log \"success\" \"Generated theme metadata\"\n}\n\nMain execution\nmain() {\n    log \"info\" \"Starting theme build process...\"\n    \n    # Validate themes\n    if ! validatethemes; then\n        log \"error\" \"Theme validation failed\"\n        exit 1\n    fi\n    \n    # Minify themes\n    minifythemes\n    \n    # Generate metadata\n    generatemetadata\n    \n    log \"success\" \"Theme build completed successfully!\"\n    log \"info\" \"Output directory: $BUILDDIR\"\n}\n\nRun main function\nmain \"$@\"\n\n\nJSON Configuration Example\n\njson title:\"Theme Configuration\"\n{\n    \"themes\": {\n        \"light\": {\n            \"id\": \"light\",\n            \"name\": \"Light\",\n            \"description\": \"Clean light theme for daytime use\",\n            \"type\": \"light\",\n            \"colors\": {\n                \"primary\": \"#3b82f6\",\n                \"secondary\": \"#10b981\",\n                \"background\": \"#ffffff\",\n                \"surface\": \"#f9fafb\",\n                \"text\": {\n                    \"primary\": \"#111827\",\n                    \"secondary\": \"#6b7280\",\n                    \"muted\": \"#9ca3af\"\n                },\n                \"syntax\": {\n                    \"keyword\": \"#2563eb\",\n                    \"string\": \"#059669\",\n                    \"number\": \"#dc2626\",\n                    \"function\": \"#7c3aed\",\n                    \"comment\": \"#6b7280\"\n                }\n            },\n            \"customizations\": {\n                \"scrollbar\": true,\n                \"selection\": true,\n                \"forms\": true\n            }\n        },\n        \"dracula\": {\n            \"id\": \"dracula\",\n            \"name\": \"Dracula\",\n            \"description\": \"Dark theme with vibrant colors\",\n            \"type\": \"dark\",\n            \"colors\": {\n                \"primary\": \"#bd93f9\",\n                \"secondary\": \"#50fa7b\",\n                \"background\": \"#282a36\",\n                \"surface\": \"#21222c\",\n                \"text\": {\n                    \"primary\": \"#f8f8f2\",\n                    \"secondary\": \"#6272a4\",\n                    \"muted\": \"#6272a4\"\n                },\n                \"syntax\": {\n                    \"keyword\": \"#ff79c6\",\n                    \"string\": \"#f1fa8c\",\n                    \"number\": \"#bd93f9\",\n                    \"function\": \"#50fa7b\",\n                    \"comment\": \"#6272a4\"\n                }\n            },\n            \"customizations\": {\n                \"scrollbar\": true,\n                \"selection\": true,\n                \"forms\": true\n            }\n        }\n    },\n    \"defaultTheme\": \"light\",\n    \"autoDetect\": true,\n    \"transitions\": {\n        \"enabled\": true,\n        \"duration\": \"250ms\",\n        \"easing\": \"ease-in-out\"\n    }\n}\n\n\nSQL Example\n\nsql title:\"Theme Usage Analytics\"\n-- Create tables for theme usage tracking\nCREATE TABLE IF NOT EXISTS themeusage (\n    id SERIAL PRIMARY KEY,\n    userid INTEGER NOT NULL,\n    themeid VARCHAR(50) NOT NULL,\n    appliedat TIMESTAMP DEFAULT CURRENTTIMESTAMP,\n    sessionduration INTEGER, -- in seconds\n    devicetype VARCHAR(20),\n    browser VARCHAR(50),\n    systemtheme VARCHAR(10) -- 'light' or 'dark'\n);\n\n-- Index for performance\nCREATE INDEX idxthemeusageusertheme ON themeusage(userid, themeid);\nCREATE INDEX idxthemeusageappliedat ON themeusage(appliedat);\n\n-- View for theme popularity\nCREATE OR REPLACE VIEW themepopularity AS\nSELECT \n    themeid,\n    COUNT(DISTINCT userid) as uniqueusers,\n    COUNT() as totalapplications,\n    AVG(sessionduration) as avgsessionduration,\n    MAX(appliedat) as lastused\nFROM themeusage\nWHERE appliedat >= CURRENTDATE - INTERVAL '30 days'\nGROUP BY themeid\nORDER BY uniqueusers DESC;\n\n-- Function to get user's theme history\nCREATE OR REPLACE FUNCTION getuserthemehistory(puserid INTEGER)\nRETURNS TABLE (\n    themeid VARCHAR(50),\n    appliedat TIMESTAMP,\n    durationhours NUMERIC,\n    devicetype VARCHAR(20)\n) AS $$\nBEGIN\n    RETURN QUERY\n    WITH themesessions AS (\n        SELECT \n            tu.themeid,\n            tu.appliedat,\n            tu.devicetype,\n            LEAD(tu.appliedat) OVER (\n                PARTITION BY tu.userid \n                ORDER BY tu.appliedat\n            ) as nextappliedat\n        FROM themeusage tu\n        WHERE tu.userid = puserid\n    )\n    SELECT \n        ts.themeid,\n        ts.appliedat,\n        ROUND(\n            EXTRACT(EPOCH FROM (\n                COALESCE(ts.nextappliedat, CURRENTTIMESTAMP) - ts.appliedat\n            )) / 3600, \n            2\n        ) as durationhours,\n        ts.devicetype\n    FROM themesessions ts\n    ORDER BY ts.appliedat DESC\n    LIMIT 50;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Query to find most popular themes by time of day\nWITH hourlyusage AS (\n    SELECT \n        themeid,\n        EXTRACT(HOUR FROM appliedat) as hourofday,\n        COUNT() as usagecount\n    FROM themeusage\n    WHERE appliedat >= CURRENTDATE - INTERVAL '7 days'\n    GROUP BY themeid, hourofday\n),\nrankedthemes AS (\n    SELECT \n        hourofday,\n        themeid,\n        usagecount,\n        ROWNUMBER() OVER (\n            PARTITION BY hourofday \n            ORDER BY usagecount DESC\n        ) as rank\n    FROM hourlyusage\n)\nSELECT \n    hourofday,\n    themeid as mostpopulartheme,\n    usagecount\nFROM rankedthemes\nWHERE rank = 1\nORDER BY hourofday;\n\n\nYAML Configuration\n\nyaml title:\"Theme Build Configuration\"\nTheme build configuration file\nversion: 1.0.0\nbuild:\n  inputdir: ./themes\n  outputdir: ./dist/themes\n  \n  # Minification settings\n  minify:\n    enabled: true\n    removecomments: true\n    removewhitespace: true\n    mergemediaqueries: true\n    \n  # Optimization settings\n  optimize:\n    mergesimilarrules: true\n    removeunusedcss: false\n    inlinecriticalcss: false\n\nTheme definitions\nthemes:\n  - id: light\n    file: light.css\n    type: light\n    default: true\n    \n  - id: dark\n    file: dark.css\n    type: dark\n    \n  - id: vscode-dark-plus\n    file: vscode-dark-plus.css\n    type: dark\n    category: editor\n    \n  - id: monokai\n    file: monokai.css\n    type: dark\n    category: editor\n    \n  - id: dracula\n    file: dracula.css\n    type: dark\n    category: popular\n    \n  - id: one-dark-pro\n    file: one-dark-pro.css\n    type: dark\n    category: editor\n    \n  - id: solarized-light\n    file: solarized-light.css\n    type: light\n    category: classic\n    \n  - id: solarized-dark\n    file: solarized-dark.css\n    type: dark\n    category: classic\n    \n  - id: github-light\n    file: github-light.css\n    type: light\n    category: git\n    \n  - id: github-dark\n    file: github-dark.css\n    type: dark\n    category: git\n    \n  - id: nord\n    file: nord.css\n    type: dark\n    category: nordic\n    \n  - id: gruvbox-dark\n    file: gruvbox-dark.css\n    type: dark\n    category: retro\n    \n  - id: gruvbox-light\n    file: gruvbox-light.css\n    type: light\n    category: retro\n    \n  - id: tokyo-night\n    file: tokyo-night.css\n    type: dark\n    category: modern\n    \n  - id: palenight\n    file: palenight.css\n    type: dark\n    category: material\n\nAuto theme detection\nautotheme:\n  enabled: true\n  lightthemes: [light, solarized-light, github-light, gruvbox-light]\n  darkthemes: [dark, vscode-dark-plus, monokai, dracula, one-dark-pro, \n                solarized-dark, github-dark, nord, gruvbox-dark, \n                tokyo-night, palenight]\n  \n  # Time-based switching (optional)\n  schedule:\n    enabled: false\n    lightstart: \"06:00\"\n    darkstart: \"18:00\"\n\nTheme preview settings\npreview:\n  delayms: 200\n  restoreonleave: true\n  showcolorswatches: true\n\n\nCollapsible Code Example\n\njavascript title:\"Collapsible Example\" collapse:\"true\"\n// This code block is collapsible!\n// Click the arrow to expand/collapse\n\nfunction generateThemeCSS(theme) {\n    const { colors, typography, spacing } = theme;\n    \n    return \n        :root[data-theme=\"${theme.id}\"] {\n            / Color System /\n            --color-primary: ${colors.primary};\n            --color-secondary: ${colors.secondary};\n            --color-accent: ${colors.accent};\n            --color-background: ${colors.background};\n            --color-surface: ${colors.surface};\n            --color-text: ${colors.text};\n            --color-text-muted: ${colors.textMuted};\n            \n            / Typography /\n            --font-family: ${typography.fontFamily};\n            --font-size-base: ${typography.sizeBase};\n            --line-height-base: ${typography.lineHeight};\n            \n            / Spacing /\n            --spacing-unit: ${spacing.unit};\n            --spacing-xs: calc(var(--spacing-unit)  0.25);\n            --spacing-sm: calc(var(--spacing-unit)  0.5);\n            --spacing-md: var(--spacing-unit);\n            --spacing-lg: calc(var(--spacing-unit)  1.5);\n            --spacing-xl: calc(var(--spacing-unit)  2);\n        }\n    ;\n}\n\n// Generate CSS for all themes\nconst themes = getThemeDefinitions();\nconst cssOutput = themes.map(generateThemeCSS).join('\\n\\n');\n\nconsole.log('Generated theme CSS:', cssOutput);\n\n\nTesting Notes\n\nWhen testing themes, pay attention to:\n\n1. Color Contrast - Ensure text is readable against backgrounds\n2. Syntax Highlighting - All token types should be distinguishable\n3. UI Elements - Buttons, links, and interactive elements should be visible\n4. Code Blocks - Headers, titles, and copy buttons should be styled appropriately\n5. Transitions - Theme switching should be smooth without flashing\n6. Hover States - Interactive elements should have clear hover feedback\n7. Selection Colors - Text selection should be visible and pleasant\n8. Scrollbars - Custom scrollbar styling should match the theme\n\nTheme Implementation Complete!\n\nAll 15 themes have been successfully implemented with:\n\n- \u2705 Full CSS custom property definitions\n- \u2705 Comprehensive syntax highlighting for all languages\n- \u2705 Smooth theme preview on hover\n- \u2705 System theme detection (auto light/dark)\n- \u2705 Persistent theme selection\n- \u2705 Responsive and accessible design\n- \u2705 Beautiful, consistent styling across all themes\n\nTry switching between themes using the theme picker in the header to see the magic happen! \ud83c\udfa8 javascript JavaScript Class Example // ES6 Class with various syntax elements\nclass ThemeManager {\n    constructor(options = {}) {\n        this.themes = options.themes || [];\n        this.currentTheme = options.defaultTheme || 'light';\n        this.callbacks = new Map();\n        this._initialized = false;\n    }\n\n    async initialize() {\n        try {\n            // Load saved theme from localStorage\n            const saved = localStorage.getItem('theme');\n            if (saved && this.themes.includes(saved)) {\n                this.currentTheme = saved;\n            }\n            \n            // Apply the theme\n            await this.applyTheme(this.currentTheme);\n            this._initialized = true;\n            \n            return { success: true, theme: this.currentTheme };\n        } catch (error) {\n            console.error('Failed to initialize theme:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    applyTheme(themeName) {\n        // Validate theme exists\n        if (!this.themes.includes(themeName)) {\n            throw new Error(`Theme \"${themeName}\" not found`);\n        }\n\n        // Apply theme to DOM\n        document.documentElement.setAttribute('data-theme', themeName);\n        \n        // Save preference\n        localStorage.setItem('theme', themeName);\n        \n        // Trigger callbacks\n        this.callbacks.forEach(callback => callback(themeName));\n    }\n\n    // Arrow function property\n    onChange = (callback) => {\n        const id = Date.now();\n        this.callbacks.set(id, callback);\n        return () => this.callbacks.delete(id);\n    }\n}\n\n// Usage\nconst manager = new ThemeManager({\n    themes: ['light', 'dark', 'monokai'],\n    defaultTheme: 'dark'\n});\n\nmanager.initialize().then(result => {\n    console.log('Theme initialized:', result);\n}); python Python Data Processing import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional, Union\nimport asyncio\n\nclass DataProcessor:\n    \"\"\"Process and analyze time series data with various transformations.\"\"\"\n    \n    def __init__(self, data_path: str, cache_size: int = 1000):\n        self.data_path = data_path\n        self.cache_size = cache_size\n        self._cache: Dict[str, pd.DataFrame] = {}\n        self._metadata = {\n            'created': datetime.now(),\n            'version': '1.0.0',\n            'author': 'System'\n        }\n    \n    @property\n    def is_cached(self) -> bool:\n        \"\"\"Check if data is currently cached.\"\"\"\n        return len(self._cache) > 0\n    \n    async def load_data_async(self, \n                            file_path: str, \n                            columns: Optional[List[str]] = None) -> pd.DataFrame:\n        \"\"\"Asynchronously load data from CSV file.\"\"\"\n        try:\n            # Simulate async operation\n            await asyncio.sleep(0.1)\n            \n            df = pd.read_csv(file_path, usecols=columns)\n            \n            # Cache the result\n            if len(self._cache) < self.cache_size:\n                self._cache[file_path] = df\n            \n            return df\n            \n        except FileNotFoundError as e:\n            print(f\"Error: File {file_path} not found\")\n            raise e\n        except Exception as e:\n            print(f\"Unexpected error: {str(e)}\")\n            raise\n    \n    def process_timeseries(self, \n                          df: pd.DataFrame, \n                          window_size: int = 7,\n                          aggregation: str = 'mean') -> pd.DataFrame:\n        \"\"\"Apply rolling window calculations to time series data.\"\"\"\n        \n        # Validate inputs\n        if window_size <= 0:\n            raise ValueError(\"Window size must be positive\")\n        \n        valid_aggregations = ['mean', 'sum', 'min', 'max', 'std']\n        if aggregation not in valid_aggregations:\n            raise ValueError(f\"Aggregation must be one of {valid_aggregations}\")\n        \n        # Apply rolling calculation\n        numeric_cols = df.select_dtypes(include=[np.number]).columns\n        \n        result = df.copy()\n        for col in numeric_cols:\n            if aggregation == 'mean':\n                result[f'{col}_rolling_{window_size}d'] = df[col].rolling(window_size).mean()\n            elif aggregation == 'sum':\n                result[f'{col}_rolling_{window_size}d'] = df[col].rolling(window_size).sum()\n            # ... etc\n        \n        return result\n    \n    @staticmethod\n    def generate_sample_data(n_rows: int = 1000) -> pd.DataFrame:\n        \"\"\"Generate sample time series data for testing.\"\"\"\n        dates = pd.date_range(\n            start='2024-01-01', \n            periods=n_rows, \n            freq='D'\n        )\n        \n        data = {\n            'date': dates,\n            'value': np.random.randn(n_rows).cumsum() + 100,\n            'volume': np.random.randint(1000, 10000, n_rows),\n            'category': np.random.choice(['A', 'B', 'C'], n_rows)\n        }\n        \n        return pd.DataFrame(data)\n\n# Example usage\nif __name__ == \"__main__\":\n    processor = DataProcessor(\"./data\")\n    \n    # Generate and process sample data\n    df = DataProcessor.generate_sample_data(365)\n    processed = processor.process_timeseries(df, window_size=30)\n    \n    print(f\"Data shape: {processed.shape}\")\n    print(f\"Columns: {list(processed.columns)}\") html Responsive Card Component <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Theme Card Component</title>\n    <style>\n        /* CSS Custom Properties for theming */\n        :root {\n            --card-bg: #ffffff;\n            --card-border: #e5e7eb;\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            --text-primary: #111827;\n            --text-secondary: #6b7280;\n            --accent-color: #3b82f6;\n        }\n\n        /* Dark theme override */\n        [data-theme=\"dark\"] {\n            --card-bg: #1f2937;\n            --card-border: #374151;\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n            --text-primary: #f3f4f6;\n            --text-secondary: #9ca3af;\n            --accent-color: #60a5fa;\n        }\n\n        /* Card component styles */\n        .card {\n            background-color: var(--card-bg);\n            border: 1px solid var(--card-border);\n            border-radius: 0.5rem;\n            box-shadow: var(--card-shadow);\n            padding: 1.5rem;\n            margin: 1rem;\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\n        }\n\n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);\n        }\n\n        .card-title {\n            color: var(--text-primary);\n            font-size: 1.25rem;\n            font-weight: 600;\n            margin: 0 0 0.5rem 0;\n        }\n\n        .card-description {\n            color: var(--text-secondary);\n            line-height: 1.5;\n            margin: 0 0 1rem 0;\n        }\n\n        .card-link {\n            color: var(--accent-color);\n            text-decoration: none;\n            font-weight: 500;\n            display: inline-flex;\n            align-items: center;\n            gap: 0.25rem;\n        }\n\n        .card-link:hover {\n            text-decoration: underline;\n        }\n\n        /* Responsive grid */\n        .card-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 1rem;\n            padding: 1rem;\n        }\n\n        @media (max-width: 768px) {\n            .card {\n                padding: 1rem;\n            }\n            \n            .card-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"card-grid\">\n        <article class=\"card\">\n            <h2 class=\"card-title\">Theme System</h2>\n            <p class=\"card-description\">\n                A comprehensive theming system with CSS custom properties \n                that supports multiple color schemes and automatic theme switching.\n            </p>\n            <a href=\"#\" class=\"card-link\">\n                Learn more\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                    <path d=\"M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z\"/>\n                </svg>\n            </a>\n        </article>\n    </div>\n</body>\n</html> bash Deployment Script #!/bin/bash\n# Theme deployment and build script\n\nset -euo pipefail\n\n# Color output helpers\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Configuration\nTHEMES_DIR=\"./themes\"\nBUILD_DIR=\"./dist\"\nTHEME_FILES=(\n    \"light.css\"\n    \"dark.css\"\n    \"vscode-dark-plus.css\"\n    \"monokai.css\"\n    \"dracula.css\"\n    \"one-dark-pro.css\"\n    \"solarized-light.css\"\n    \"solarized-dark.css\"\n    \"github-light.css\"\n    \"github-dark.css\"\n    \"nord.css\"\n    \"gruvbox-dark.css\"\n    \"gruvbox-light.css\"\n    \"tokyo-night.css\"\n    \"palenight.css\"\n)\n\n# Function to print colored output\nlog() {\n    local level=$1\n    shift\n    case \"$level\" in\n        \"error\")\n            echo -e \"${RED}[ERROR]${NC} $*\" >&2\n            ;;\n        \"success\")\n            echo -e \"${GREEN}[SUCCESS]${NC} $*\"\n            ;;\n        \"warning\")\n            echo -e \"${YELLOW}[WARNING]${NC} $*\"\n            ;;\n        *)\n            echo \"[INFO] $*\"\n            ;;\n    esac\n}\n\n# Validate theme files exist\nvalidate_themes() {\n    log \"info\" \"Validating theme files...\"\n    \n    local missing_themes=()\n    \n    for theme in \"${THEME_FILES[@]}\"; do\n        if [[ ! -f \"$THEMES_DIR/$theme\" ]]; then\n            missing_themes+=(\"$theme\")\n        fi\n    done\n    \n    if [[ ${#missing_themes[@]} -gt 0 ]]; then\n        log \"error\" \"Missing theme files:\"\n        printf '%s\\n' \"${missing_themes[@]}\"\n        return 1\n    fi\n    \n    log \"success\" \"All ${#THEME_FILES[@]} theme files found\"\n    return 0\n}\n\n# Minify CSS files\nminify_themes() {\n    log \"info\" \"Minifying theme files...\"\n    \n    # Create build directory if it doesn't exist\n    mkdir -p \"$BUILD_DIR/themes\"\n    \n    for theme in \"${THEME_FILES[@]}\"; do\n        local input=\"$THEMES_DIR/$theme\"\n        local output=\"$BUILD_DIR/themes/${theme%.css}.min.css\"\n        \n        # Simple CSS minification (remove comments and extra whitespace)\n        if command -v csso &> /dev/null; then\n            csso \"$input\" -o \"$output\"\n        else\n            # Fallback: basic minification with sed\n            sed -e 's/\\/\\*[^*]*\\*\\///g' \\\n                -e 's/\\s\\+/ /g' \\\n                -e 's/:\\s/:/g' \\\n                -e 's/;\\s/;/g' \\\n                -e 's/{\\s/{/g' \\\n                -e 's/}\\s/}/g' \\\n                -e 's/\\n//g' \\\n                \"$input\" > \"$output\"\n        fi\n        \n        log \"success\" \"Minified: ${theme%.css}.min.css\"\n    done\n}\n\n# Generate theme metadata\ngenerate_metadata() {\n    log \"info\" \"Generating theme metadata...\"\n    \n    cat > \"$BUILD_DIR/themes/themes.json\" << EOF\n{\n    \"themes\": [\n        $(for i in \"${!THEME_FILES[@]}\"; do\n            theme=\"${THEME_FILES[$i]}\"\n            theme_id=\"${theme%.css}\"\n            \n            # Add comma except for last item\n            if [[ $i -lt $((${#THEME_FILES[@]} - 1)) ]]; then\n                echo \"        \\\"$theme_id\\\",\"\n            else\n                echo \"        \\\"$theme_id\\\"\"\n            fi\n        done)\n    ],\n    \"count\": ${#THEME_FILES[@]},\n    \"generated\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\"\n}\nEOF\n    \n    log \"success\" \"Generated theme metadata\"\n}\n\n# Main execution\nmain() {\n    log \"info\" \"Starting theme build process...\"\n    \n    # Validate themes\n    if ! validate_themes; then\n        log \"error\" \"Theme validation failed\"\n        exit 1\n    fi\n    \n    # Minify themes\n    minify_themes\n    \n    # Generate metadata\n    generate_metadata\n    \n    log \"success\" \"Theme build completed successfully!\"\n    log \"info\" \"Output directory: $BUILD_DIR\"\n}\n\n# Run main function\nmain \"$@\" json Theme Configuration {\n    \"themes\": {\n        \"light\": {\n            \"id\": \"light\",\n            \"name\": \"Light\",\n            \"description\": \"Clean light theme for daytime use\",\n            \"type\": \"light\",\n            \"colors\": {\n                \"primary\": \"#3b82f6\",\n                \"secondary\": \"#10b981\",\n                \"background\": \"#ffffff\",\n                \"surface\": \"#f9fafb\",\n                \"text\": {\n                    \"primary\": \"#111827\",\n                    \"secondary\": \"#6b7280\",\n                    \"muted\": \"#9ca3af\"\n                },\n                \"syntax\": {\n                    \"keyword\": \"#2563eb\",\n                    \"string\": \"#059669\",\n                    \"number\": \"#dc2626\",\n                    \"function\": \"#7c3aed\",\n                    \"comment\": \"#6b7280\"\n                }\n            },\n            \"customizations\": {\n                \"scrollbar\": true,\n                \"selection\": true,\n                \"forms\": true\n            }\n        },\n        \"dracula\": {\n            \"id\": \"dracula\",\n            \"name\": \"Dracula\",\n            \"description\": \"Dark theme with vibrant colors\",\n            \"type\": \"dark\",\n            \"colors\": {\n                \"primary\": \"#bd93f9\",\n                \"secondary\": \"#50fa7b\",\n                \"background\": \"#282a36\",\n                \"surface\": \"#21222c\",\n                \"text\": {\n                    \"primary\": \"#f8f8f2\",\n                    \"secondary\": \"#6272a4\",\n                    \"muted\": \"#6272a4\"\n                },\n                \"syntax\": {\n                    \"keyword\": \"#ff79c6\",\n                    \"string\": \"#f1fa8c\",\n                    \"number\": \"#bd93f9\",\n                    \"function\": \"#50fa7b\",\n                    \"comment\": \"#6272a4\"\n                }\n            },\n            \"customizations\": {\n                \"scrollbar\": true,\n                \"selection\": true,\n                \"forms\": true\n            }\n        }\n    },\n    \"defaultTheme\": \"light\",\n    \"autoDetect\": true,\n    \"transitions\": {\n        \"enabled\": true,\n        \"duration\": \"250ms\",\n        \"easing\": \"ease-in-out\"\n    }\n} sql Theme Usage Analytics -- Create tables for theme usage tracking\nCREATE TABLE IF NOT EXISTS theme_usage (\n    id SERIAL PRIMARY KEY,\n    user_id INTEGER NOT NULL,\n    theme_id VARCHAR(50) NOT NULL,\n    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    session_duration INTEGER, -- in seconds\n    device_type VARCHAR(20),\n    browser VARCHAR(50),\n    system_theme VARCHAR(10) -- 'light' or 'dark'\n);\n\n-- Index for performance\nCREATE INDEX idx_theme_usage_user_theme ON theme_usage(user_id, theme_id);\nCREATE INDEX idx_theme_usage_applied_at ON theme_usage(applied_at);\n\n-- View for theme popularity\nCREATE OR REPLACE VIEW theme_popularity AS\nSELECT \n    theme_id,\n    COUNT(DISTINCT user_id) as unique_users,\n    COUNT(*) as total_applications,\n    AVG(session_duration) as avg_session_duration,\n    MAX(applied_at) as last_used\nFROM theme_usage\nWHERE applied_at >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY theme_id\nORDER BY unique_users DESC;\n\n-- Function to get user's theme history\nCREATE OR REPLACE FUNCTION get_user_theme_history(p_user_id INTEGER)\nRETURNS TABLE (\n    theme_id VARCHAR(50),\n    applied_at TIMESTAMP,\n    duration_hours NUMERIC,\n    device_type VARCHAR(20)\n) AS $$\nBEGIN\n    RETURN QUERY\n    WITH theme_sessions AS (\n        SELECT \n            tu.theme_id,\n            tu.applied_at,\n            tu.device_type,\n            LEAD(tu.applied_at) OVER (\n                PARTITION BY tu.user_id \n                ORDER BY tu.applied_at\n            ) as next_applied_at\n        FROM theme_usage tu\n        WHERE tu.user_id = p_user_id\n    )\n    SELECT \n        ts.theme_id,\n        ts.applied_at,\n        ROUND(\n            EXTRACT(EPOCH FROM (\n                COALESCE(ts.next_applied_at, CURRENT_TIMESTAMP) - ts.applied_at\n            )) / 3600, \n            2\n        ) as duration_hours,\n        ts.device_type\n    FROM theme_sessions ts\n    ORDER BY ts.applied_at DESC\n    LIMIT 50;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Query to find most popular themes by time of day\nWITH hourly_usage AS (\n    SELECT \n        theme_id,\n        EXTRACT(HOUR FROM applied_at) as hour_of_day,\n        COUNT(*) as usage_count\n    FROM theme_usage\n    WHERE applied_at >= CURRENT_DATE - INTERVAL '7 days'\n    GROUP BY theme_id, hour_of_day\n),\nranked_themes AS (\n    SELECT \n        hour_of_day,\n        theme_id,\n        usage_count,\n        ROW_NUMBER() OVER (\n            PARTITION BY hour_of_day \n            ORDER BY usage_count DESC\n        ) as rank\n    FROM hourly_usage\n)\nSELECT \n    hour_of_day,\n    theme_id as most_popular_theme,\n    usage_count\nFROM ranked_themes\nWHERE rank = 1\nORDER BY hour_of_day; yaml Theme Build Configuration # Theme build configuration file\nversion: 1.0.0\nbuild:\n  input_dir: ./themes\n  output_dir: ./dist/themes\n  \n  # Minification settings\n  minify:\n    enabled: true\n    remove_comments: true\n    remove_whitespace: true\n    merge_media_queries: true\n    \n  # Optimization settings\n  optimize:\n    merge_similar_rules: true\n    remove_unused_css: false\n    inline_critical_css: false\n\n# Theme definitions\nthemes:\n  - id: light\n    file: light.css\n    type: light\n    default: true\n    \n  - id: dark\n    file: dark.css\n    type: dark\n    \n  - id: vscode-dark-plus\n    file: vscode-dark-plus.css\n    type: dark\n    category: editor\n    \n  - id: monokai\n    file: monokai.css\n    type: dark\n    category: editor\n    \n  - id: dracula\n    file: dracula.css\n    type: dark\n    category: popular\n    \n  - id: one-dark-pro\n    file: one-dark-pro.css\n    type: dark\n    category: editor\n    \n  - id: solarized-light\n    file: solarized-light.css\n    type: light\n    category: classic\n    \n  - id: solarized-dark\n    file: solarized-dark.css\n    type: dark\n    category: classic\n    \n  - id: github-light\n    file: github-light.css\n    type: light\n    category: git\n    \n  - id: github-dark\n    file: github-dark.css\n    type: dark\n    category: git\n    \n  - id: nord\n    file: nord.css\n    type: dark\n    category: nordic\n    \n  - id: gruvbox-dark\n    file: gruvbox-dark.css\n    type: dark\n    category: retro\n    \n  - id: gruvbox-light\n    file: gruvbox-light.css\n    type: light\n    category: retro\n    \n  - id: tokyo-night\n    file: tokyo-night.css\n    type: dark\n    category: modern\n    \n  - id: palenight\n    file: palenight.css\n    type: dark\n    category: material\n\n# Auto theme detection\nauto_theme:\n  enabled: true\n  light_themes: [light, solarized-light, github-light, gruvbox-light]\n  dark_themes: [dark, vscode-dark-plus, monokai, dracula, one-dark-pro, \n                solarized-dark, github-dark, nord, gruvbox-dark, \n                tokyo-night, palenight]\n  \n  # Time-based switching (optional)\n  schedule:\n    enabled: false\n    light_start: \"06:00\"\n    dark_start: \"18:00\"\n\n# Theme preview settings\npreview:\n  delay_ms: 200\n  restore_on_leave: true\n  show_color_swatches: true",
      "code_blocks_count": 7
    },
    {
      "path": "/notes/test-html-copy.md",
      "context": null,
      "metadata": {
        "title": "HTML Copy Test",
        "tags": [
          "test",
          "html",
          "code"
        ],
        "created": "2025-01-06",
        "author": "System",
        "description": "Test file for verifying HTML code copying functionality",
        "updated": null,
        "category": null,
        "status": null
      },
      "content_preview": "This page tests the copying functionality for code blocks containing HTML.\n\n\n\nhtml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Test Page</title>\n</head>\n<body>\n    <h...",
      "searchable_content": "\nHTML Copy Test\n\nThis page tests the copying functionality for code blocks containing HTML.\n\nBasic HTML Example\n\nhtml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Test Page</title>\n</head>\n<body>\n    <h1>Hello World</h1>\n    <p>This is a <strong>test</strong> paragraph.</p>\n    <div class=\"container\">\n        <span>Some content</span>\n    </div>\n</body>\n</html>\n\n\nReact Component Example\n\njsx\nimport React from 'react';\n\nconst MyComponent = () => {\n    return (\n        <div className=\"wrapper\">\n            <h1>Welcome</h1>\n            <p>This is a React component with <em>JSX</em> syntax.</p>\n            <button onClick={() => console.log('clicked')}>\n                Click Me\n            </button>\n        </div>\n    );\n};\n\nexport default MyComponent;\n\n\nInline HTML Tags\n\nhtml\n<div>This has <strong>bold</strong> and <em>italic</em> text.</div>\n<p>Links: <a href=\"https://example.com\">Example</a></p>\n<img src=\"image.jpg\" alt=\"An image\" />\n<input type=\"text\" placeholder=\"Enter text\" />\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Test Page</title>\n</head>\n<body>\n    <h1>Hello World</h1>\n    <p>This is a <strong>test</strong> paragraph.</p>\n    <div class=\"container\">\n        <span>Some content</span>\n    </div>\n</body>\n</html> import React from 'react';\n\nconst MyComponent = () => {\n    return (\n        <div className=\"wrapper\">\n            <h1>Welcome</h1>\n            <p>This is a React component with <em>JSX</em> syntax.</p>\n            <button onClick={() => console.log('clicked')}>\n                Click Me\n            </button>\n        </div>\n    );\n};\n\nexport default MyComponent; <div>This has <strong>bold</strong> and <em>italic</em> text.</div>\n<p>Links: <a href=\"https://example.com\">Example</a></p>\n<img src=\"image.jpg\" alt=\"An image\" />\n<input type=\"text\" placeholder=\"Enter text\" />",
      "code_blocks_count": 3
    },
    {
      "path": "/notes/test-code-alignment.md",
      "context": null,
      "metadata": {
        "title": "Code Block Alignment Test",
        "tags": [
          "test",
          "code",
          "alignment"
        ],
        "created": "2025-01-06",
        "author": "System",
        "description": "Test file for verifying code block header alignment",
        "updated": null,
        "category": null,
        "status": null
      },
      "content_preview": "This page demonstrates how code blocks align when they have different languages and titles.\n\n\n\njavascript title:\"Main Application Entry\"\n// JavaScript with a title\nconst app = {\n    name: 'Notes Wiki'...",
      "searchable_content": "\nCode Block Alignment Test\n\nThis page demonstrates how code blocks align when they have different languages and titles.\n\nMultiple Code Blocks\n\njavascript title:\"Main Application Entry\"\n// JavaScript with a title\nconst app = {\n    name: 'Notes Wiki',\n    version: '1.0.0'\n};\n\n\npython\nPython without a title\ndef helloworld():\n    print(\"Hello, World!\")\n\n\nhtml title:\"Basic HTML Template\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Test</title>\n    </head>\n    <body>\n        <h1>Hello</h1>\n    </body>\n</html>\n\n\ncss\n/ CSS without a title /\n.container {\n    display: flex;\n    align-items: center;\n}\n\n\nbash title:\"Build Script\"\n#!/bin/bash\necho \"Building project...\"\nnpm run build\n\n\njson title:\"Package Configuration\"\n{\n    \"name\": \"notes-wiki\",\n    \"version\": \"1.0.0\"\n}\n\n\nLanguage Variety\n\nrust title:\"Rust Example\"\nfn main() {\n    println!(\"Hello from Rust!\");\n}\n\n\ngo\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello from Go!\")\n}\n\n\ntypescript title:\"TypeScript Interface\"\ninterface User {\n    id: number;\n    name: string;\n    email: string;\n}\n\n\nyaml title:\"Configuration File\"\napp:\n  name: Notes Wiki\n  version: 1.0.0\n  features:\n    - search\n    - themes\n    - markdown\n\n\nAll code blocks above should have their language labels and titles nicely aligned in columns! javascript Main Application Entry // JavaScript with a title\nconst app = {\n    name: 'Notes Wiki',\n    version: '1.0.0'\n}; # Python without a title\ndef hello_world():\n    print(\"Hello, World!\") html Basic HTML Template <!DOCTYPE html>\n<html>\n    <head>\n        <title>Test</title>\n    </head>\n    <body>\n        <h1>Hello</h1>\n    </body>\n</html> /* CSS without a title */\n.container {\n    display: flex;\n    align-items: center;\n} bash Build Script #!/bin/bash\necho \"Building project...\"\nnpm run build json Package Configuration {\n    \"name\": \"notes-wiki\",\n    \"version\": \"1.0.0\"\n} rust Rust Example fn main() {\n    println!(\"Hello from Rust!\");\n} package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello from Go!\")\n} typescript TypeScript Interface interface User {\n    id: number;\n    name: string;\n    email: string;\n} yaml Configuration File app:\n  name: Notes Wiki\n  version: 1.0.0\n  features:\n    - search\n    - themes\n    - markdown",
      "code_blocks_count": 10
    },
    {
      "path": "/notes/images-demo.md",
      "context": null,
      "metadata": {
        "title": "Image Usage Guide",
        "tags": [
          "documentation",
          "guide",
          "images"
        ],
        "created": "2025-01-06",
        "author": "Wiki Admin",
        "description": "How to add and use images in your notes",
        "updated": null,
        "category": null,
        "status": null
      },
      "content_preview": "This guide demonstrates how to add images to your notes using various methods and styling options.\n\n\n\nThe simplest way to add an image is using standard Markdown syntax:\n\nmarkdown\n!Alt text\n\n\nFor exam...",
      "searchable_content": "\nImage Usage Guide\n\nThis guide demonstrates how to add images to your notes using various methods and styling options.\n\nBasic Image Usage\n\nThe simplest way to add an image is using standard Markdown syntax:\n\nmarkdown\n!Alt text\n\n\nFor example:\nmarkdown\n!A beautiful sunset\n\n\nImage Storage\n\nImages should be stored in the /images/ directory with a structure that mirrors your notes:\n- /images/notes/ - General note images\n- /images/tutorials/ - Tutorial screenshots and diagrams\n- /images/reference/ - Reference materials and charts\n\nImage Alignment and Sizing\n\nYou can control image alignment and size using special keywords in the alt text:\n\nLeft-aligned image\nmarkdown\n!left: Description of image\n\nThis will float the image to the left with text wrapping around it.\n\nRight-aligned image\nmarkdown\n!right: Description of image\n\nThis will float the image to the right with text wrapping around it.\n\nSize control\nUse size keywords in your alt text:\n- !small: Image description - Max width: 300px\n- !medium: Image description - Max width: 600px\n- !large: Image description - Full width\n\nCombining alignment and size\nmarkdown\n!left small: A small left-aligned image\n\n\nImages with Captions\n\nFor images that need captions, use HTML figure elements:\n\nhtml\n<figure>\n  <img src=\"/images/example.jpg\" alt=\"Description\">\n  <figcaption>This is a caption explaining the image above.</figcaption>\n</figure>\n\n\nExternal Images\n\nWhile it's recommended to store images locally for a self-contained wiki, you can also use external image URLs:\n\nmarkdown\n!External image\n\n\nBest Practices\n\n1. Use descriptive alt text - This helps with accessibility and SEO\n2. Optimize image sizes - Large images slow down page loading\n3. Use appropriate formats:\n   - JPEG for photographs\n   - PNG for screenshots and images with transparency\n   - SVG for logos and diagrams\n4. Organize images - Keep your images directory structure clean and logical\n\nImage Styling\n\nAll images automatically receive:\n- Rounded corners for a modern look\n- Subtle shadow on hover\n- Smooth transitions\n- Responsive sizing (never exceed container width)\n\nLive Example\n\nHere's a demonstration using a placeholder image:\n\n!Demo placeholder image\n\nExample Gallery\n\nHere's how you might create an image gallery using a combination of techniques:\n\nmarkdown\nProject Screenshots\n\n!small left: Login screen\nThe login screen features a clean, minimalist design with email and password fields.\n\n!small right: Dashboard view\nThe dashboard provides an overview of all key metrics and recent activity.\n\n<figure>\n  <img src=\"/images/projects/analytics.png\" alt=\"Analytics page showing graphs\">\n  <figcaption>The analytics page offers detailed insights with interactive charts and graphs.</figcaption>\n</figure>\n\n\nAlignment Examples\n\nLeft-aligned Image\n!left small: Sample image aligned to the left\nLorem ipsum dolor sit amet, consectetur adipiscing elit. This text wraps around the left-aligned image. The image is floated to the left with appropriate margins to create a nice visual flow. You can continue adding more text here and it will wrap around the image naturally.\n\nRight-aligned Image\n!right small: Sample image aligned to the right\nLorem ipsum dolor sit amet, consectetur adipiscing elit. This text wraps around the right-aligned image. The image is floated to the right with appropriate margins. This creates an interesting layout where text flows on the left side of the image.\n\nCentered Image with Caption\n<figure>\n  <img src=\"/images/notes/demo-placeholder.svg\" alt=\"medium: Centered demonstration image\">\n  <figcaption>This is a centered image with a caption. The caption provides additional context about the image content.</figcaption>\n</figure>\n\nTroubleshooting\n\nImage not showing?\n- Check the file path is correct\n- Ensure the image file exists in the /images/ directory\n- Verify the file extension matches (case-sensitive on some systems)\n\nImage too large?\n- Use the size keywords (small, medium, large)\n- Consider optimizing the image file itself\n- Use image compression tools before uploading\n\nText not wrapping properly?\n- Ensure you're using the correct alignment syntax\n- Add clear fixes after floated images if needed ![Alt text](path/to/image.jpg) ![A beautiful sunset](/images/notes/sunset.jpg) ![left: Description of image](/images/example.jpg) ![right: Description of image](/images/example.jpg) ![left small: A small left-aligned image](/images/example.jpg) <figure>\n  <img src=\"/images/example.jpg\" alt=\"Description\">\n  <figcaption>This is a caption explaining the image above.</figcaption>\n</figure> ![External image](https://example.com/image.jpg) ### Project Screenshots\n\n![small left: Login screen](/images/projects/login.png)\nThe login screen features a clean, minimalist design with email and password fields.\n\n![small right: Dashboard view](/images/projects/dashboard.png)\nThe dashboard provides an overview of all key metrics and recent activity.\n\n<figure>\n  <img src=\"/images/projects/analytics.png\" alt=\"Analytics page showing graphs\">\n  <figcaption>The analytics page offers detailed insights with interactive charts and graphs.</figcaption>\n</figure>",
      "code_blocks_count": 8
    },
    {
      "path": "/notes/search-test.md",
      "context": null,
      "metadata": {
        "title": "Search Test Note",
        "tags": [
          "test",
          "search",
          "debugging"
        ],
        "created": "2025-01-06",
        "author": "Debug",
        "description": "Testing search functionality with code blocks",
        "updated": null,
        "category": null,
        "status": null
      },
      "content_preview": "This note is designed to test search functionality, especially searching within code blocks.\n\n\n\nThis is some simple text that should be searchable. Let's include some unique words: UNIQUETEXT123\n\n\n\nHe...",
      "searchable_content": "\nSearch Test Note\n\nThis note is designed to test search functionality, especially searching within code blocks.\n\nSimple Text\n\nThis is some simple text that should be searchable. Let's include some unique words: UNIQUETEXT123\n\nCode Block Test\n\nHere's a JavaScript code block with a unique function name:\n\njavascript\nfunction searchTestFunction123() {\n    console.log('This is a unique search test');\n    const uniqueVariable456 = 'test';\n    return uniqueVariable456;\n}\n\n\nPython Code Block\n\npython\ndef uniquepythonfunction789():\n    print(\"Another unique search term\")\n    uniquevar = \"PYTHONUNIQUE999\"\n    return uniquevar\n\n\nTesting Search Terms\n\nThe following unique terms should be searchable:\n- UNIQUETEXT123 (in plain text)\n- searchTestFunction123 (in JavaScript code block)\n- uniqueVariable456 (in JavaScript code block)\n- uniquepythonfunction789 (in Python code block)\n- PYTHONUNIQUE999 (in Python code block)\n\nIf search is working correctly, searching for any of these terms should find this note. function searchTestFunction123() {\n    console.log('This is a unique search test');\n    const uniqueVariable456 = 'test';\n    return uniqueVariable456;\n} def unique_python_function789():\n    print(\"Another unique search term\")\n    unique_var = \"PYTHONUNIQUE999\"\n    return unique_var",
      "code_blocks_count": 2
    },
    {
      "path": "/notes/test-internal-links.md",
      "context": null,
      "metadata": {
        "title": "Internal Links Test",
        "tags": [
          "test",
          "links"
        ],
        "created": "2025-01-06",
        "author": "Test User",
        "description": "Testing internal link functionality",
        "updated": null,
        "category": null,
        "status": null
      },
      "content_preview": "This page tests various internal link formats to see what works.\n\n\n\nThese should work based on the current implementation:\n- Home Page\n- JavaScript Tips\n- Git Commands\n\n\n\nTesting if these work:\n- Inde...",
      "searchable_content": "\nInternal Links Test\n\nThis page tests various internal link formats to see what works.\n\nAbsolute Links with Hash Routing\n\nThese should work based on the current implementation:\n- Home Page\n- JavaScript Tips\n- Git Commands\n\nRelative Markdown Links\n\nTesting if these work:\n- Index using relative path\n- Parent directory file\n- Sibling file\n- Nested relative\n\nWithout .md Extension\n\nTesting without extensions:\n- Index without extension\n- JavaScript Tips no extension\n\nFull Path Without Hash\n\nThese probably won't work:\n- Direct path\n- Direct nested\n\nTag Links\n\nTag links use special format:\n- JavaScript Tag\n- Tutorial Tag\n\nHeading Anchors\n\nLinks to sections within current page:\n- Jump to Absolute Links\n- Jump to Tag Links\n\nExternal Links\n\nFor comparison, external links:\n- Google\n- GitHub",
      "code_blocks_count": 0
    },
    {
      "path": "/notes/tutorials/advanced/microservices-architecture.md",
      "context": "tutorials",
      "metadata": {
        "title": "Microservices Architecture Guide",
        "tags": [
          "microservices",
          "architecture",
          "docker",
          "kubernetes",
          "advanced"
        ],
        "created": "2024-02-12",
        "author": "Architecture Team",
        "description": "Comprehensive guide to designing and implementing microservices",
        "updated": "2024-03-10",
        "category": "tutorials",
        "status": "published"
      },
      "content_preview": "Microservices architecture is a design pattern where applications are structured as a collection of loosely coupled, independently deployable services. Each service is responsible for a specific busin...",
      "searchable_content": "\nMicroservices Architecture Guide\n\nIntroduction\n\nMicroservices architecture is a design pattern where applications are structured as a collection of loosely coupled, independently deployable services. Each service is responsible for a specific business capability.\n\nMonolith vs Microservices\n\n| Aspect | Monolith | Microservices |\n|--------|----------|---------------|\n| Deployment | Single unit | Independent services |\n| Scalability | Vertical | Horizontal per service |\n| Technology | Single stack | Polyglot |\n| Team Structure | Centralized | Decentralized |\n| Complexity | Lower initial | Higher operational |\n\nCore Principles\n\n1. Single Responsibility\nEach microservice should handle one business capability.\n\n2. Autonomous Teams\nTeams own their services end-to-end.\n\n3. Decentralized Data\nEach service manages its own data.\n\n4. Smart Endpoints, Dumb Pipes\nCommunication through simple protocols (REST, messaging).\n\n5. Design for Failure\nServices should handle failures gracefully.\n\nArchitecture Patterns\n\nAPI Gateway Pattern\n\ntypescript\n// API Gateway implementation with Express\nimport express from 'express';\nimport httpProxy from 'http-proxy-middleware';\nimport rateLimit from 'express-rate-limit';\nimport jwt from 'jsonwebtoken';\n\nconst app = express();\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15  60  1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\n\napp.use(limiter);\n\n// Authentication middleware\nconst authenticate = (req, res, next) => {\n  const token = req.headers.authorization?.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ error: 'No token provided' });\n  }\n  \n  try {\n    const decoded = jwt.verify(token, process.env.JWTSECRET);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n};\n\n// Service routing\nconst services = {\n  users: 'http://users-service:3001',\n  products: 'http://products-service:3002',\n  orders: 'http://orders-service:3003',\n};\n\nObject.keys(services).forEach(path => {\n  app.use(\n    /${path},\n    authenticate,\n    httpProxy({\n      target: services[path],\n      changeOrigin: true,\n      onError: (err, req, res) => {\n        res.status(503).json({ error: 'Service unavailable' });\n      }\n    })\n  );\n});\n\napp.listen(3000, () => {\n  console.log('API Gateway running on port 3000');\n});\n\n\nService Discovery\n\nyaml\nConsul service registration\nservices:\n  - name: users-service\n    port: 3001\n    tags:\n      - primary\n      - v1\n    check:\n      http: http://localhost:3001/health\n      interval: 10s\n      timeout: 5s\n\n\njavascript\n// Service discovery client\nimport Consul from 'consul';\n\nconst consul = new Consul({\n  host: 'consul',\n  port: 8500,\n});\n\nclass ServiceDiscovery {\n  async getService(serviceName) {\n    try {\n      const services = await consul.health.service(serviceName);\n      \n      if (services.length === 0) {\n        throw new Error(No healthy instances of ${serviceName});\n      }\n      \n      // Load balancing - random selection\n      const randomIndex = Math.floor(Math.random()  services.length);\n      const service = services[randomIndex];\n      \n      return {\n        address: service.Service.Address,\n        port: service.Service.Port,\n      };\n    } catch (error) {\n      console.error(Service discovery error: ${error.message});\n      throw error;\n    }\n  }\n  \n  async registerService(name, port, healthCheckUrl) {\n    const registration = {\n      name,\n      port,\n      check: {\n        http: healthCheckUrl,\n        interval: '10s',\n        timeout: '5s',\n      },\n    };\n    \n    await consul.agent.service.register(registration);\n    \n    // Deregister on shutdown\n    process.on('SIGINT', async () => {\n      await consul.agent.service.deregister(name);\n      process.exit(0);\n    });\n  }\n}\n\nexport default new ServiceDiscovery();\n\n\nEvent-Driven Architecture\n\njavascript\n// Event bus using RabbitMQ\nimport amqp from 'amqplib';\n\nclass EventBus {\n  constructor() {\n    this.connection = null;\n    this.channel = null;\n  }\n  \n  async connect() {\n    this.connection = await amqp.connect('amqp://rabbitmq');\n    this.channel = await this.connection.createChannel();\n  }\n  \n  async publish(event, data) {\n    const exchange = 'events';\n    \n    await this.channel.assertExchange(exchange, 'topic', { durable: true });\n    \n    const message = Buffer.from(JSON.stringify({\n      event,\n      data,\n      timestamp: new Date().toISOString(),\n      correlationId: generateCorrelationId(),\n    }));\n    \n    this.channel.publish(exchange, event, message, { persistent: true });\n    console.log(Published event: ${event});\n  }\n  \n  async subscribe(pattern, handler) {\n    const exchange = 'events';\n    const queue = ${process.env.SERVICENAME}-${pattern};\n    \n    await this.channel.assertExchange(exchange, 'topic', { durable: true });\n    await this.channel.assertQueue(queue, { durable: true });\n    await this.channel.bindQueue(queue, exchange, pattern);\n    \n    this.channel.consume(queue, async (msg) => {\n      if (msg) {\n        const content = JSON.parse(msg.content.toString());\n        \n        try {\n          await handler(content);\n          this.channel.ack(msg);\n        } catch (error) {\n          console.error(Error processing event: ${error.message});\n          // Implement retry logic or dead letter queue\n          this.channel.nack(msg, false, false);\n        }\n      }\n    });\n  }\n}\n\n// Usage example\nconst eventBus = new EventBus();\nawait eventBus.connect();\n\n// Order service publishes event\nawait eventBus.publish('order.created', {\n  orderId: '12345',\n  userId: 'user-123',\n  items: [...],\n  total: 99.99\n});\n\n// Inventory service subscribes\nawait eventBus.subscribe('order.created', async (event) => {\n  console.log('Updating inventory for order:', event.data.orderId);\n  // Update inventory logic\n});\n\n\nCircuit Breaker Pattern\n\njavascript\nclass CircuitBreaker {\n  constructor(options = {}) {\n    this.failureThreshold = options.failureThreshold || 5;\n    this.timeout = options.timeout || 60000; // 1 minute\n    this.resetTimeout = options.resetTimeout || 30000; // 30 seconds\n    \n    this.state = 'CLOSED'; // CLOSED, OPEN, HALFOPEN\n    this.failures = 0;\n    this.nextAttempt = Date.now();\n  }\n  \n  async call(fn, ...args) {\n    if (this.state === 'OPEN') {\n      if (Date.now() < this.nextAttempt) {\n        throw new Error('Circuit breaker is OPEN');\n      }\n      this.state = 'HALFOPEN';\n    }\n    \n    try {\n      const result = await this.execute(fn, ...args);\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n  \n  async execute(fn, ...args) {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error('Request timeout'));\n      }, this.timeout);\n      \n      fn(...args)\n        .then(result => {\n          clearTimeout(timer);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timer);\n          reject(error);\n        });\n    });\n  }\n  \n  onSuccess() {\n    this.failures = 0;\n    if (this.state === 'HALFOPEN') {\n      this.state = 'CLOSED';\n    }\n  }\n  \n  onFailure() {\n    this.failures++;\n    if (this.failures >= this.failureThreshold) {\n      this.state = 'OPEN';\n      this.nextAttempt = Date.now() + this.resetTimeout;\n    }\n  }\n}\n\n// Usage\nconst circuitBreaker = new CircuitBreaker({\n  failureThreshold: 3,\n  timeout: 5000,\n  resetTimeout: 30000\n});\n\nasync function callExternalService() {\n  try {\n    const result = await circuitBreaker.call(\n      fetch,\n      'https://api.external-service.com/data'\n    );\n    return result.json();\n  } catch (error) {\n    console.error('Service call failed:', error.message);\n    // Return cached data or default response\n    return getCachedData();\n  }\n}\n\n\nContainer Orchestration\n\nDocker Compose for Development\n\nyaml\nversion: '3.8'\n\nservices:\n  api-gateway:\n    build: ./api-gateway\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODEENV=development\n      - JWTSECRET=${JWTSECRET}\n    dependson:\n      - users-service\n      - products-service\n      - orders-service\n    networks:\n      - microservices\n\n  users-service:\n    build: ./users-service\n    environment:\n      - DATABASEURL=postgresql://user:pass@users-db:5432/users\n      - RABBITMQURL=amqp://rabbitmq\n    dependson:\n      - users-db\n      - rabbitmq\n    networks:\n      - microservices\n\n  products-service:\n    build: ./products-service\n    environment:\n      - DATABASEURL=postgresql://user:pass@products-db:5432/products\n      - REDISURL=redis://redis:6379\n    dependson:\n      - products-db\n      - redis\n    networks:\n      - microservices\n\n  orders-service:\n    build: ./orders-service\n    environment:\n      - DATABASEURL=postgresql://user:pass@orders-db:5432/orders\n      - RABBITMQURL=amqp://rabbitmq\n    dependson:\n      - orders-db\n      - rabbitmq\n    networks:\n      - microservices\n\n  # Databases\n  users-db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRESDB=users\n      - POSTGRESUSER=user\n      - POSTGRESPASSWORD=pass\n    volumes:\n      - users-data:/var/lib/postgresql/data\n    networks:\n      - microservices\n\n  products-db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRESDB=products\n      - POSTGRESUSER=user\n      - POSTGRESPASSWORD=pass\n    volumes:\n      - products-data:/var/lib/postgresql/data\n    networks:\n      - microservices\n\n  orders-db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRESDB=orders\n      - POSTGRESUSER=user\n      - POSTGRESPASSWORD=pass\n    volumes:\n      - orders-data:/var/lib/postgresql/data\n    networks:\n      - microservices\n\n  # Infrastructure\n  rabbitmq:\n    image: rabbitmq:3-management-alpine\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n    volumes:\n      - rabbitmq-data:/var/lib/rabbitmq\n    networks:\n      - microservices\n\n  redis:\n    image: redis:7-alpine\n    volumes:\n      - redis-data:/data\n    networks:\n      - microservices\n\n  consul:\n    image: consul:latest\n    ports:\n      - \"8500:8500\"\n    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0\n    networks:\n      - microservices\n\nnetworks:\n  microservices:\n    driver: bridge\n\nvolumes:\n  users-data:\n  products-data:\n  orders-data:\n  rabbitmq-data:\n  redis-data:\n\n\nKubernetes Deployment\n\nyaml\nDeployment for users-service\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: users-service\n  labels:\n    app: users-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: users-service\n  template:\n    metadata:\n      labels:\n        app: users-service\n    spec:\n      containers:\n      - name: users-service\n        image: myregistry/users-service:1.0.0\n        ports:\n        - containerPort: 3001\n        env:\n        - name: DATABASEURL\n          valueFrom:\n            secretKeyRef:\n              name: users-db-secret\n              key: connection-string\n        - name: NODEENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3001\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3001\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\nService\napiVersion: v1\nkind: Service\nmetadata:\n  name: users-service\nspec:\n  selector:\n    app: users-service\n  ports:\n    - protocol: TCP\n      port: 3001\n      targetPort: 3001\n  type: ClusterIP\n\n---\nHorizontalPodAutoscaler\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: users-service-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: users-service\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n\n\nMonitoring and Observability\n\nDistributed Tracing\n\njavascript\n// OpenTelemetry setup\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport { ExpressInstrumentation } from '@opentelemetry/instrumentation-express';\n\nconst provider = new NodeTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICENAME]: process.env.SERVICENAME,\n    [SemanticResourceAttributes.SERVICEVERSION]: process.env.SERVICEVERSION,\n  }),\n});\n\nconst jaegerExporter = new JaegerExporter({\n  endpoint: 'http://jaeger:14268/api/traces',\n});\n\nprovider.addSpanProcessor(new BatchSpanProcessor(jaegerExporter));\nprovider.register();\n\nregisterInstrumentations({\n  instrumentations: [\n    new HttpInstrumentation(),\n    new ExpressInstrumentation(),\n  ],\n});\n\n// Custom span\nimport { trace } from '@opentelemetry/api';\n\nconst tracer = trace.getTracer('my-service');\n\nasync function processOrder(orderId) {\n  const span = tracer.startSpan('process-order');\n  span.setAttributes({\n    'order.id': orderId,\n    'order.processing.start': Date.now(),\n  });\n  \n  try {\n    // Process order logic\n    const result = await performOrderProcessing(orderId);\n    span.setStatus({ code: SpanStatusCode.OK });\n    return result;\n  } catch (error) {\n    span.recordException(error);\n    span.setStatus({ code: SpanStatusCode.ERROR, message: error.message });\n    throw error;\n  } finally {\n    span.end();\n  }\n}\n\n\nCentralized Logging\n\njavascript\n// Winston logger with ELK stack\nimport winston from 'winston';\nimport { ElasticsearchTransport } from 'winston-elasticsearch';\n\nconst logger = winston.createLogger({\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: {\n    service: process.env.SERVICENAME,\n    version: process.env.SERVICEVERSION,\n  },\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.simple(),\n    }),\n    new ElasticsearchTransport({\n      level: 'info',\n      clientOpts: { node: 'http://elasticsearch:9200' },\n      index: 'microservices-logs',\n    }),\n  ],\n});\n\n// Correlation ID middleware\nexport const correlationMiddleware = (req, res, next) => {\n  req.correlationId = req.headers['x-correlation-id'] || generateId();\n  res.setHeader('x-correlation-id', req.correlationId);\n  \n  // Add correlation ID to logger\n  req.logger = logger.child({ correlationId: req.correlationId });\n  \n  next();\n};\n\n// Usage\napp.use(correlationMiddleware);\n\napp.post('/orders', async (req, res) => {\n  req.logger.info('Creating new order', { body: req.body });\n  \n  try {\n    const order = await createOrder(req.body);\n    req.logger.info('Order created successfully', { orderId: order.id });\n    res.json(order);\n  } catch (error) {\n    req.logger.error('Failed to create order', { error: error.message });\n    res.status(500).json({ error: 'Order creation failed' });\n  }\n});\n\n\nBest Practices\n\n1. Service Design\n- Keep services small and focused\n- Design around business capabilities\n- Ensure loose coupling\n- Version your APIs\n\n2. Data Management\n- Database per service\n- Eventual consistency\n- Saga pattern for distributed transactions\n- CQRS for complex queries\n\n3. Security\n- Service-to-service authentication (mTLS)\n- API Gateway for external access\n- Secrets management\n- Regular security audits\n\n4. Testing\n- Unit tests per service\n- Integration tests\n- Contract testing\n- End-to-end tests\n- Chaos engineering\n\n5. Deployment\n- CI/CD pipelines\n- Blue-green deployments\n- Canary releases\n- Feature flags\n- Rollback strategies\n\nCommon Pitfalls\n\n1. Starting too big - Begin with a modular monolith\n2. Ignoring data consistency - Plan for eventual consistency\n3. Insufficient monitoring - Implement comprehensive observability\n4. Network latency - Minimize inter-service calls\n5. Lack of standards - Establish clear conventions\n\nConclusion\n\nMicroservices architecture offers flexibility and scalability but comes with complexity. Success requires careful planning, robust infrastructure, and strong operational practices. // API Gateway implementation with Express\nimport express from 'express';\nimport httpProxy from 'http-proxy-middleware';\nimport rateLimit from 'express-rate-limit';\nimport jwt from 'jsonwebtoken';\n\nconst app = express();\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\n\napp.use(limiter);\n\n// Authentication middleware\nconst authenticate = (req, res, next) => {\n  const token = req.headers.authorization?.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ error: 'No token provided' });\n  }\n  \n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n};\n\n// Service routing\nconst services = {\n  users: 'http://users-service:3001',\n  products: 'http://products-service:3002',\n  orders: 'http://orders-service:3003',\n};\n\nObject.keys(services).forEach(path => {\n  app.use(\n    `/${path}`,\n    authenticate,\n    httpProxy({\n      target: services[path],\n      changeOrigin: true,\n      onError: (err, req, res) => {\n        res.status(503).json({ error: 'Service unavailable' });\n      }\n    })\n  );\n});\n\napp.listen(3000, () => {\n  console.log('API Gateway running on port 3000');\n}); # Consul service registration\nservices:\n  - name: users-service\n    port: 3001\n    tags:\n      - primary\n      - v1\n    check:\n      http: http://localhost:3001/health\n      interval: 10s\n      timeout: 5s // Service discovery client\nimport Consul from 'consul';\n\nconst consul = new Consul({\n  host: 'consul',\n  port: 8500,\n});\n\nclass ServiceDiscovery {\n  async getService(serviceName) {\n    try {\n      const services = await consul.health.service(serviceName);\n      \n      if (services.length === 0) {\n        throw new Error(`No healthy instances of ${serviceName}`);\n      }\n      \n      // Load balancing - random selection\n      const randomIndex = Math.floor(Math.random() * services.length);\n      const service = services[randomIndex];\n      \n      return {\n        address: service.Service.Address,\n        port: service.Service.Port,\n      };\n    } catch (error) {\n      console.error(`Service discovery error: ${error.message}`);\n      throw error;\n    }\n  }\n  \n  async registerService(name, port, healthCheckUrl) {\n    const registration = {\n      name,\n      port,\n      check: {\n        http: healthCheckUrl,\n        interval: '10s',\n        timeout: '5s',\n      },\n    };\n    \n    await consul.agent.service.register(registration);\n    \n    // Deregister on shutdown\n    process.on('SIGINT', async () => {\n      await consul.agent.service.deregister(name);\n      process.exit(0);\n    });\n  }\n}\n\nexport default new ServiceDiscovery(); // Event bus using RabbitMQ\nimport amqp from 'amqplib';\n\nclass EventBus {\n  constructor() {\n    this.connection = null;\n    this.channel = null;\n  }\n  \n  async connect() {\n    this.connection = await amqp.connect('amqp://rabbitmq');\n    this.channel = await this.connection.createChannel();\n  }\n  \n  async publish(event, data) {\n    const exchange = 'events';\n    \n    await this.channel.assertExchange(exchange, 'topic', { durable: true });\n    \n    const message = Buffer.from(JSON.stringify({\n      event,\n      data,\n      timestamp: new Date().toISOString(),\n      correlationId: generateCorrelationId(),\n    }));\n    \n    this.channel.publish(exchange, event, message, { persistent: true });\n    console.log(`Published event: ${event}`);\n  }\n  \n  async subscribe(pattern, handler) {\n    const exchange = 'events';\n    const queue = `${process.env.SERVICE_NAME}-${pattern}`;\n    \n    await this.channel.assertExchange(exchange, 'topic', { durable: true });\n    await this.channel.assertQueue(queue, { durable: true });\n    await this.channel.bindQueue(queue, exchange, pattern);\n    \n    this.channel.consume(queue, async (msg) => {\n      if (msg) {\n        const content = JSON.parse(msg.content.toString());\n        \n        try {\n          await handler(content);\n          this.channel.ack(msg);\n        } catch (error) {\n          console.error(`Error processing event: ${error.message}`);\n          // Implement retry logic or dead letter queue\n          this.channel.nack(msg, false, false);\n        }\n      }\n    });\n  }\n}\n\n// Usage example\nconst eventBus = new EventBus();\nawait eventBus.connect();\n\n// Order service publishes event\nawait eventBus.publish('order.created', {\n  orderId: '12345',\n  userId: 'user-123',\n  items: [...],\n  total: 99.99\n});\n\n// Inventory service subscribes\nawait eventBus.subscribe('order.created', async (event) => {\n  console.log('Updating inventory for order:', event.data.orderId);\n  // Update inventory logic\n}); class CircuitBreaker {\n  constructor(options = {}) {\n    this.failureThreshold = options.failureThreshold || 5;\n    this.timeout = options.timeout || 60000; // 1 minute\n    this.resetTimeout = options.resetTimeout || 30000; // 30 seconds\n    \n    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN\n    this.failures = 0;\n    this.nextAttempt = Date.now();\n  }\n  \n  async call(fn, ...args) {\n    if (this.state === 'OPEN') {\n      if (Date.now() < this.nextAttempt) {\n        throw new Error('Circuit breaker is OPEN');\n      }\n      this.state = 'HALF_OPEN';\n    }\n    \n    try {\n      const result = await this.execute(fn, ...args);\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n  \n  async execute(fn, ...args) {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error('Request timeout'));\n      }, this.timeout);\n      \n      fn(...args)\n        .then(result => {\n          clearTimeout(timer);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timer);\n          reject(error);\n        });\n    });\n  }\n  \n  onSuccess() {\n    this.failures = 0;\n    if (this.state === 'HALF_OPEN') {\n      this.state = 'CLOSED';\n    }\n  }\n  \n  onFailure() {\n    this.failures++;\n    if (this.failures >= this.failureThreshold) {\n      this.state = 'OPEN';\n      this.nextAttempt = Date.now() + this.resetTimeout;\n    }\n  }\n}\n\n// Usage\nconst circuitBreaker = new CircuitBreaker({\n  failureThreshold: 3,\n  timeout: 5000,\n  resetTimeout: 30000\n});\n\nasync function callExternalService() {\n  try {\n    const result = await circuitBreaker.call(\n      fetch,\n      'https://api.external-service.com/data'\n    );\n    return result.json();\n  } catch (error) {\n    console.error('Service call failed:', error.message);\n    // Return cached data or default response\n    return getCachedData();\n  }\n} version: '3.8'\n\nservices:\n  api-gateway:\n    build: ./api-gateway\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=development\n      - JWT_SECRET=${JWT_SECRET}\n    depends_on:\n      - users-service\n      - products-service\n      - orders-service\n    networks:\n      - microservices\n\n  users-service:\n    build: ./users-service\n    environment:\n      - DATABASE_URL=postgresql://user:pass@users-db:5432/users\n      - RABBITMQ_URL=amqp://rabbitmq\n    depends_on:\n      - users-db\n      - rabbitmq\n    networks:\n      - microservices\n\n  products-service:\n    build: ./products-service\n    environment:\n      - DATABASE_URL=postgresql://user:pass@products-db:5432/products\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - products-db\n      - redis\n    networks:\n      - microservices\n\n  orders-service:\n    build: ./orders-service\n    environment:\n      - DATABASE_URL=postgresql://user:pass@orders-db:5432/orders\n      - RABBITMQ_URL=amqp://rabbitmq\n    depends_on:\n      - orders-db\n      - rabbitmq\n    networks:\n      - microservices\n\n  # Databases\n  users-db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRES_DB=users\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n    volumes:\n      - users-data:/var/lib/postgresql/data\n    networks:\n      - microservices\n\n  products-db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRES_DB=products\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n    volumes:\n      - products-data:/var/lib/postgresql/data\n    networks:\n      - microservices\n\n  orders-db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRES_DB=orders\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n    volumes:\n      - orders-data:/var/lib/postgresql/data\n    networks:\n      - microservices\n\n  # Infrastructure\n  rabbitmq:\n    image: rabbitmq:3-management-alpine\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n    volumes:\n      - rabbitmq-data:/var/lib/rabbitmq\n    networks:\n      - microservices\n\n  redis:\n    image: redis:7-alpine\n    volumes:\n      - redis-data:/data\n    networks:\n      - microservices\n\n  consul:\n    image: consul:latest\n    ports:\n      - \"8500:8500\"\n    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0\n    networks:\n      - microservices\n\nnetworks:\n  microservices:\n    driver: bridge\n\nvolumes:\n  users-data:\n  products-data:\n  orders-data:\n  rabbitmq-data:\n  redis-data: # Deployment for users-service\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: users-service\n  labels:\n    app: users-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: users-service\n  template:\n    metadata:\n      labels:\n        app: users-service\n    spec:\n      containers:\n      - name: users-service\n        image: myregistry/users-service:1.0.0\n        ports:\n        - containerPort: 3001\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: users-db-secret\n              key: connection-string\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3001\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3001\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n# Service\napiVersion: v1\nkind: Service\nmetadata:\n  name: users-service\nspec:\n  selector:\n    app: users-service\n  ports:\n    - protocol: TCP\n      port: 3001\n      targetPort: 3001\n  type: ClusterIP\n\n---\n# HorizontalPodAutoscaler\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: users-service-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: users-service\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80 // OpenTelemetry setup\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport { ExpressInstrumentation } from '@opentelemetry/instrumentation-express';\n\nconst provider = new NodeTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: process.env.SERVICE_NAME,\n    [SemanticResourceAttributes.SERVICE_VERSION]: process.env.SERVICE_VERSION,\n  }),\n});\n\nconst jaegerExporter = new JaegerExporter({\n  endpoint: 'http://jaeger:14268/api/traces',\n});\n\nprovider.addSpanProcessor(new BatchSpanProcessor(jaegerExporter));\nprovider.register();\n\nregisterInstrumentations({\n  instrumentations: [\n    new HttpInstrumentation(),\n    new ExpressInstrumentation(),\n  ],\n});\n\n// Custom span\nimport { trace } from '@opentelemetry/api';\n\nconst tracer = trace.getTracer('my-service');\n\nasync function processOrder(orderId) {\n  const span = tracer.startSpan('process-order');\n  span.setAttributes({\n    'order.id': orderId,\n    'order.processing.start': Date.now(),\n  });\n  \n  try {\n    // Process order logic\n    const result = await performOrderProcessing(orderId);\n    span.setStatus({ code: SpanStatusCode.OK });\n    return result;\n  } catch (error) {\n    span.recordException(error);\n    span.setStatus({ code: SpanStatusCode.ERROR, message: error.message });\n    throw error;\n  } finally {\n    span.end();\n  }\n} // Winston logger with ELK stack\nimport winston from 'winston';\nimport { ElasticsearchTransport } from 'winston-elasticsearch';\n\nconst logger = winston.createLogger({\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: {\n    service: process.env.SERVICE_NAME,\n    version: process.env.SERVICE_VERSION,\n  },\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.simple(),\n    }),\n    new ElasticsearchTransport({\n      level: 'info',\n      clientOpts: { node: 'http://elasticsearch:9200' },\n      index: 'microservices-logs',\n    }),\n  ],\n});\n\n// Correlation ID middleware\nexport const correlationMiddleware = (req, res, next) => {\n  req.correlationId = req.headers['x-correlation-id'] || generateId();\n  res.setHeader('x-correlation-id', req.correlationId);\n  \n  // Add correlation ID to logger\n  req.logger = logger.child({ correlationId: req.correlationId });\n  \n  next();\n};\n\n// Usage\napp.use(correlationMiddleware);\n\napp.post('/orders', async (req, res) => {\n  req.logger.info('Creating new order', { body: req.body });\n  \n  try {\n    const order = await createOrder(req.body);\n    req.logger.info('Order created successfully', { orderId: order.id });\n    res.json(order);\n  } catch (error) {\n    req.logger.error('Failed to create order', { error: error.message });\n    res.status(500).json({ error: 'Order creation failed' });\n  }\n});",
      "code_blocks_count": 9
    },
    {
      "path": "/notes/reference/cheatsheets/regex-patterns.md",
      "context": "reference",
      "metadata": {
        "title": "Regular Expression Patterns",
        "tags": [
          "regex",
          "patterns",
          "reference",
          "cheatsheet"
        ],
        "created": "2024-02-10",
        "author": "Dev Team",
        "description": "Common regex patterns and examples for various use cases",
        "updated": "2024-03-01",
        "category": "reference",
        "status": "published"
      },
      "content_preview": "regex\n.       # Any character except newline\n\\d      # Digit (0-9)\n\\D      # Not a digit\n\\w      # Word character (a-z, A-Z, 0-9, )\n\\W      # Not a word character\n\\s      # Whitespace (space, tab, new...",
      "searchable_content": "\nRegular Expression Patterns\n\nBasic Syntax\n\nCharacter Classes\nregex\n.       # Any character except newline\n\\d      # Digit (0-9)\n\\D      # Not a digit\n\\w      # Word character (a-z, A-Z, 0-9, )\n\\W      # Not a word character\n\\s      # Whitespace (space, tab, newline)\n\\S      # Not whitespace\n[abc]   # Any of a, b, or c\n[^abc]  # Not a, b, or c\n[a-z]   # Character between a and z\n[a-zA-Z] # a-z or A-Z\n\n\nQuantifiers\nregex\n       # 0 or more\n+       # 1 or more\n?       # 0 or 1\n{3}     # Exactly 3\n{3,}    # 3 or more\n{3,5}   # 3, 4, or 5\n\n\nPositions\nregex\n^       # Start of string\n$       # End of string\n\\b      # Word boundary\n\\B      # Not word boundary\n\\A      # Start of string (not line)\n\\Z      # End of string (not line)\n\n\nCommon Patterns\n\nEmail Validation\nregex\nBasic email pattern\n^[a-zA-Z0-9.%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n\nMore comprehensive\n^[a-zA-Z0-9.!#$%&'+/=?^{|}-]+@a-zA-Z0-9?(?:\\.a-zA-Z0-9?)$\n\nExamples:\n\u2713 user@example.com\n\u2713 john.doe+filter@company.co.uk\n\u2717 invalid@.com\n\u2717 @example.com\n\n\nURL Validation\nregex\nBasic URL\n^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%.\\+#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%\\+.#?&//=])$\n\nWith optional protocol\n^(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%.\\+#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%\\+.#?&//=])$\n\nExamples:\n\u2713 https://www.example.com\n\u2713 http://subdomain.example.com/path?query=1\n\u2713 www.example.com\n\u2717 htp://wrong-protocol.com\n\n\nPhone Numbers\nregex\nUS Phone Number\n^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$\n\nInternational format\n^\\+?[1-9]\\d{1,14}$\n\nExamples:\n\u2713 (555) 123-4567\n\u2713 555-123-4567\n\u2713 555.123.4567\n\u2713 5551234567\n\u2713 +1 555 123 4567\n\n\nPassword Validation\nregex\nAt least 8 chars, 1 uppercase, 1 lowercase, 1 number\n^(?=.[a-z])(?=.[A-Z])(?=.\\d)[a-zA-Z\\d\\w\\W]{8,}$\n\nWith special character requirement\n^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$\n\nExamples:\n\u2713 Password123\n\u2713 Str0ng@Pass\n\u2717 weak\n\u2717 NoNumbers!\n\n\nData Extraction\n\nIPv4 Address\nregex\n^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$\n\nCapture groups\n^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\n\nExamples:\n\u2713 192.168.1.1\n\u2713 10.0.0.255\n\u2717 256.1.1.1\n\u2717 192.168.1\n\n\nCredit Card Numbers\nregex\nVisa\n^4[0-9]{12}(?:[0-9]{3})?$\n\nMastercard\n^5[1-5][0-9]{14}$\n\nAmerican Express\n^3[47][0-9]{13}$\n\nGeneral (with optional spaces/dashes)\n^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13})$\n\n\nDate Formats\nregex\nYYYY-MM-DD\n^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$\n\nDD/MM/YYYY or DD-MM-YYYY\n^(0[1-9]|[12]\\d|3[01])/-[/-]\\d{4}$\n\nMM/DD/YYYY\n^(0[1-9]|1[0-2])/-[/-]\\d{4}$\n\nExamples:\n\u2713 2024-03-15\n\u2713 15/03/2024\n\u2713 03-15-2024\n\n\nText Processing\n\nHTML Tags\nregex\nMatch any HTML tag\n<([a-z]+)([^<]+)(?:>(.)<\\/\\1>|\\s+\\/>)\n\nMatch specific tag content\n<div[^>]>(.?)</div>\n\nRemove all HTML tags\n<[^>]>\n\nExamples:\n\u2713 <div class=\"container\">Content</div>\n\u2713 <img src=\"image.jpg\" />\n\u2713 <p>Paragraph</p>\n\n\nWhitespace Cleanup\nregex\nMultiple spaces to single space\n\\s+\n\nTrim leading/trailing whitespace\n^\\s+|\\s+$\n\nRemove blank lines\n^\\s$\\n\n\nNormalize line endings\n\\r\\n|\\r|\\n\n\n\nProgramming Patterns\n\nVariable Names\nregex\nJavaScript/Python variable\n^[a-zA-Z$][a-zA-Z0-9$]$\n\nCamel case\n^[a-z]+(?:[A-Z][a-z]+)$\n\nSnake case\n^[a-z]+(?:[a-z]+)$\n\nConstant (UPPERSNAKECASE)\n^[A-Z]+(?:[A-Z]+)$\n\n\nFunction Extraction\nregex\nJavaScript function\nfunction\\s+([a-zA-Z$][a-zA-Z0-9$])\\s\\([^)]\\)\\s\\{\n\nPython function\ndef\\s+([a-zA-Z][a-zA-Z0-9])\\s\\([^)]\\)\\s:\n\nClass methods\n(public|private|protected)?\\sfunction\\s+([a-zA-Z][a-zA-Z0-9])\\s\\([^)]\\)\n\n\nLookarounds\n\nPositive Lookahead\nregex\nPassword with at least one digit\n^(?=.\\d).+$\n\nMatch 'test' only if followed by 'ing'\ntest(?=ing)\n\n\nNegative Lookahead\nregex\nMatch 'test' not followed by 'ing'\ntest(?!ing)\n\nLines not containing 'error'\n^((?!error).)$\n\n\nLookbehind\nregex\nPositive lookbehind - match 'world' preceded by 'hello '\n(?<=hello )world\n\nNegative lookbehind - match 'world' not preceded by 'hello '\n(?<!hello )world\n\n\nPractical Examples\n\nLog File Parsing\nregex\nApache access log\n^(\\S+) \\S+ \\S+ \\[([^\\]]+)\\] \"([^\"]+)\" (\\d{3}) (\\d+|-) \"([^\"])\" \"([^\"])\"\n\nError log timestamp\n^\\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\]\n\nLog level extraction\n\\[(ERROR|WARN|INFO|DEBUG)\\]\n\n\nCSV Parsing\nregex\nBasic CSV\n(?:^|,)(\"(?:[^\"]|\"\")\"|[^,])\n\nWith quoted fields\n\"([^\"](?:\"\"[^\"]))\"|([^,]+)\n\nSplit on comma but not in quotes\n,(?=(?:[^\"]\"[^\"]\")[^\"]$)\n\n\nMarkdown Patterns\nregex\nHeaders\n^#{1,6}\\s+(.+)$\n\nLinks\n\\[([^\\]]+)\\]\\(([^)]+)\\)\n\nBold text\n\\\\([^]+)\\\\|([^]+)\n\nCode blocks\n(\\w+)?\\n([\\s\\S]?)\n\n\nPerformance Tips\n\n1. Be specific: Use [0-9] instead of \\d when you only need digits\n2. Avoid backtracking: Use possessive quantifiers when possible\n3. Anchor when possible: Use ^ and $ to limit search scope\n4. Order alternations: Put most likely matches first\n5. Use non-capturing groups: (?:...) when you don't need the capture\n\nTesting Resources\n\n- regex101.com - Test with explanations\n- regexr.com - Visual regex tester\n- regexpal.com - Simple tester .       # Any character except newline\n\\d      # Digit (0-9)\n\\D      # Not a digit\n\\w      # Word character (a-z, A-Z, 0-9, _)\n\\W      # Not a word character\n\\s      # Whitespace (space, tab, newline)\n\\S      # Not whitespace\n[abc]   # Any of a, b, or c\n[^abc]  # Not a, b, or c\n[a-z]   # Character between a and z\n[a-zA-Z] # a-z or A-Z *       # 0 or more\n+       # 1 or more\n?       # 0 or 1\n{3}     # Exactly 3\n{3,}    # 3 or more\n{3,5}   # 3, 4, or 5 ^       # Start of string\n$       # End of string\n\\b      # Word boundary\n\\B      # Not word boundary\n\\A      # Start of string (not line)\n\\Z      # End of string (not line) # Basic email pattern\n^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n\n# More comprehensive\n^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\n\n# Examples:\n# \u2713 user@example.com\n# \u2713 john.doe+filter@company.co.uk\n# \u2717 invalid@.com\n# \u2717 @example.com # Basic URL\n^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$\n\n# With optional protocol\n^(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$\n\n# Examples:\n# \u2713 https://www.example.com\n# \u2713 http://subdomain.example.com/path?query=1\n# \u2713 www.example.com\n# \u2717 htp://wrong-protocol.com # US Phone Number\n^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$\n\n# International format\n^\\+?[1-9]\\d{1,14}$\n\n# Examples:\n# \u2713 (555) 123-4567\n# \u2713 555-123-4567\n# \u2713 555.123.4567\n# \u2713 5551234567\n# \u2713 +1 555 123 4567 # At least 8 chars, 1 uppercase, 1 lowercase, 1 number\n^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d\\w\\W]{8,}$\n\n# With special character requirement\n^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$\n\n# Examples:\n# \u2713 Password123\n# \u2713 Str0ng@Pass\n# \u2717 weak\n# \u2717 NoNumbers! ^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$\n\n# Capture groups\n^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\n\n# Examples:\n# \u2713 192.168.1.1\n# \u2713 10.0.0.255\n# \u2717 256.1.1.1\n# \u2717 192.168.1 # Visa\n^4[0-9]{12}(?:[0-9]{3})?$\n\n# Mastercard\n^5[1-5][0-9]{14}$\n\n# American Express\n^3[47][0-9]{13}$\n\n# General (with optional spaces/dashes)\n^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13})$ # YYYY-MM-DD\n^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$\n\n# DD/MM/YYYY or DD-MM-YYYY\n^(0[1-9]|[12]\\d|3[01])[/-](0[1-9]|1[0-2])[/-]\\d{4}$\n\n# MM/DD/YYYY\n^(0[1-9]|1[0-2])[/-](0[1-9]|[12]\\d|3[01])[/-]\\d{4}$\n\n# Examples:\n# \u2713 2024-03-15\n# \u2713 15/03/2024\n# \u2713 03-15-2024 # Match any HTML tag\n<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)\n\n# Match specific tag content\n<div[^>]*>(.*?)</div>\n\n# Remove all HTML tags\n<[^>]*>\n\n# Examples:\n# \u2713 <div class=\"container\">Content</div>\n# \u2713 <img src=\"image.jpg\" />\n# \u2713 <p>Paragraph</p> # Multiple spaces to single space\n\\s+\n\n# Trim leading/trailing whitespace\n^\\s+|\\s+$\n\n# Remove blank lines\n^\\s*$\\n\n\n# Normalize line endings\n\\r\\n|\\r|\\n # JavaScript/Python variable\n^[a-zA-Z_$][a-zA-Z0-9_$]*$\n\n# Camel case\n^[a-z]+(?:[A-Z][a-z]+)*$\n\n# Snake case\n^[a-z]+(?:_[a-z]+)*$\n\n# Constant (UPPER_SNAKE_CASE)\n^[A-Z]+(?:_[A-Z]+)*$ # JavaScript function\nfunction\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\([^)]*\\)\\s*\\{\n\n# Python function\ndef\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\([^)]*\\)\\s*:\n\n# Class methods\n(public|private|protected)?\\s*function\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\([^)]*\\) # Password with at least one digit\n^(?=.*\\d).+$\n\n# Match 'test' only if followed by 'ing'\ntest(?=ing) # Match 'test' not followed by 'ing'\ntest(?!ing)\n\n# Lines not containing 'error'\n^((?!error).)*$ # Positive lookbehind - match 'world' preceded by 'hello '\n(?<=hello )world\n\n# Negative lookbehind - match 'world' not preceded by 'hello '\n(?<!hello )world # Apache access log\n^(\\S+) \\S+ \\S+ \\[([^\\]]+)\\] \"([^\"]+)\" (\\d{3}) (\\d+|-) \"([^\"]*)\" \"([^\"]*)\"\n\n# Error log timestamp\n^\\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\]\n\n# Log level extraction\n\\[(ERROR|WARN|INFO|DEBUG)\\] # Basic CSV\n(?:^|,)(\"(?:[^\"]|\"\")*\"|[^,]*)\n\n# With quoted fields\n\"([^\"]*(?:\"\"[^\"]*)*)\"|([^,]+)\n\n# Split on comma but not in quotes\n,(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$) # Headers\n^#{1,6}\\s+(.+)$\n\n# Links\n\\[([^\\]]+)\\]\\(([^)]+)\\)\n\n# Bold text\n\\*\\*([^*]+)\\*\\*|__([^_]+)__\n\n# Code blocks ",
      "code_blocks_count": 21
    },
    {
      "path": "/notes/projects/todo-app.md",
      "context": "projects",
      "metadata": {
        "title": "Todo App Project",
        "tags": [
          "projects",
          "web-development",
          "react",
          "typescript"
        ],
        "created": "2024-02-05",
        "author": "Project Team",
        "description": "Full-stack todo application with React and Node.js",
        "updated": "2024-03-02",
        "category": "projects",
        "status": "published"
      },
      "content_preview": "Building a modern, full-stack todo application with the following features:\n- User authentication\n- Real-time updates\n- Drag-and-drop functionality\n- Tags and categories\n- Due dates and reminders\n\n\n\nF...",
      "searchable_content": "\nTodo App Project\n\nProject Overview\n\nBuilding a modern, full-stack todo application with the following features:\n- User authentication\n- Real-time updates\n- Drag-and-drop functionality\n- Tags and categories\n- Due dates and reminders\n\nTech Stack\n\nFrontend:\n- React 18\n- TypeScript\n- Tailwind CSS\n- React Query\n- Zustand (state management)\n\nBackend:\n- Node.js with Express\n- PostgreSQL\n- Prisma ORM\n- JWT authentication\n- Socket.io\n\nProject Structure\n\n\ntodo-app/\n\u251c\u2500\u2500 client/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 store/\n\u2502   \u2502   \u2514\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 server/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u251c\u2500\u2500 middleware/\n\u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u2514\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 docker-compose.yml\n\n\nDatabase Schema\n\nsql\n-- Users table\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT genrandomuuid(),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    passwordhash VARCHAR(255) NOT NULL,\n    name VARCHAR(255),\n    createdat TIMESTAMP DEFAULT CURRENTTIMESTAMP,\n    updatedat TIMESTAMP DEFAULT CURRENTTIMESTAMP\n);\n\n-- Todos table\nCREATE TABLE todos (\n    id UUID PRIMARY KEY DEFAULT genrandomuuid(),\n    userid UUID REFERENCES users(id) ON DELETE CASCADE,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    completed BOOLEAN DEFAULT FALSE,\n    duedate TIMESTAMP,\n    priority INTEGER DEFAULT 0,\n    createdat TIMESTAMP DEFAULT CURRENTTIMESTAMP,\n    updatedat TIMESTAMP DEFAULT CURRENTTIMESTAMP\n);\n\n-- Tags table\nCREATE TABLE tags (\n    id UUID PRIMARY KEY DEFAULT genrandomuuid(),\n    name VARCHAR(50) NOT NULL,\n    color VARCHAR(7),\n    userid UUID REFERENCES users(id) ON DELETE CASCADE,\n    UNIQUE(name, userid)\n);\n\n-- Todo-Tags junction table\nCREATE TABLE todotags (\n    todoid UUID REFERENCES todos(id) ON DELETE CASCADE,\n    tagid UUID REFERENCES tags(id) ON DELETE CASCADE,\n    PRIMARY KEY (todoid, tagid)\n);\n\n\nAPI Endpoints\n\nAuthentication\ntypescript\nPOST   /api/auth/register    // Register new user\nPOST   /api/auth/login       // Login user\nPOST   /api/auth/refresh     // Refresh token\nPOST   /api/auth/logout      // Logout user\n\n\nTodos\ntypescript\nGET    /api/todos           // Get all todos\nPOST   /api/todos           // Create new todo\nGET    /api/todos/:id       // Get single todo\nPUT    /api/todos/:id       // Update todo\nDELETE /api/todos/:id       // Delete todo\nPATCH  /api/todos/:id/toggle // Toggle completion\n\n\nTags\ntypescript\nGET    /api/tags            // Get all tags\nPOST   /api/tags            // Create new tag\nPUT    /api/tags/:id        // Update tag\nDELETE /api/tags/:id        // Delete tag\n\n\nFrontend Components\n\nTodoItem Component\ntsx\nimport React from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Todo } from '../types';\n\ninterface TodoItemProps {\n  todo: Todo;\n  onToggle: (id: string) => void;\n  onDelete: (id: string) => void;\n}\n\nexport const TodoItem: React.FC<TodoItemProps> = ({ todo, onToggle, onDelete }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n  } = useSortable({ id: todo.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className={p-4 bg-white rounded-lg shadow-md ${\n        todo.completed ? 'opacity-60' : ''\n      }}\n    >\n      <div className=\"flex items-center gap-3\">\n        <div {...attributes} {...listeners} className=\"cursor-move\">\n          <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\">\n            {/ Drag handle icon /}\n          </svg>\n        </div>\n        \n        <input\n          type=\"checkbox\"\n          checked={todo.completed}\n          onChange={() => onToggle(todo.id)}\n          className=\"w-5 h-5\"\n        />\n        \n        <div className=\"flex-1\">\n          <h3 className={font-medium ${todo.completed ? 'line-through' : ''}}>\n            {todo.title}\n          </h3>\n          {todo.description && (\n            <p className=\"text-sm text-gray-600\">{todo.description}</p>\n          )}\n          <div className=\"flex gap-2 mt-2\">\n            {todo.tags.map(tag => (\n              <span\n                key={tag.id}\n                className=\"px-2 py-1 text-xs rounded-full\"\n                style={{ backgroundColor: tag.color }}\n              >\n                {tag.name}\n              </span>\n            ))}\n          </div>\n        </div>\n        \n        <button\n          onClick={() => onDelete(todo.id)}\n          className=\"text-red-500 hover:text-red-700\"\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\n\nCustom Hook - useTodos\ntypescript\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { todoService } from '../services/todoService';\n\nexport const useTodos = () => {\n  const queryClient = useQueryClient();\n\n  const { data: todos, isLoading } = useQuery({\n    queryKey: ['todos'],\n    queryFn: todoService.getAll,\n  });\n\n  const createTodo = useMutation({\n    mutationFn: todoService.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] });\n    },\n  });\n\n  const updateTodo = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Todo> }) =>\n      todoService.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] });\n    },\n  });\n\n  const deleteTodo = useMutation({\n    mutationFn: todoService.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] });\n    },\n  });\n\n  return {\n    todos: todos || [],\n    isLoading,\n    createTodo: createTodo.mutate,\n    updateTodo: updateTodo.mutate,\n    deleteTodo: deleteTodo.mutate,\n  };\n};\n\n\nBackend Implementation\n\nTodo Controller\ntypescript\nimport { Request, Response } from 'express';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport const todoController = {\n  async getAll(req: Request, res: Response) {\n    try {\n      const todos = await prisma.todo.findMany({\n        where: { userId: req.user.id },\n        include: { tags: true },\n        orderBy: { createdAt: 'desc' },\n      });\n      res.json(todos);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch todos' });\n    }\n  },\n\n  async create(req: Request, res: Response) {\n    try {\n      const { title, description, dueDate, tagIds } = req.body;\n      \n      const todo = await prisma.todo.create({\n        data: {\n          title,\n          description,\n          dueDate,\n          userId: req.user.id,\n          tags: {\n            connect: tagIds?.map((id: string) => ({ id })) || [],\n          },\n        },\n        include: { tags: true },\n      });\n      \n      // Emit real-time update\n      req.io.to(req.user.id).emit('todo:created', todo);\n      \n      res.status(201).json(todo);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create todo' });\n    }\n  },\n\n  async update(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const { title, description, completed, dueDate, tagIds } = req.body;\n      \n      const todo = await prisma.todo.update({\n        where: { id, userId: req.user.id },\n        data: {\n          title,\n          description,\n          completed,\n          dueDate,\n          tags: tagIds ? {\n            set: tagIds.map((id: string) => ({ id })),\n          } : undefined,\n        },\n        include: { tags: true },\n      });\n      \n      req.io.to(req.user.id).emit('todo:updated', todo);\n      \n      res.json(todo);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update todo' });\n    }\n  },\n};\n\n\nDeployment\n\nDocker Configuration\ndockerfile\nFrontend Dockerfile\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine\nCOPY --from=builder /app/dist /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n\nCI/CD Pipeline\nyaml\nname: Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n      - run: npm ci\n      - run: npm test\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Deploy to server\n        run: |\n          # Deployment script\n\n\nCurrent Status\n\nCompleted \u2705\n- Project setup and configuration\n- Database schema design\n- Basic CRUD operations\n- Authentication system\n- Frontend components\n\nIn Progress \ud83d\udd04\n- Real-time updates with Socket.io\n- Drag-and-drop functionality\n- Email notifications\n\nTodo \ud83d\udccb\n- Mobile app version\n- Offline support\n- Data export functionality\n- Analytics dashboard todo-app/\n\u251c\u2500\u2500 client/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 store/\n\u2502   \u2502   \u2514\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 server/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u251c\u2500\u2500 middleware/\n\u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u2514\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 docker-compose.yml -- Users table\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    name VARCHAR(255),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Todos table\nCREATE TABLE todos (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    completed BOOLEAN DEFAULT FALSE,\n    due_date TIMESTAMP,\n    priority INTEGER DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Tags table\nCREATE TABLE tags (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name VARCHAR(50) NOT NULL,\n    color VARCHAR(7),\n    user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n    UNIQUE(name, user_id)\n);\n\n-- Todo-Tags junction table\nCREATE TABLE todo_tags (\n    todo_id UUID REFERENCES todos(id) ON DELETE CASCADE,\n    tag_id UUID REFERENCES tags(id) ON DELETE CASCADE,\n    PRIMARY KEY (todo_id, tag_id)\n); POST   /api/auth/register    // Register new user\nPOST   /api/auth/login       // Login user\nPOST   /api/auth/refresh     // Refresh token\nPOST   /api/auth/logout      // Logout user GET    /api/todos           // Get all todos\nPOST   /api/todos           // Create new todo\nGET    /api/todos/:id       // Get single todo\nPUT    /api/todos/:id       // Update todo\nDELETE /api/todos/:id       // Delete todo\nPATCH  /api/todos/:id/toggle // Toggle completion GET    /api/tags            // Get all tags\nPOST   /api/tags            // Create new tag\nPUT    /api/tags/:id        // Update tag\nDELETE /api/tags/:id        // Delete tag import React from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Todo } from '../types';\n\ninterface TodoItemProps {\n  todo: Todo;\n  onToggle: (id: string) => void;\n  onDelete: (id: string) => void;\n}\n\nexport const TodoItem: React.FC<TodoItemProps> = ({ todo, onToggle, onDelete }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n  } = useSortable({ id: todo.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className={`p-4 bg-white rounded-lg shadow-md ${\n        todo.completed ? 'opacity-60' : ''\n      }`}\n    >\n      <div className=\"flex items-center gap-3\">\n        <div {...attributes} {...listeners} className=\"cursor-move\">\n          <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\">\n            {/* Drag handle icon */}\n          </svg>\n        </div>\n        \n        <input\n          type=\"checkbox\"\n          checked={todo.completed}\n          onChange={() => onToggle(todo.id)}\n          className=\"w-5 h-5\"\n        />\n        \n        <div className=\"flex-1\">\n          <h3 className={`font-medium ${todo.completed ? 'line-through' : ''}`}>\n            {todo.title}\n          </h3>\n          {todo.description && (\n            <p className=\"text-sm text-gray-600\">{todo.description}</p>\n          )}\n          <div className=\"flex gap-2 mt-2\">\n            {todo.tags.map(tag => (\n              <span\n                key={tag.id}\n                className=\"px-2 py-1 text-xs rounded-full\"\n                style={{ backgroundColor: tag.color }}\n              >\n                {tag.name}\n              </span>\n            ))}\n          </div>\n        </div>\n        \n        <button\n          onClick={() => onDelete(todo.id)}\n          className=\"text-red-500 hover:text-red-700\"\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n}; import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { todoService } from '../services/todoService';\n\nexport const useTodos = () => {\n  const queryClient = useQueryClient();\n\n  const { data: todos, isLoading } = useQuery({\n    queryKey: ['todos'],\n    queryFn: todoService.getAll,\n  });\n\n  const createTodo = useMutation({\n    mutationFn: todoService.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] });\n    },\n  });\n\n  const updateTodo = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Todo> }) =>\n      todoService.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] });\n    },\n  });\n\n  const deleteTodo = useMutation({\n    mutationFn: todoService.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] });\n    },\n  });\n\n  return {\n    todos: todos || [],\n    isLoading,\n    createTodo: createTodo.mutate,\n    updateTodo: updateTodo.mutate,\n    deleteTodo: deleteTodo.mutate,\n  };\n}; import { Request, Response } from 'express';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport const todoController = {\n  async getAll(req: Request, res: Response) {\n    try {\n      const todos = await prisma.todo.findMany({\n        where: { userId: req.user.id },\n        include: { tags: true },\n        orderBy: { createdAt: 'desc' },\n      });\n      res.json(todos);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch todos' });\n    }\n  },\n\n  async create(req: Request, res: Response) {\n    try {\n      const { title, description, dueDate, tagIds } = req.body;\n      \n      const todo = await prisma.todo.create({\n        data: {\n          title,\n          description,\n          dueDate,\n          userId: req.user.id,\n          tags: {\n            connect: tagIds?.map((id: string) => ({ id })) || [],\n          },\n        },\n        include: { tags: true },\n      });\n      \n      // Emit real-time update\n      req.io.to(req.user.id).emit('todo:created', todo);\n      \n      res.status(201).json(todo);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create todo' });\n    }\n  },\n\n  async update(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const { title, description, completed, dueDate, tagIds } = req.body;\n      \n      const todo = await prisma.todo.update({\n        where: { id, userId: req.user.id },\n        data: {\n          title,\n          description,\n          completed,\n          dueDate,\n          tags: tagIds ? {\n            set: tagIds.map((id: string) => ({ id })),\n          } : undefined,\n        },\n        include: { tags: true },\n      });\n      \n      req.io.to(req.user.id).emit('todo:updated', todo);\n      \n      res.json(todo);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update todo' });\n    }\n  },\n}; # Frontend Dockerfile\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine\nCOPY --from=builder /app/dist /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/nginx.conf name: Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n      - run: npm ci\n      - run: npm test\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Deploy to server\n        run: |\n          # Deployment script",
      "code_blocks_count": 10
    },
    {
      "path": "/notes/personal/recipes.md",
      "context": "personal",
      "metadata": {
        "title": "Favorite Recipes",
        "tags": [
          "personal",
          "cooking",
          "recipes",
          "food"
        ],
        "created": "2024-02-01",
        "author": "Sarah Johnson",
        "description": "Collection of my favorite recipes and cooking tips",
        "updated": "2024-02-25",
        "category": "personal",
        "status": "published"
      },
      "content_preview": "Ingredients:\n- 2 cups mixed vegetables (broccoli, bell peppers, snap peas)\n- 1 cup protein (tofu, chicken, or shrimp)\n- 2 tbsp soy sauce\n- 1 tbsp sesame oil\n- 2 cloves garlic, minced\n- 1 tsp ginger, g...",
      "searchable_content": "\nFavorite Recipes\n\nQuick & Healthy\n\n15-Minute Stir-Fry \ud83e\udd58\n\nIngredients:\n- 2 cups mixed vegetables (broccoli, bell peppers, snap peas)\n- 1 cup protein (tofu, chicken, or shrimp)\n- 2 tbsp soy sauce\n- 1 tbsp sesame oil\n- 2 cloves garlic, minced\n- 1 tsp ginger, grated\n\nInstructions:\n1. Heat sesame oil in a wok or large pan\n2. Add garlic and ginger, cook for 30 seconds\n3. Add protein, cook until done\n4. Add vegetables, stir-fry for 5-7 minutes\n5. Add soy sauce, toss to combine\n6. Serve over rice or noodles\n\nPro tip: Prep vegetables ahead of time for even quicker cooking!\n\nOvernight Oats \ud83e\udd63\n\nPerfect for busy mornings!\n\n\nBase Recipe:\n- 1/2 cup rolled oats\n- 1/2 cup milk (any type)\n- 1 tbsp chia seeds\n- 1 tsp honey or maple syrup\n\nFlavor Variations:\n1. Berry Blast: + blueberries + vanilla\n2. Chocolate PB: + cocoa powder + peanut butter\n3. Apple Pie: + diced apples + cinnamon\n\n\nWeekend Projects\n\nHomemade Sourdough Bread \ud83c\udf5e\n\nDay 1: Create Starter\n- Mix equal parts flour and water\n- Let sit at room temperature\n- Feed daily for 5-7 days\n\nBaking Day:\n| Ingredient | Amount | Baker's % |\n|------------|---------|-----------|\n| Flour | 500g | 100% |\n| Water | 375g | 75% |\n| Starter | 100g | 20% |\n| Salt | 10g | 2% |\n\nTimeline:\n- 8:00 AM - Mix ingredients\n- 8:30 AM - First fold\n- 9:00 AM - Second fold\n- 9:30 AM - Third fold\n- 10:00 AM - Bulk fermentation\n- 2:00 PM - Shape\n- 2:30 PM - Final proof\n- 4:00 PM - Bake at 450\u00b0F\n\nPerfect Pizza Dough \ud83c\udf55\n\npython\nPizza dough calculator\ndef calculateingredients(numpizzas, size='medium'):\n    sizes = {\n        'small': 200,\n        'medium': 250,\n        'large': 300\n    }\n    \n    doughweight = sizes.get(size, 250)  numpizzas\n    \n    ingredients = {\n        'flour': doughweight  0.60,\n        'water': doughweight  0.36,\n        'salt': doughweight  0.02,\n        'yeast': doughweight  0.02\n    }\n    \n    return ingredients\n\n\nMeal Prep Ideas\n\nSunday Prep List\n- [ ] Cut vegetables for the week\n- [ ] Cook grains (rice, quinoa)\n- [ ] Prepare protein (grill chicken, bake tofu)\n- [ ] Make salad dressing\n- [ ] Portion out snacks\n\nThis Week's Menu\n- Monday: Stir-fry with brown rice\n- Tuesday: Greek salad with grilled chicken\n- Wednesday: Veggie curry\n- Thursday: Pasta primavera\n- Friday: Homemade pizza night!\n\nKitchen Tips & Tricks\n\n1. Sharp knives make everything easier\n2. Mise en place - prep before cooking\n3. Taste as you go - adjust seasoning\n4. Clean as you cook - less mess later\n5. Keep it simple - fresh ingredients shine Base Recipe:\n- 1/2 cup rolled oats\n- 1/2 cup milk (any type)\n- 1 tbsp chia seeds\n- 1 tsp honey or maple syrup\n\nFlavor Variations:\n1. Berry Blast: + blueberries + vanilla\n2. Chocolate PB: + cocoa powder + peanut butter\n3. Apple Pie: + diced apples + cinnamon # Pizza dough calculator\ndef calculate_ingredients(num_pizzas, size='medium'):\n    sizes = {\n        'small': 200,\n        'medium': 250,\n        'large': 300\n    }\n    \n    dough_weight = sizes.get(size, 250) * num_pizzas\n    \n    ingredients = {\n        'flour': dough_weight * 0.60,\n        'water': dough_weight * 0.36,\n        'salt': dough_weight * 0.02,\n        'yeast': dough_weight * 0.02\n    }\n    \n    return ingredients",
      "code_blocks_count": 2
    },
    {
      "path": "/notes/projects/personal-blog.md",
      "context": "projects",
      "metadata": {
        "title": "Personal Blog Platform",
        "tags": [
          "projects",
          "blog",
          "gatsby",
          "graphql",
          "cms"
        ],
        "created": "2024-01-30",
        "author": "Blog Team",
        "description": "JAMstack blog built with Gatsby and headless CMS",
        "updated": "2024-02-28",
        "category": "projects",
        "status": "published"
      },
      "content_preview": "Create a fast, modern blog platform with:\n- Static site generation for performance\n- MDX support for interactive content\n- SEO optimization\n- Dark mode support\n- Comment system\n- Newsletter integratio...",
      "searchable_content": "\nPersonal Blog Platform\n\nProject Goals\n\nCreate a fast, modern blog platform with:\n- Static site generation for performance\n- MDX support for interactive content\n- SEO optimization\n- Dark mode support\n- Comment system\n- Newsletter integration\n- Analytics\n\nTechnology Stack\n\n- Gatsby - Static site generator\n- GraphQL - Data layer\n- MDX - Markdown with JSX\n- Tailwind CSS - Styling\n- Netlify CMS - Content management\n- Algolia - Search functionality\n- Disqus - Comments\n- Mailchimp - Newsletter\n\nProject Structure\n\n\npersonal-blog/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 Layout/\n\u2502   \u2502   \u251c\u2500\u2500 SEO/\n\u2502   \u2502   \u251c\u2500\u2500 BlogPost/\n\u2502   \u2502   \u251c\u2500\u2500 Navigation/\n\u2502   \u2502   \u2514\u2500\u2500 ThemeToggle/\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2514\u2500\u2500 utils/\n\u251c\u2500\u2500 content/\n\u2502   \u251c\u2500\u2500 blog/\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2514\u2500\u2500 images/\n\u251c\u2500\u2500 gatsby-config.js\n\u251c\u2500\u2500 gatsby-node.js\n\u2514\u2500\u2500 gatsby-browser.js\n\n\nKey Features Implementation\n\nMDX Setup\n\njavascript\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: gatsby-source-filesystem,\n      options: {\n        path: ${dirname}/content/blog,\n        name: blog,\n      },\n    },\n    {\n      resolve: gatsby-plugin-mdx,\n      options: {\n        extensions: [.mdx, .md],\n        gatsbyRemarkPlugins: [\n          {\n            resolve: gatsby-remark-images,\n            options: {\n              maxWidth: 1200,\n              quality: 90,\n            },\n          },\n          {\n            resolve: gatsby-remark-prismjs,\n            options: {\n              classPrefix: \"language-\",\n              inlineCodeMarker: null,\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n\n\nBlog Post Template\n\njsx\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport { formatDate } from '../utils/helpers';\n\nconst BlogPostTemplate = ({ data }) => {\n  const { mdx } = data;\n  const { title, date, description, tags } = mdx.frontmatter;\n\n  return (\n    <Layout>\n      <SEO \n        title={title}\n        description={description}\n        article\n      />\n      <article className=\"max-w-4xl mx-auto px-4 py-8\">\n        <header className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">{title}</h1>\n          <div className=\"flex items-center gap-4 text-gray-600\">\n            <time dateTime={date}>{formatDate(date)}</time>\n            <span>\u2022</span>\n            <span>{mdx.timeToRead} min read</span>\n          </div>\n          <div className=\"flex gap-2 mt-4\">\n            {tags.map(tag => (\n              <span key={tag} className=\"px-3 py-1 bg-gray-200 rounded-full text-sm\">\n                #{tag}\n              </span>\n            ))}\n          </div>\n        </header>\n        \n        <div className=\"prose prose-lg max-w-none\">\n          <MDXRenderer>{mdx.body}</MDXRenderer>\n        </div>\n        \n        <footer className=\"mt-12 pt-8 border-t\">\n          <NewsletterSignup />\n          <ShareButtons url={mdx.fields.slug} title={title} />\n          <Comments />\n        </footer>\n      </article>\n    </Layout>\n  );\n};\n\nexport const query = graphql\n  query BlogPostBySlug($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      body\n      timeToRead\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date\n        description\n        tags\n      }\n    }\n  }\n;\n\nexport default BlogPostTemplate;\n\n\nDynamic OG Images\n\njavascript\n// gatsby-node.js\nconst { createCanvas, registerFont } = require('canvas');\nconst fs = require('fs');\n\nexports.onPostBuild = async ({ graphql, reporter }) => {\n  const result = await graphql(\n    query {\n      allMdx {\n        nodes {\n          frontmatter {\n            title\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  );\n\n  for (const post of result.data.allMdx.nodes) {\n    const canvas = createCanvas(1200, 630);\n    const ctx = canvas.getContext('2d');\n    \n    // Background gradient\n    const gradient = ctx.createLinearGradient(0, 0, 1200, 630);\n    gradient.addColorStop(0, '#667eea');\n    gradient.addColorStop(1, '#764ba2');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, 1200, 630);\n    \n    // Title\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 60px Inter';\n    ctx.textAlign = 'center';\n    ctx.fillText(post.frontmatter.title, 600, 315);\n    \n    // Save image\n    const buffer = canvas.toBuffer('image/png');\n    fs.writeFileSync(\n      public/og-images${post.fields.slug}.png,\n      buffer\n    );\n  }\n};\n\n\nSearch Implementation\n\njavascript\n// Search component using Algolia\nimport React, { useState } from 'react';\nimport algoliasearch from 'algoliasearch/lite';\nimport {\n  InstantSearch,\n  SearchBox,\n  Hits,\n  Highlight,\n  Configure,\n} from 'react-instantsearch-dom';\n\nconst searchClient = algoliasearch(\n  process.env.GATSBYALGOLIAAPPID,\n  process.env.GATSBYALGOLIASEARCHKEY\n);\n\nconst Search = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <InstantSearch searchClient={searchClient} indexName=\"blogposts\">\n      <Configure hitsPerPage={5} />\n      <div className=\"relative\">\n        <SearchBox\n          onFocus={() => setIsOpen(true)}\n          onBlur={() => setTimeout(() => setIsOpen(false), 200)}\n        />\n        {isOpen && (\n          <div className=\"absolute top-full left-0 right-0 bg-white shadow-lg rounded-lg mt-2 p-4\">\n            <Hits hitComponent={Hit} />\n          </div>\n        )}\n      </div>\n    </InstantSearch>\n  );\n};\n\nconst Hit = ({ hit }) => (\n  <Link to={hit.slug} className=\"block p-2 hover:bg-gray-100 rounded\">\n    <h4 className=\"font-semibold\">\n      <Highlight attribute=\"title\" hit={hit} />\n    </h4>\n    <p className=\"text-sm text-gray-600\">\n      <Highlight attribute=\"excerpt\" hit={hit} />\n    </p>\n  </Link>\n);\n\n\nTheme Toggle Hook\n\njavascript\n// useTheme.js\nimport { useState, useEffect } from 'react';\n\nexport const useTheme = () => {\n  const [theme, setTheme] = useState('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else if (prefersDark) {\n      setTheme('dark');\n    }\n  }, []);\n\n  useEffect(() => {\n    document.documentElement.classList.toggle('dark', theme === 'dark');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return { theme, toggleTheme };\n};\n\n\nContent Management\n\nNetlify CMS Configuration\n\nyaml\nstatic/admin/config.yml\nbackend:\n  name: git-gateway\n  branch: main\n\nmediafolder: static/images\npublicfolder: /images\n\ncollections:\n  - name: \"blog\"\n    label: \"Blog\"\n    folder: \"content/blog\"\n    create: true\n    slug: \"{{year}}-{{month}}-{{day}}-{{slug}}\"\n    fields:\n      - {label: \"Title\", name: \"title\", widget: \"string\"}\n      - {label: \"Publish Date\", name: \"date\", widget: \"datetime\"}\n      - {label: \"Description\", name: \"description\", widget: \"string\"}\n      - {label: \"Featured Image\", name: \"featuredImage\", widget: \"image\"}\n      - {label: \"Tags\", name: \"tags\", widget: \"list\"}\n      - {label: \"Body\", name: \"body\", widget: \"markdown\"}\n\n\nPerformance Optimizations\n\nImage Optimization\njavascript\n// gatsby-config.js\n{\n  resolve: gatsby-plugin-sharp,\n  options: {\n    defaults: {\n      formats: [auto, webp, avif],\n      placeholder: blurred,\n      quality: 90,\n      breakpoints: [640, 768, 1024, 1280, 1536],\n    },\n  },\n}\n\n\nPWA Configuration\njavascript\n{\n  resolve: gatsby-plugin-manifest,\n  options: {\n    name: Personal Blog,\n    shortname: Blog,\n    starturl: /,\n    backgroundcolor: #ffffff,\n    themecolor: #663399,\n    display: minimal-ui,\n    icon: src/images/icon.png,\n  },\n},\ngatsby-plugin-offline,\n\n\nDeployment\n\nNetlify Configuration\ntoml\nnetlify.toml\n[build]\n  command = \"npm run build\"\n  publish = \"public\"\n\n[build.environment]\n  NODEVERSION = \"18\"\n\n[[plugins]]\n  package = \"@netlify/plugin-gatsby\"\n\n[[headers]]\n  for = \"/\"\n  [headers.values]\n    X-Frame-Options = \"DENY\"\n    X-XSS-Protection = \"1; mode=block\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"same-origin\"\n\n\nAnalytics Integration\n\njavascript\n// gatsby-config.js\n{\n  resolve: gatsby-plugin-google-gtag,\n  options: {\n    trackingIds: [process.env.GATRACKINGID],\n    gtagConfig: {\n      anonymizeip: true,\n      cookieexpires: 0,\n    },\n    pluginConfig: {\n      head: true,\n      respectDNT: true,\n    },\n  },\n}\n\n\nFuture Enhancements\n\n- [ ] RSS feed generation\n- [ ] Podcast episode support\n- [ ] Multi-language support\n- [ ] A/B testing for titles\n- [ ] Reading progress indicator\n- [ ] Related posts algorithm\n- [ ] Social media auto-posting personal-blog/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 Layout/\n\u2502   \u2502   \u251c\u2500\u2500 SEO/\n\u2502   \u2502   \u251c\u2500\u2500 BlogPost/\n\u2502   \u2502   \u251c\u2500\u2500 Navigation/\n\u2502   \u2502   \u2514\u2500\u2500 ThemeToggle/\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2514\u2500\u2500 utils/\n\u251c\u2500\u2500 content/\n\u2502   \u251c\u2500\u2500 blog/\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2514\u2500\u2500 images/\n\u251c\u2500\u2500 gatsby-config.js\n\u251c\u2500\u2500 gatsby-node.js\n\u2514\u2500\u2500 gatsby-browser.js // gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/content/blog`,\n        name: `blog`,\n      },\n    },\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        extensions: [`.mdx`, `.md`],\n        gatsbyRemarkPlugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 1200,\n              quality: 90,\n            },\n          },\n          {\n            resolve: `gatsby-remark-prismjs`,\n            options: {\n              classPrefix: \"language-\",\n              inlineCodeMarker: null,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}; import React from 'react';\nimport { graphql } from 'gatsby';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport { formatDate } from '../utils/helpers';\n\nconst BlogPostTemplate = ({ data }) => {\n  const { mdx } = data;\n  const { title, date, description, tags } = mdx.frontmatter;\n\n  return (\n    <Layout>\n      <SEO \n        title={title}\n        description={description}\n        article\n      />\n      <article className=\"max-w-4xl mx-auto px-4 py-8\">\n        <header className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">{title}</h1>\n          <div className=\"flex items-center gap-4 text-gray-600\">\n            <time dateTime={date}>{formatDate(date)}</time>\n            <span>\u2022</span>\n            <span>{mdx.timeToRead} min read</span>\n          </div>\n          <div className=\"flex gap-2 mt-4\">\n            {tags.map(tag => (\n              <span key={tag} className=\"px-3 py-1 bg-gray-200 rounded-full text-sm\">\n                #{tag}\n              </span>\n            ))}\n          </div>\n        </header>\n        \n        <div className=\"prose prose-lg max-w-none\">\n          <MDXRenderer>{mdx.body}</MDXRenderer>\n        </div>\n        \n        <footer className=\"mt-12 pt-8 border-t\">\n          <NewsletterSignup />\n          <ShareButtons url={mdx.fields.slug} title={title} />\n          <Comments />\n        </footer>\n      </article>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query BlogPostBySlug($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      body\n      timeToRead\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date\n        description\n        tags\n      }\n    }\n  }\n`;\n\nexport default BlogPostTemplate; // gatsby-node.js\nconst { createCanvas, registerFont } = require('canvas');\nconst fs = require('fs');\n\nexports.onPostBuild = async ({ graphql, reporter }) => {\n  const result = await graphql(`\n    query {\n      allMdx {\n        nodes {\n          frontmatter {\n            title\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `);\n\n  for (const post of result.data.allMdx.nodes) {\n    const canvas = createCanvas(1200, 630);\n    const ctx = canvas.getContext('2d');\n    \n    // Background gradient\n    const gradient = ctx.createLinearGradient(0, 0, 1200, 630);\n    gradient.addColorStop(0, '#667eea');\n    gradient.addColorStop(1, '#764ba2');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, 1200, 630);\n    \n    // Title\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 60px Inter';\n    ctx.textAlign = 'center';\n    ctx.fillText(post.frontmatter.title, 600, 315);\n    \n    // Save image\n    const buffer = canvas.toBuffer('image/png');\n    fs.writeFileSync(\n      `public/og-images${post.fields.slug}.png`,\n      buffer\n    );\n  }\n}; // Search component using Algolia\nimport React, { useState } from 'react';\nimport algoliasearch from 'algoliasearch/lite';\nimport {\n  InstantSearch,\n  SearchBox,\n  Hits,\n  Highlight,\n  Configure,\n} from 'react-instantsearch-dom';\n\nconst searchClient = algoliasearch(\n  process.env.GATSBY_ALGOLIA_APP_ID,\n  process.env.GATSBY_ALGOLIA_SEARCH_KEY\n);\n\nconst Search = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <InstantSearch searchClient={searchClient} indexName=\"blog_posts\">\n      <Configure hitsPerPage={5} />\n      <div className=\"relative\">\n        <SearchBox\n          onFocus={() => setIsOpen(true)}\n          onBlur={() => setTimeout(() => setIsOpen(false), 200)}\n        />\n        {isOpen && (\n          <div className=\"absolute top-full left-0 right-0 bg-white shadow-lg rounded-lg mt-2 p-4\">\n            <Hits hitComponent={Hit} />\n          </div>\n        )}\n      </div>\n    </InstantSearch>\n  );\n};\n\nconst Hit = ({ hit }) => (\n  <Link to={hit.slug} className=\"block p-2 hover:bg-gray-100 rounded\">\n    <h4 className=\"font-semibold\">\n      <Highlight attribute=\"title\" hit={hit} />\n    </h4>\n    <p className=\"text-sm text-gray-600\">\n      <Highlight attribute=\"excerpt\" hit={hit} />\n    </p>\n  </Link>\n); // useTheme.js\nimport { useState, useEffect } from 'react';\n\nexport const useTheme = () => {\n  const [theme, setTheme] = useState('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else if (prefersDark) {\n      setTheme('dark');\n    }\n  }, []);\n\n  useEffect(() => {\n    document.documentElement.classList.toggle('dark', theme === 'dark');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return { theme, toggleTheme };\n}; # static/admin/config.yml\nbackend:\n  name: git-gateway\n  branch: main\n\nmedia_folder: static/images\npublic_folder: /images\n\ncollections:\n  - name: \"blog\"\n    label: \"Blog\"\n    folder: \"content/blog\"\n    create: true\n    slug: \"{{year}}-{{month}}-{{day}}-{{slug}}\"\n    fields:\n      - {label: \"Title\", name: \"title\", widget: \"string\"}\n      - {label: \"Publish Date\", name: \"date\", widget: \"datetime\"}\n      - {label: \"Description\", name: \"description\", widget: \"string\"}\n      - {label: \"Featured Image\", name: \"featuredImage\", widget: \"image\"}\n      - {label: \"Tags\", name: \"tags\", widget: \"list\"}\n      - {label: \"Body\", name: \"body\", widget: \"markdown\"} // gatsby-config.js\n{\n  resolve: `gatsby-plugin-sharp`,\n  options: {\n    defaults: {\n      formats: [`auto`, `webp`, `avif`],\n      placeholder: `blurred`,\n      quality: 90,\n      breakpoints: [640, 768, 1024, 1280, 1536],\n    },\n  },\n} {\n  resolve: `gatsby-plugin-manifest`,\n  options: {\n    name: `Personal Blog`,\n    short_name: `Blog`,\n    start_url: `/`,\n    background_color: `#ffffff`,\n    theme_color: `#663399`,\n    display: `minimal-ui`,\n    icon: `src/images/icon.png`,\n  },\n},\n`gatsby-plugin-offline`, # netlify.toml\n[build]\n  command = \"npm run build\"\n  publish = \"public\"\n\n[build.environment]\n  NODE_VERSION = \"18\"\n\n[[plugins]]\n  package = \"@netlify/plugin-gatsby\"\n\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    X-Frame-Options = \"DENY\"\n    X-XSS-Protection = \"1; mode=block\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"same-origin\" // gatsby-config.js\n{\n  resolve: `gatsby-plugin-google-gtag`,\n  options: {\n    trackingIds: [process.env.GA_TRACKING_ID],\n    gtagConfig: {\n      anonymize_ip: true,\n      cookie_expires: 0,\n    },\n    pluginConfig: {\n      head: true,\n      respectDNT: true,\n    },\n  },\n}",
      "code_blocks_count": 11
    },
    {
      "path": "/notes/personal/book-notes.md",
      "context": "personal",
      "metadata": {
        "title": "Book Notes and Reviews",
        "tags": [
          "personal",
          "books",
          "reading",
          "reviews"
        ],
        "created": "2024-01-25",
        "author": "Jane Smith",
        "description": "Notes and reviews from books I've read",
        "updated": "2024-02-20",
        "category": "personal",
        "status": "published"
      },
      "content_preview": "Progress: Chapter 5 of 8\n\nKey takeaways so far:\n- DRY Principle (Don't Repeat Yourself) - fundamental to good software design\n- Orthogonality - keep components independent and decoupled\n- Tracer bulle...",
      "searchable_content": "\nBook Notes and Reviews\n\nCurrently Reading\n\n\"The Pragmatic Programmer\" by David Thomas and Andrew Hunt\n\nProgress: Chapter 5 of 8\n\nKey takeaways so far:\n- DRY Principle (Don't Repeat Yourself) - fundamental to good software design\n- Orthogonality - keep components independent and decoupled\n- Tracer bullets - build end-to-end features to get quick feedback\n\npython title:\"This is the title\"\nExample: DRY principle in action\nBad\ndef calculatearearectangle(width, height):\n    return width  height\n\ndef calculateareasquare(side):\n    return side  side\n\nGood\ndef calculatearea(width, height=None):\n    if height is None:\n        height = width  # Square case\n    return width  height\n\n\nRecently Finished\n\n\"Atomic Habits\" by James Clear \u2b50\u2b50\u2b50\u2b50\u2b50\n\nFinished: February 1, 2024\n\nThis book completely changed how I think about habits. The main concepts:\n\n1. 1% Better Every Day - Small improvements compound over time\n2. Habit Stacking - Link new habits to existing ones\n3. Environment Design - Make good habits obvious and bad habits invisible\n4. Identity-Based Habits - Focus on who you want to become\n\nMy implementation:\n- Created a habit tracker in my journal\n- Redesigned my workspace for productivity\n- Started habit stacking: coffee \u2192 meditation \u2192 writing\n\n\"Clean Code\" by Robert C. Martin \u2b50\u2b50\u2b50\u2b50\n\nFinished: January 15, 2024\n\nEssential reading for any developer. Key principles:\n\n- Meaningful names - Variables and functions should clearly express intent\n- Small functions - Each function should do one thing well\n- Comments are failures - Code should be self-documenting\n\nReading List\n\nTechnical Books\n1. \"Design Patterns\" by Gang of Four\n2. \"The Phoenix Project\" by Gene Kim\n3. \"Structure and Interpretation of Computer Programs\"\n\nPersonal Development\n1. \"Deep Work\" by Cal Newport\n2. \"The Power of Now\" by Eckhart Tolle\n3. \"Thinking, Fast and Slow\" by Daniel Kahneman\n\nFiction\n1. \"Project Hail Mary\" by Andy Weir\n2. \"The Three-Body Problem\" by Liu Cixin\n3. \"Neuromancer\" by William Gibson python This is the title # Example: DRY principle in action\n# Bad\ndef calculate_area_rectangle(width, height):\n    return width * height\n\ndef calculate_area_square(side):\n    return side * side\n\n# Good\ndef calculate_area(width, height=None):\n    if height is None:\n        height = width  # Square case\n    return width * height",
      "code_blocks_count": 1
    },
    {
      "path": "/notes/technical/databases/sql-optimization.md",
      "context": "technical",
      "metadata": {
        "title": "SQL Query Optimization",
        "tags": [
          "sql",
          "databases",
          "performance",
          "optimization"
        ],
        "created": "2024-01-22",
        "author": "Database Team",
        "description": "Advanced SQL optimization techniques and best practices",
        "updated": "2024-02-18",
        "category": "technical",
        "status": "published"
      },
      "content_preview": "sql\n-- PostgreSQL\nEXPLAIN (ANALYZE, BUFFERS) \nSELECT o.orderid, o.orderdate, c.customername, \n       SUM(oi.quantity  oi.unitprice) as total\nFROM orders o\nJOIN customers c ON o.customerid = c.customer...",
      "searchable_content": "\nSQL Query Optimization\n\nUnderstanding Query Execution\n\nEXPLAIN Plan Analysis\n\nsql\n-- PostgreSQL\nEXPLAIN (ANALYZE, BUFFERS) \nSELECT o.orderid, o.orderdate, c.customername, \n       SUM(oi.quantity  oi.unitprice) as total\nFROM orders o\nJOIN customers c ON o.customerid = c.customerid\nJOIN orderitems oi ON o.orderid = oi.orderid\nWHERE o.orderdate >= '2024-01-01'\nGROUP BY o.orderid, o.orderdate, c.customername\nORDER BY total DESC\nLIMIT 10;\n\n-- MySQL\nEXPLAIN FORMAT=JSON\nSELECT ...;\n\n-- SQL Server\nSET STATISTICS IO ON;\nSET STATISTICS TIME ON;\n\n\nQuery Execution Order\n\n1. FROM (including JOINs)\n2. WHERE\n3. GROUP BY\n4. HAVING\n5. SELECT\n6. DISTINCT\n7. ORDER BY\n8. LIMIT/TOP\n\nIndexing Strategies\n\nTypes of Indexes\n\nsql\n-- B-Tree Index (default)\nCREATE INDEX idxcustomeremail ON customers(email);\n\n-- Composite Index\nCREATE INDEX idxordercustomerdate \nON orders(customerid, orderdate);\n\n-- Partial Index (PostgreSQL)\nCREATE INDEX idxactiveusers \nON users(email) \nWHERE isactive = true;\n\n-- Covering Index\nCREATE INDEX idxordercovering \nON orders(customerid, orderdate) \nINCLUDE (totalamount, status);\n\n-- Full-text Index (MySQL)\nCREATE FULLTEXT INDEX idxproductsearch \nON products(name, description);\n\n-- JSON Index (PostgreSQL)\nCREATE INDEX idxmetadata \nON products((metadata->>'category'));\n\n\nIndex Selection Guidelines\n\n| Scenario | Recommended Index Type |\n|----------|----------------------|\n| High cardinality columns | B-Tree |\n| Low cardinality columns | Bitmap (Oracle) or Filtered |\n| Range queries | B-Tree |\n| Full-text search | Full-text |\n| JSON queries | GIN/GiST |\n| Spatial data | R-Tree |\n\nQuery Optimization Patterns\n\nAvoid N+1 Queries\n\nsql\n-- Bad: N+1 problem\n-- First query\nSELECT  FROM authors;\n-- Then N queries\nSELECT  FROM books WHERE authorid = ?;\n\n-- Good: Single query with JOIN\nSELECT a., b.\nFROM authors a\nLEFT JOIN books b ON a.authorid = b.authorid\nORDER BY a.authorid, b.publisheddate;\n\n-- Or using subquery\nSELECT ,\n       (SELECT JSONAGG(b.) \n        FROM books b \n        WHERE b.authorid = a.authorid) as books\nFROM authors a;\n\n\nOptimize Subqueries\n\nsql\n-- Inefficient: Correlated subquery\nSELECT c.customername,\n       (SELECT COUNT() \n        FROM orders o \n        WHERE o.customerid = c.customerid) as ordercount\nFROM customers c;\n\n-- Better: JOIN with GROUP BY\nSELECT c.customername, COUNT(o.orderid) as ordercount\nFROM customers c\nLEFT JOIN orders o ON c.customerid = o.customerid\nGROUP BY c.customerid, c.customername;\n\n-- Best: Using window function\nSELECT DISTINCT \n       c.customername,\n       COUNT(o.orderid) OVER (PARTITION BY c.customerid) as ordercount\nFROM customers c\nLEFT JOIN orders o ON c.customerid = o.customerid;\n\n\nEXISTS vs IN vs JOIN\n\nsql\n-- EXISTS (best for existence check)\nSELECT c.\nFROM customers c\nWHERE EXISTS (\n    SELECT 1 \n    FROM orders o \n    WHERE o.customerid = c.customerid \n    AND o.status = 'completed'\n);\n\n-- IN (good for small lists)\nSELECT \nFROM products\nWHERE categoryid IN (1, 2, 3);\n\n-- JOIN (best for retrieving data from both tables)\nSELECT DISTINCT c.\nFROM customers c\nINNER JOIN orders o ON c.customerid = o.customerid\nWHERE o.status = 'completed';\n\n\nAdvanced Optimization Techniques\n\nCommon Table Expressions (CTEs)\n\nsql\n-- Recursive CTE for hierarchical data\nWITH RECURSIVE categorytree AS (\n    -- Anchor member\n    SELECT categoryid, name, parentid, 0 as level\n    FROM categories\n    WHERE parentid IS NULL\n    \n    UNION ALL\n    \n    -- Recursive member\n    SELECT c.categoryid, c.name, c.parentid, ct.level + 1\n    FROM categories c\n    INNER JOIN categorytree ct ON c.parentid = ct.categoryid\n)\nSELECT  FROM categorytree\nORDER BY level, name;\n\n-- Multiple CTEs for complex queries\nWITH \nmonthlysales AS (\n    SELECT DATETRUNC('month', orderdate) as month,\n           SUM(totalamount) as revenue\n    FROM orders\n    WHERE orderdate >= CURRENTDATE - INTERVAL '1 year'\n    GROUP BY 1\n),\nmonthlygrowth AS (\n    SELECT month,\n           revenue,\n           LAG(revenue) OVER (ORDER BY month) as prevrevenue,\n           (revenue - LAG(revenue) OVER (ORDER BY month)) / \n           LAG(revenue) OVER (ORDER BY month)  100 as growthrate\n    FROM monthlysales\n)\nSELECT  FROM monthlygrowth\nWHERE growthrate IS NOT NULL\nORDER BY month;\n\n\nWindow Functions\n\nsql\n-- Ranking and analytics\nSELECT \n    customerid,\n    orderdate,\n    totalamount,\n    ROWNUMBER() OVER (PARTITION BY customerid ORDER BY orderdate) as orderseq,\n    RANK() OVER (ORDER BY totalamount DESC) as amountrank,\n    SUM(totalamount) OVER (PARTITION BY customerid ORDER BY orderdate \n                           ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as runningtotal,\n    AVG(totalamount) OVER (PARTITION BY customerid) as avgordervalue,\n    LEAD(orderdate) OVER (PARTITION BY customerid ORDER BY orderdate) as nextorderdate\nFROM orders;\n\n-- Moving averages\nSELECT \n    date,\n    sales,\n    AVG(sales) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as ma7,\n    AVG(sales) OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) as ma30\nFROM dailysales;\n\n\nMaterialized Views\n\nsql\n-- PostgreSQL\nCREATE MATERIALIZED VIEW monthlycustomersummary AS\nSELECT \n    c.customerid,\n    c.customername,\n    DATETRUNC('month', o.orderdate) as month,\n    COUNT(o.orderid) as ordercount,\n    SUM(o.totalamount) as totalspent,\n    AVG(o.totalamount) as avgordervalue\nFROM customers c\nLEFT JOIN orders o ON c.customerid = o.customerid\nGROUP BY c.customerid, c.customername, DATETRUNC('month', o.orderdate);\n\nCREATE INDEX idxmvcustomermonth \nON monthlycustomersummary(customerid, month);\n\n-- Refresh strategies\nREFRESH MATERIALIZED VIEW monthlycustomersummary;\nREFRESH MATERIALIZED VIEW CONCURRENTLY monthlycustomersummary;\n\n\nPerformance Anti-patterns\n\n1. SELECT  Abuse\nsql\n-- Bad\nSELECT  FROM largetable;\n\n-- Good\nSELECT id, name, email FROM largetable;\n\n\n2. Implicit Type Conversion\nsql\n-- Bad (if userid is integer)\nSELECT  FROM users WHERE userid = '123';\n\n-- Good\nSELECT  FROM users WHERE userid = 123;\n\n\n3. Functions on Indexed Columns\nsql\n-- Bad (can't use index)\nSELECT  FROM orders \nWHERE YEAR(orderdate) = 2024;\n\n-- Good (can use index)\nSELECT  FROM orders \nWHERE orderdate >= '2024-01-01' \nAND orderdate < '2025-01-01';\n\n\n4. OR Conditions\nsql\n-- Bad (may not use indexes efficiently)\nSELECT  FROM products \nWHERE category = 'Electronics' OR brand = 'Apple';\n\n-- Better (UNION with indexes)\nSELECT  FROM products WHERE category = 'Electronics'\nUNION\nSELECT  FROM products WHERE brand = 'Apple';\n\n\nQuery Tuning Checklist\n\n1. Analyze execution plan\n   - Look for table scans\n   - Check join methods\n   - Identify sorting operations\n\n2. Index optimization\n   - Missing indexes\n   - Unused indexes\n   - Index fragmentation\n\n3. Query structure\n   - Simplify complex queries\n   - Eliminate unnecessary joins\n   - Use appropriate join types\n\n4. Data types\n   - Consistent types in joins\n   - Appropriate column sizes\n   - Avoid unnecessary conversions\n\n5. Statistics\n   sql\n   -- Update statistics (SQL Server)\n   UPDATE STATISTICS tablename;\n   \n   -- Analyze table (PostgreSQL)\n   ANALYZE tablename;\n   \n\nMonitoring Queries\n\nPostgreSQL\nsql\n-- Current queries\nSELECT pid, now() - pgstatactivity.querystart AS duration, query \nFROM pgstatactivity \nWHERE (now() - pgstatactivity.querystart) > interval '5 minutes';\n\n-- Slow query log\nALTER SYSTEM SET logmindurationstatement = 1000; -- 1 second\n\n\nMySQL\nsql\n-- Enable slow query log\nSET GLOBAL slowquerylog = 'ON';\nSET GLOBAL longquerytime = 2;\n\n-- Performance schema\nSELECT  FROM performanceschema.eventsstatementssummarybydigest\nORDER BY SUMTIMERWAIT DESC\nLIMIT 10;\n -- PostgreSQL\nEXPLAIN (ANALYZE, BUFFERS) \nSELECT o.order_id, o.order_date, c.customer_name, \n       SUM(oi.quantity * oi.unit_price) as total\nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nWHERE o.order_date >= '2024-01-01'\nGROUP BY o.order_id, o.order_date, c.customer_name\nORDER BY total DESC\nLIMIT 10;\n\n-- MySQL\nEXPLAIN FORMAT=JSON\nSELECT ...;\n\n-- SQL Server\nSET STATISTICS IO ON;\nSET STATISTICS TIME ON; -- B-Tree Index (default)\nCREATE INDEX idx_customer_email ON customers(email);\n\n-- Composite Index\nCREATE INDEX idx_order_customer_date \nON orders(customer_id, order_date);\n\n-- Partial Index (PostgreSQL)\nCREATE INDEX idx_active_users \nON users(email) \nWHERE is_active = true;\n\n-- Covering Index\nCREATE INDEX idx_order_covering \nON orders(customer_id, order_date) \nINCLUDE (total_amount, status);\n\n-- Full-text Index (MySQL)\nCREATE FULLTEXT INDEX idx_product_search \nON products(name, description);\n\n-- JSON Index (PostgreSQL)\nCREATE INDEX idx_metadata \nON products((metadata->>'category')); -- Bad: N+1 problem\n-- First query\nSELECT * FROM authors;\n-- Then N queries\nSELECT * FROM books WHERE author_id = ?;\n\n-- Good: Single query with JOIN\nSELECT a.*, b.*\nFROM authors a\nLEFT JOIN books b ON a.author_id = b.author_id\nORDER BY a.author_id, b.published_date;\n\n-- Or using subquery\nSELECT *,\n       (SELECT JSON_AGG(b.*) \n        FROM books b \n        WHERE b.author_id = a.author_id) as books\nFROM authors a; -- Inefficient: Correlated subquery\nSELECT c.customer_name,\n       (SELECT COUNT(*) \n        FROM orders o \n        WHERE o.customer_id = c.customer_id) as order_count\nFROM customers c;\n\n-- Better: JOIN with GROUP BY\nSELECT c.customer_name, COUNT(o.order_id) as order_count\nFROM customers c\nLEFT JOIN orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.customer_name;\n\n-- Best: Using window function\nSELECT DISTINCT \n       c.customer_name,\n       COUNT(o.order_id) OVER (PARTITION BY c.customer_id) as order_count\nFROM customers c\nLEFT JOIN orders o ON c.customer_id = o.customer_id; -- EXISTS (best for existence check)\nSELECT c.*\nFROM customers c\nWHERE EXISTS (\n    SELECT 1 \n    FROM orders o \n    WHERE o.customer_id = c.customer_id \n    AND o.status = 'completed'\n);\n\n-- IN (good for small lists)\nSELECT *\nFROM products\nWHERE category_id IN (1, 2, 3);\n\n-- JOIN (best for retrieving data from both tables)\nSELECT DISTINCT c.*\nFROM customers c\nINNER JOIN orders o ON c.customer_id = o.customer_id\nWHERE o.status = 'completed'; -- Recursive CTE for hierarchical data\nWITH RECURSIVE category_tree AS (\n    -- Anchor member\n    SELECT category_id, name, parent_id, 0 as level\n    FROM categories\n    WHERE parent_id IS NULL\n    \n    UNION ALL\n    \n    -- Recursive member\n    SELECT c.category_id, c.name, c.parent_id, ct.level + 1\n    FROM categories c\n    INNER JOIN category_tree ct ON c.parent_id = ct.category_id\n)\nSELECT * FROM category_tree\nORDER BY level, name;\n\n-- Multiple CTEs for complex queries\nWITH \nmonthly_sales AS (\n    SELECT DATE_TRUNC('month', order_date) as month,\n           SUM(total_amount) as revenue\n    FROM orders\n    WHERE order_date >= CURRENT_DATE - INTERVAL '1 year'\n    GROUP BY 1\n),\nmonthly_growth AS (\n    SELECT month,\n           revenue,\n           LAG(revenue) OVER (ORDER BY month) as prev_revenue,\n           (revenue - LAG(revenue) OVER (ORDER BY month)) / \n           LAG(revenue) OVER (ORDER BY month) * 100 as growth_rate\n    FROM monthly_sales\n)\nSELECT * FROM monthly_growth\nWHERE growth_rate IS NOT NULL\nORDER BY month; -- Ranking and analytics\nSELECT \n    customer_id,\n    order_date,\n    total_amount,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) as order_seq,\n    RANK() OVER (ORDER BY total_amount DESC) as amount_rank,\n    SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date \n                           ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_total,\n    AVG(total_amount) OVER (PARTITION BY customer_id) as avg_order_value,\n    LEAD(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) as next_order_date\nFROM orders;\n\n-- Moving averages\nSELECT \n    date,\n    sales,\n    AVG(sales) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as ma7,\n    AVG(sales) OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) as ma30\nFROM daily_sales; -- PostgreSQL\nCREATE MATERIALIZED VIEW monthly_customer_summary AS\nSELECT \n    c.customer_id,\n    c.customer_name,\n    DATE_TRUNC('month', o.order_date) as month,\n    COUNT(o.order_id) as order_count,\n    SUM(o.total_amount) as total_spent,\n    AVG(o.total_amount) as avg_order_value\nFROM customers c\nLEFT JOIN orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.customer_name, DATE_TRUNC('month', o.order_date);\n\nCREATE INDEX idx_mv_customer_month \nON monthly_customer_summary(customer_id, month);\n\n-- Refresh strategies\nREFRESH MATERIALIZED VIEW monthly_customer_summary;\nREFRESH MATERIALIZED VIEW CONCURRENTLY monthly_customer_summary; -- Bad\nSELECT * FROM large_table;\n\n-- Good\nSELECT id, name, email FROM large_table; -- Bad (if user_id is integer)\nSELECT * FROM users WHERE user_id = '123';\n\n-- Good\nSELECT * FROM users WHERE user_id = 123; -- Bad (can't use index)\nSELECT * FROM orders \nWHERE YEAR(order_date) = 2024;\n\n-- Good (can use index)\nSELECT * FROM orders \nWHERE order_date >= '2024-01-01' \nAND order_date < '2025-01-01'; -- Bad (may not use indexes efficiently)\nSELECT * FROM products \nWHERE category = 'Electronics' OR brand = 'Apple';\n\n-- Better (UNION with indexes)\nSELECT * FROM products WHERE category = 'Electronics'\nUNION\nSELECT * FROM products WHERE brand = 'Apple'; -- Update statistics (SQL Server)\n   UPDATE STATISTICS table_name;\n   \n   -- Analyze table (PostgreSQL)\n   ANALYZE table_name; -- Current queries\nSELECT pid, now() - pg_stat_activity.query_start AS duration, query \nFROM pg_stat_activity \nWHERE (now() - pg_stat_activity.query_start) > interval '5 minutes';\n\n-- Slow query log\nALTER SYSTEM SET log_min_duration_statement = 1000; -- 1 second -- Enable slow query log\nSET GLOBAL slow_query_log = 'ON';\nSET GLOBAL long_query_time = 2;\n\n-- Performance schema\nSELECT * FROM performance_schema.events_statements_summary_by_digest\nORDER BY SUM_TIMER_WAIT DESC\nLIMIT 10;",
      "code_blocks_count": 15
    },
    {
      "path": "/notes/personal/daily-journal.md",
      "context": "personal",
      "metadata": {
        "title": "Daily Journal",
        "tags": [
          "personal",
          "journal",
          "thoughts"
        ],
        "created": "2024-01-20",
        "author": "John Doe",
        "description": "My daily thoughts and reflections",
        "updated": "2024-02-15",
        "category": "personal",
        "status": "published"
      },
      "content_preview": "Today was a productive day. I managed to complete several important tasks:\n\n- Finished the project proposal\n- Had a great meeting with the team\n- Learned about new React hooks\n\n\n\nI've been experimenti...",
      "searchable_content": "\nDaily Journal\n\nFebruary 15, 2024\n\nToday was a productive day. I managed to complete several important tasks:\n\n- Finished the project proposal\n- Had a great meeting with the team\n- Learned about new React hooks\n\nThoughts on Productivity\n\nI've been experimenting with the Pomodoro Technique lately, and it's been quite effective. The key insights:\n\n1. 25-minute focused sessions work well\n2. Short breaks are essential\n3. Tracking completed pomodoros is motivating\n\njavascript\n// My custom timer function\nfunction pomodoroTimer(minutes = 25) {\n    const seconds = minutes  60;\n    let remaining = seconds;\n    \n    const interval = setInterval(() => {\n        remaining--;\n        console.log(Time remaining: ${Math.floor(remaining / 60)}:${(remaining % 60).toString().padStart(2, '0')});\n        \n        if (remaining === 0) {\n            clearInterval(interval);\n            alert('Pomodoro complete!');\n        }\n    }, 1000);\n}\n\n\nFebruary 10, 2024\n\nReflecting on the week:\n\n- Started learning TypeScript\n- Read \"Atomic Habits\" - excellent book!\n- Began morning meditation practice\n\n> \"The secret of getting ahead is getting started.\" - Mark Twain\n\nFebruary 5, 2024\n\nWeekend Project Ideas\n\n- [ ] Build a habit tracker app\n- [ ] Organize digital photo collection\n- [ ] Learn Docker basics\n- [x] Set up personal wiki (completed!)\n\nLooking forward to tackling these projects! // My custom timer function\nfunction pomodoroTimer(minutes = 25) {\n    const seconds = minutes * 60;\n    let remaining = seconds;\n    \n    const interval = setInterval(() => {\n        remaining--;\n        console.log(`Time remaining: ${Math.floor(remaining / 60)}:${(remaining % 60).toString().padStart(2, '0')}`);\n        \n        if (remaining === 0) {\n            clearInterval(interval);\n            alert('Pomodoro complete!');\n        }\n    }, 1000);\n}",
      "code_blocks_count": 1
    },
    {
      "path": "/notes/technical/devops/docker-basics.md",
      "context": "technical",
      "metadata": {
        "title": "Docker Fundamentals",
        "tags": [
          "docker",
          "devops",
          "containers",
          "deployment"
        ],
        "created": "2024-01-18",
        "author": "DevOps Team",
        "description": "Essential Docker concepts and practical examples",
        "updated": "2024-02-22",
        "category": "technical",
        "status": "published"
      },
      "content_preview": "Docker containers are lightweight, standalone, executable packages that include everything needed to run software:\n- Code\n- Runtime\n- System tools\n- Libraries\n- Settings\n\n\n\n| Feature | Docker | Virtua...",
      "searchable_content": "\nDocker Fundamentals\n\nIntroduction to Containers\n\nDocker containers are lightweight, standalone, executable packages that include everything needed to run software:\n- Code\n- Runtime\n- System tools\n- Libraries\n- Settings\n\nDocker vs Virtual Machines\n\n| Feature | Docker | Virtual Machine |\n|---------|---------|-----------------|\n| Size | MB | GB |\n| Startup | Seconds | Minutes |\n| Performance | Near native | Overhead |\n| Isolation | Process level | Hardware level |\n\nEssential Docker Commands\n\nImage Management\n\nbash\nPull an image\ndocker pull nginx:latest\n\nList images\ndocker images\n\nBuild an image\ndocker build -t myapp:1.0 .\n\nTag an image\ndocker tag myapp:1.0 myregistry/myapp:1.0\n\nPush to registry\ndocker push myregistry/myapp:1.0\n\nRemove an image\ndocker rmi myapp:1.0\n\n\nContainer Operations\n\nbash\nRun a container\ndocker run -d --name webserver -p 80:80 nginx\n\nList running containers\ndocker ps\n\nList all containers\ndocker ps -a\n\nStop a container\ndocker stop webserver\n\nStart a container\ndocker start webserver\n\nRemove a container\ndocker rm webserver\n\nExecute command in running container\ndocker exec -it webserver bash\n\nView logs\ndocker logs -f webserver\n\n\nDockerfile Best Practices\n\nMulti-stage Build Example\n\ndockerfile\nStage 1: Build\nFROM node:16-alpine AS builder\nWORKDIR /app\nCOPY package.json ./\nRUN npm ci --only=production\nCOPY . .\nRUN npm run build\n\nStage 2: Runtime\nFROM node:16-alpine\nWORKDIR /app\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodejs -u 1001\n\nCOPY --from=builder --chown=nodejs:nodejs /app/dist ./dist\nCOPY --from=builder --chown=nodejs:nodejs /app/nodemodules ./nodemodules\n\nUSER nodejs\nEXPOSE 3000\nCMD [\"node\", \"dist/index.js\"]\n\n\nPython Application\n\ndockerfile\nFROM python:3.9-slim\n\nSet environment variables\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    APPHOME=/app\n\nCreate app directory\nWORKDIR $APPHOME\n\nInstall dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCopy application\nCOPY . .\n\nCreate non-root user\nRUN useradd -m -u 1001 appuser && chown -R appuser:appuser $APPHOME\nUSER appuser\n\nHealth check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD python -c \"import requests; requests.get('http://localhost:8000/health')\"\n\nEXPOSE 8000\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--workers\", \"4\", \"app:application\"]\n\n\nDocker Compose\n\nWeb Application Stack\n\nyaml\nversion: '3.8'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODEENV=production\n      - DATABASEURL=postgresql://user:pass@db:5432/myapp\n    dependson:\n      - db\n      - redis\n    networks:\n      - app-network\n    volumes:\n      - ./uploads:/app/uploads\n    restart: unless-stopped\n\n  db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRESUSER=user\n      - POSTGRESPASSWORD=pass\n      - POSTGRESDB=myapp\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    networks:\n      - app-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pgisready -U user\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis-data:/data\n    networks:\n      - app-network\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    dependson:\n      - web\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\n\nvolumes:\n  postgres-data:\n  redis-data:\n\n\nDevelopment Environment\n\nyaml\nversion: '3.8'\n\nservices:\n  dev:\n    build:\n      context: .\n      target: development\n    volumes:\n      - .:/app\n      - nodemodules:/app/nodemodules\n    ports:\n      - \"3000:3000\"\n      - \"9229:9229\"  # Node.js debugger\n    environment:\n      - NODEENV=development\n    command: npm run dev\n\nvolumes:\n  nodemodules:\n\n\nContainer Networking\n\nbash\nCreate custom network\ndocker network create myapp-network\n\nRun container in network\ndocker run -d --name app1 --network myapp-network myapp\n\nConnect existing container to network\ndocker network connect myapp-network existing-container\n\nInspect network\ndocker network inspect myapp-network\n\nList networks\ndocker network ls\n\n\nVolume Management\n\nbash\nCreate named volume\ndocker volume create app-data\n\nRun with volume\ndocker run -v app-data:/data myapp\n\nBind mount (development)\ndocker run -v $(pwd):/app myapp\n\nList volumes\ndocker volume ls\n\nInspect volume\ndocker volume inspect app-data\n\nRemove unused volumes\ndocker volume prune\n\n\nSecurity Best Practices\n\n1. Non-root User\ndockerfile\nRUN adduser -D -u 1001 appuser\nUSER appuser\n\n\n2. Minimal Base Images\ndockerfile\nUse alpine or distroless\nFROM gcr.io/distroless/nodejs:16\n\n\n3. Multi-stage Builds\n- Separate build and runtime\n- Reduce attack surface\n- Smaller images\n\n4. Scan for Vulnerabilities\nbash\nUsing Docker Scout\ndocker scout quickview myapp:latest\n\nUsing Trivy\ntrivy image myapp:latest\n\n\n5. Secret Management\nyaml\ndocker-compose with secrets\nversion: '3.8'\nservices:\n  app:\n    image: myapp\n    secrets:\n      - dbpassword\n      \nsecrets:\n  dbpassword:\n    file: ./secrets/dbpassword.txt\n\n\nMonitoring and Logging\n\nContainer Stats\nbash\nReal-time stats\ndocker stats\n\nOne-time stats\ndocker stats --no-stream\n\n\nLogging Drivers\njson\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  }\n}\n\n\nHealth Checks\ndockerfile\nHEALTHCHECK --interval=30s --timeout=3s \\\n  CMD curl -f http://localhost/health || exit 1\n\n\nUseful Tips\n\n1. Clean up resources\n   bash\n   docker system prune -a\n   \n\n2. Export/Import containers\n   bash\n   docker export container > backup.tar\n   docker import backup.tar\n   \n\n3. Save/Load images\n   bash\n   docker save -o myapp.tar myapp:latest\n   docker load -i myapp.tar\n   \n\n4. Debug containers\n   bash\n   docker run -it --rm --pid=container:myapp --cap-add SYSPTRACE alpine sh\n   \n\n5. Resource limits\n   bash\n   docker run -m 512m --cpus=\"1.5\" myapp\n    # Pull an image\ndocker pull nginx:latest\n\n# List images\ndocker images\n\n# Build an image\ndocker build -t myapp:1.0 .\n\n# Tag an image\ndocker tag myapp:1.0 myregistry/myapp:1.0\n\n# Push to registry\ndocker push myregistry/myapp:1.0\n\n# Remove an image\ndocker rmi myapp:1.0 # Run a container\ndocker run -d --name webserver -p 80:80 nginx\n\n# List running containers\ndocker ps\n\n# List all containers\ndocker ps -a\n\n# Stop a container\ndocker stop webserver\n\n# Start a container\ndocker start webserver\n\n# Remove a container\ndocker rm webserver\n\n# Execute command in running container\ndocker exec -it webserver bash\n\n# View logs\ndocker logs -f webserver # Stage 1: Build\nFROM node:16-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nRUN npm run build\n\n# Stage 2: Runtime\nFROM node:16-alpine\nWORKDIR /app\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodejs -u 1001\n\nCOPY --from=builder --chown=nodejs:nodejs /app/dist ./dist\nCOPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules\n\nUSER nodejs\nEXPOSE 3000\nCMD [\"node\", \"dist/index.js\"] FROM python:3.9-slim\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    APP_HOME=/app\n\n# Create app directory\nWORKDIR $APP_HOME\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application\nCOPY . .\n\n# Create non-root user\nRUN useradd -m -u 1001 appuser && chown -R appuser:appuser $APP_HOME\nUSER appuser\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD python -c \"import requests; requests.get('http://localhost:8000/health')\"\n\nEXPOSE 8000\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--workers\", \"4\", \"app:application\"] version: '3.8'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://user:pass@db:5432/myapp\n    depends_on:\n      - db\n      - redis\n    networks:\n      - app-network\n    volumes:\n      - ./uploads:/app/uploads\n    restart: unless-stopped\n\n  db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n      - POSTGRES_DB=myapp\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    networks:\n      - app-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U user\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis-data:/data\n    networks:\n      - app-network\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - web\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\n\nvolumes:\n  postgres-data:\n  redis-data: version: '3.8'\n\nservices:\n  dev:\n    build:\n      context: .\n      target: development\n    volumes:\n      - .:/app\n      - node_modules:/app/node_modules\n    ports:\n      - \"3000:3000\"\n      - \"9229:9229\"  # Node.js debugger\n    environment:\n      - NODE_ENV=development\n    command: npm run dev\n\nvolumes:\n  node_modules: # Create custom network\ndocker network create myapp-network\n\n# Run container in network\ndocker run -d --name app1 --network myapp-network myapp\n\n# Connect existing container to network\ndocker network connect myapp-network existing-container\n\n# Inspect network\ndocker network inspect myapp-network\n\n# List networks\ndocker network ls # Create named volume\ndocker volume create app-data\n\n# Run with volume\ndocker run -v app-data:/data myapp\n\n# Bind mount (development)\ndocker run -v $(pwd):/app myapp\n\n# List volumes\ndocker volume ls\n\n# Inspect volume\ndocker volume inspect app-data\n\n# Remove unused volumes\ndocker volume prune RUN adduser -D -u 1001 appuser\nUSER appuser # Use alpine or distroless\nFROM gcr.io/distroless/nodejs:16 # Using Docker Scout\ndocker scout quickview myapp:latest\n\n# Using Trivy\ntrivy image myapp:latest # docker-compose with secrets\nversion: '3.8'\nservices:\n  app:\n    image: myapp\n    secrets:\n      - db_password\n      \nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt # Real-time stats\ndocker stats\n\n# One-time stats\ndocker stats --no-stream {\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  }\n} HEALTHCHECK --interval=30s --timeout=3s \\\n  CMD curl -f http://localhost/health || exit 1 docker system prune -a docker export container > backup.tar\n   docker import backup.tar docker save -o myapp.tar myapp:latest\n   docker load -i myapp.tar docker run -it --rm --pid=container:myapp --cap-add SYS_PTRACE alpine sh docker run -m 512m --cpus=\"1.5\" myapp",
      "code_blocks_count": 20
    },
    {
      "path": "/notes/index.md",
      "context": null,
      "metadata": {
        "title": "Welcome to Notes Wiki",
        "tags": [
          "getting-started",
          "documentation",
          "wiki"
        ],
        "created": "2024-01-15",
        "author": "Wiki Admin",
        "description": "A self-contained notes and documentation system with advanced features like themes, search, and metadata support",
        "updated": "2024-01-15",
        "category": "documentation",
        "status": "published"
      },
      "content_preview": "Welcome to your new self-contained notes wiki! This system is designed to be hosted on GitLab Pages and provides a powerful, feature-rich documentation platform with no external dependencies.\n\n\n\nThis ...",
      "searchable_content": "\nWelcome to Notes Wiki\n\nWelcome to your new self-contained notes wiki! This system is designed to be hosted on GitLab Pages and provides a powerful, feature-rich documentation platform with no external dependencies.\n\n\ud83d\ude80 Getting Started\n\nThis wiki system offers a comprehensive set of features for managing and presenting your documentation:\n\n- \ud83d\udcdd Markdown-based - Write your notes in standard Markdown with YAML frontmatter\n- \ud83c\udfa8 15+ Built-in Themes - Including popular VSCode themes\n- \ud83d\udd0d Full-text Search - Search by title, content, tags, and metadata\n- \ud83c\udff7\ufe0f Tag System - Organize and filter notes by tags\n- \ud83d\udcca Recent Files Tracking - Quickly access your recently viewed notes\n- \ud83d\udd17 Direct Sharing Links - Share specific notes with direct URLs\n- \ud83d\udcf1 Responsive Design - Works perfectly on all devices\n- \ud83d\udda8\ufe0f Print-friendly - Optimized styles for printing\n\nKey Features\n\nWriting Notes\n\nAll notes are written in Markdown format with YAML frontmatter for metadata. Here's an example:\n\nyaml title:\"Note Template\"\n---\ntitle: Your Note Title\ntags: [tag1, tag2, tag3]\ncreated: 2024-01-15\nauthor: Your Name\ndescription: Brief description of your note\n---\n\nYour Content Here\n\nWrite your content using standard Markdown syntax...\n\n\nCode Blocks with Titles\n\nYou can add descriptive titles to your code blocks:\n\njavascript title:\"Example Function\"\nfunction greetUser(name) {\n    console.log(Hello, ${name}!);\n    return Welcome to the Notes Wiki;\n}\n\n\npython title:\"Data Processing Example\"\nimport pandas as pd\n\ndef processdata(filepath):\n    \"\"\"Process CSV data with pandas\"\"\"\n    df = pd.readcsv(filepath)\n    return df.describe()\n\n\nNavigation\n\n- Use the sidebar to browse through your folder structure\n- Click on tags to filter notes by topic\n- Access recent files from the dropdown in the header\n- Use the search feature (press /) to find notes quickly\n\nKeyboard Shortcuts\n\n| Shortcut | Action |\n|----------|--------|\n| / | Open search |\n| Esc | Close search/modals |\n| Ctrl+K | Quick navigation (coming soon) |\n| Ctrl+Shift+T | Open theme picker |\n\nURL Structure\n\nThe wiki supports various URL patterns for direct access:\n\n- Direct note links: #/notes/category/note-name\n- Tag filtered views: #/tags/javascript,performance\n- Search queries: #/search/your+search+term\n- Deep linking: #/notes/path/to/note#specific-heading\n\nThemes\n\nChoose from multiple themes to match your preference:\n\n- Light - Clean, bright theme for daytime use\n- Dark - Easy on the eyes for night-time reading\n- VSCode Themes - Popular themes from Visual Studio Code (coming soon)\n- Solarized - The classic color scheme (coming soon)\n- Dracula - Dark theme with vibrant colors (coming soon)\n\nAccess the theme picker using the sun/moon icon in the header.\n\nOrganization Tips\n\nUsing Tags Effectively\n\nTags help you categorize and quickly find related notes:\n\n- Use consistent tag naming (e.g., javascript not js)\n- Apply multiple tags for better categorization\n- Click tags to filter the navigation tree\n- Combine tags for more specific filtering\n\nFolder Structure\n\nOrganize your notes hierarchically:\n\n\nnotes/\n\u251c\u2500\u2500 personal/\n\u2502   \u251c\u2500\u2500 daily-notes.md\n\u2502   \u2514\u2500\u2500 ideas.md\n\u251c\u2500\u2500 technical/\n\u2502   \u251c\u2500\u2500 javascript/\n\u2502   \u2502   \u251c\u2500\u2500 tips.md\n\u2502   \u2502   \u2514\u2500\u2500 frameworks.md\n\u2502   \u2514\u2500\u2500 python/\n\u2502       \u2514\u2500\u2500 data-science.md\n\u2514\u2500\u2500 projects/\n    \u251c\u2500\u2500 project-1.md\n    \u2514\u2500\u2500 project-2.md\n\n\nAdvanced Features\n\nMetadata System\n\nEvery note can include rich metadata in the frontmatter:\n\n- title: The display title of your note\n- tags: Array of tags for categorization\n- created: Creation date (YYYY-MM-DD)\n- author: Note author's name\n- description: Brief summary for search results\n- updated: Last update date (optional)\n- category: Primary category (optional)\n- status: draft/published (optional)\n\nRecent Files\n\nThe system automatically tracks your recently viewed notes:\n\n- Access from the clock icon in the header\n- Shows up to 20 recent files (configurable)\n- Displays last viewed time\n- Can be cleared or disabled in settings\n\nShare Functionality\n\nEach note has a share button that:\n\n- Copies the direct link to your clipboard\n- Supports deep linking to headings\n- Works with all URL patterns\n- Shows confirmation when copied\n\nTechnical Details\n\nThis wiki is built with:\n\n- Pure JavaScript - No framework dependencies\n- Local Libraries - All dependencies included\n- GitLab Pages - Static hosting compatible\n- Service Worker - Offline support (coming soon)\n- Progressive Web App - Install as an app (coming soon)\n\nNext Steps\n\n1. Create your first note - Add a new .md file to the /notes directory\n2. Add frontmatter - Include metadata at the top of your file\n3. Commit and push - GitLab CI will build and deploy automatically\n4. Explore themes - Try different themes to find your favorite\n5. Organize with tags - Start building your tag taxonomy\n\nExample Content\n\nHere's a quick demonstration of various Markdown elements:\n\nLists\n\nUnordered List:\n- First item\n- Second item\n  - Nested item\n  - Another nested item\n- Third item\n\nOrdered List:\n1. First step\n2. Second step\n3. Third step\n\nBlockquotes\n\n> \"The best way to predict the future is to invent it.\"\n> \n> \u2014 Alan Kay\n\nTables\n\n| Feature | Description | Status |\n|---------|-------------|--------|\n| Themes | 15+ built-in themes | \u2705 Ready |\n| Search | Full-text search | \u2705 Ready |\n| Tags | Tag-based filtering | \u2705 Ready |\n| Recent Files | Track viewed notes | \u2705 Ready |\n\nTask Lists\n\n- [x] Set up GitLab repository\n- [x] Configure GitLab Pages\n- [ ] Add your first note\n- [ ] Customize themes\n- [ ] Invite collaborators\n\nInline Elements\n\nYou can use bold text, italic text, inline code, and strikethrough. You can also add links and keyboard shortcuts like <kbd>Ctrl</kbd>+<kbd>S</kbd>.\n\n---\n\nHappy documenting! \ud83c\udf89 yaml Note Template ---\ntitle: Your Note Title\ntags: [tag1, tag2, tag3]\ncreated: 2024-01-15\nauthor: Your Name\ndescription: Brief description of your note\n---\n\n# Your Content Here\n\nWrite your content using standard Markdown syntax... javascript Example Function function greetUser(name) {\n    console.log(`Hello, ${name}!`);\n    return `Welcome to the Notes Wiki`;\n} python Data Processing Example import pandas as pd\n\ndef process_data(file_path):\n    \"\"\"Process CSV data with pandas\"\"\"\n    df = pd.read_csv(file_path)\n    return df.describe() notes/\n\u251c\u2500\u2500 personal/\n\u2502   \u251c\u2500\u2500 daily-notes.md\n\u2502   \u2514\u2500\u2500 ideas.md\n\u251c\u2500\u2500 technical/\n\u2502   \u251c\u2500\u2500 javascript/\n\u2502   \u2502   \u251c\u2500\u2500 tips.md\n\u2502   \u2502   \u2514\u2500\u2500 frameworks.md\n\u2502   \u2514\u2500\u2500 python/\n\u2502       \u2514\u2500\u2500 data-science.md\n\u2514\u2500\u2500 projects/\n    \u251c\u2500\u2500 project-1.md\n    \u2514\u2500\u2500 project-2.md",
      "code_blocks_count": 4
    },
    {
      "path": "/notes/callouts-demo.md",
      "context": null,
      "metadata": {
        "title": "Callouts Demonstration",
        "tags": [
          "demo",
          "documentation",
          "callouts"
        ],
        "created": "2024-01-15",
        "author": "Wiki Admin",
        "description": "Demonstration of all available callout types and their usage",
        "updated": null,
        "category": null,
        "status": null
      },
      "content_preview": "This page demonstrates all available callout types in the wiki system. Callouts are special blockquotes that provide visual emphasis for important information.\n\n\n\nTo create a callout, use the followin...",
      "searchable_content": "\nCallouts Demonstration\n\nThis page demonstrates all available callout types in the wiki system. Callouts are special blockquotes that provide visual emphasis for important information.\n\nBasic Syntax\n\nTo create a callout, use the following syntax:\n\nmarkdown\n> [!TYPE] Optional Title\n> Content of the callout\n> Can span multiple lines\n\n\nAvailable Callout Types\n\nWarning\n\n> [!WARNING]\n> This is a warning callout. Use it to alert users about potential issues or dangerous operations.\n\n> [!WARNING] Custom Title Here\n> You can also provide a custom title for any callout type.\n\nInfo\n\n> [!INFO]\n> This is an info callout. Use it to provide additional information or context.\n\nTip\n\n> [!TIP]\n> This is a tip callout. Use it to share helpful advice or best practices.\n\nNote\n\n> [!NOTE]\n> This is a note callout. Use it for general notes or observations.\n\nDanger\n\n> [!DANGER]\n> This is a danger callout. Use it for critical warnings that require immediate attention.\n\nImportant\n\n> [!IMPORTANT]\n> This is an important callout. Use it to highlight crucial information.\n\nCaution\n\n> [!CAUTION]\n> This is a caution callout. Use it to advise users to proceed carefully.\n\nSuccess\n\n> [!SUCCESS]\n> This is a success callout. Use it to indicate successful operations or positive outcomes.\n\nQuestion\n\n> [!QUESTION]\n> This is a question callout. Use it to pose questions or highlight areas that need clarification.\n\nExample\n\n> [!EXAMPLE]\n> This is an example callout. Use it to provide examples or demonstrations.\n\nQuote\n\n> [!QUOTE]\n> This is a quote callout. Use it to highlight quotations or testimonials.\n\nBug\n\n> [!BUG]\n> This is a bug callout. Use it to document known issues or bugs.\n\nTodo\n\n> [!TODO]\n> This is a todo callout. Use it to track tasks or action items.\n\nAdvanced Usage\n\nCallouts with Complex Content\n\n> [!INFO] Callouts Support Rich Content\n> Callouts can contain various types of content:\n> - Lists like this one\n> - Bold text and italic text\n> - Links to other pages\n> \n> They can even contain code blocks:\n> javascript\n> console.log(\"Hello from a callout!\");\n> \n\nNested Callouts\n\n> [!WARNING] Parent Callout\n> This is the main callout.\n> \n> > [!INFO] Nested Callout\n> > Callouts can be nested inside other callouts for complex information hierarchy.\n\nMultiple Paragraphs\n\n> [!NOTE] Long Content Example\n> This is the first paragraph of the callout. It contains some introductory information.\n> \n> This is the second paragraph. Notice how the callout maintains proper spacing between paragraphs.\n> \n> And here's a third paragraph with a list:\n> 1. First item\n> 2. Second item\n> 3. Third item\n\nBest Practices\n\n> [!TIP] When to Use Callouts\n> - Use callouts sparingly to maintain their effectiveness\n> - Choose the appropriate type based on the content\n> - Keep callout content concise when possible\n> - Use custom titles to provide context\n\n> [!CAUTION] Avoid Overuse\n> Too many callouts on a single page can be overwhelming and reduce their impact. Use them strategically to highlight truly important information.\n\nTheme Compatibility\n\n> [!SUCCESS] Works with All Themes!\n> The callout system is designed to work seamlessly with all 15+ built-in themes. Colors and styles automatically adapt to maintain readability and visual consistency. > [!TYPE] Optional Title\n> Content of the callout\n> Can span multiple lines > console.log(\"Hello from a callout!\");\n>",
      "code_blocks_count": 2
    },
    {
      "path": "/notes/technical/programming/python-guide.md",
      "context": "technical",
      "metadata": {
        "title": "Python Best Practices Guide",
        "tags": [
          "python",
          "programming",
          "best-practices",
          "guide"
        ],
        "created": "2024-01-12",
        "author": "Maria Rodriguez",
        "description": "Comprehensive guide to Python best practices and patterns",
        "updated": "2024-03-01",
        "category": "technical",
        "status": "published"
      },
      "content_preview": "python\nimport this  # Run this to see the Zen of Python\n\n\n\n\n\n\n\n\n\n\n\nmyproject/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 mypackage/\n\u2502       \u251c\u2500\u2500 init.py\n\u2502       \u251c\u2500\u2500 core.py\n\u2502       \u2514\u2500\u2500 utils.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 init.py\n\u2502   \u2514\u2500...",
      "searchable_content": "\nPython Best Practices Guide\n\nCode Style and Structure\n\nThe Zen of Python\n\npython\nimport this  # Run this to see the Zen of Python\n\nKey principles:\n- Explicit is better than implicit\n- Simple is better than complex\n- Readability counts\n- There should be one-- and preferably only one --obvious way to do it\n\n\nProject Structure\n\n\nmyproject/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 mypackage/\n\u2502       \u251c\u2500\u2500 init.py\n\u2502       \u251c\u2500\u2500 core.py\n\u2502       \u2514\u2500\u2500 utils.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 init.py\n\u2502   \u2514\u2500\u2500 testcore.py\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 .gitignore\n\n\nType Hints and Annotations\n\npython\nfrom typing import List, Dict, Optional, Union, Tuple, Callable\nfrom dataclasses import dataclass\n\nFunction with type hints\ndef processdata(\n    items: List[str],\n    transform: Callable[[str], str],\n    maxlength: Optional[int] = None\n) -> Dict[str, int]:\n    \"\"\"Process list of items and return frequency count.\"\"\"\n    result: Dict[str, int] = {}\n    \n    for item in items:\n        processed = transform(item)\n        if maxlength and len(processed) > maxlength:\n            processed = processed[:maxlength]\n        result[processed] = result.get(processed, 0) + 1\n    \n    return result\n\nDataclass with type hints\n@dataclass\nclass User:\n    name: str\n    email: str\n    age: int\n    isactive: bool = True\n    tags: List[str] = None\n    \n    def postinit(self):\n        if self.tags is None:\n            self.tags = []\n\n\nContext Managers\n\npython\nfrom contextlib import contextmanager\nimport time\n\nCustom context manager using decorator\n@contextmanager\ndef timer(name: str):\n    \"\"\"Time a block of code.\"\"\"\n    start = time.time()\n    try:\n        yield\n    finally:\n        end = time.time()\n        print(f\"{name} took {end - start:.2f} seconds\")\n\nClass-based context manager\nclass DatabaseConnection:\n    def init(self, connectionstring: str):\n        self.connectionstring = connectionstring\n        self.connection = None\n    \n    def enter(self):\n        print(f\"Connecting to {self.connectionstring}\")\n        self.connection = self.connect()\n        return self.connection\n    \n    def exit(self, exctype, excval, exctb):\n        print(\"Closing connection\")\n        if self.connection:\n            self.connection.close()\n        if exctype:\n            print(f\"Error occurred: {excval}\")\n        return False  # Don't suppress exceptions\n    \n    def connect(self):\n        # Simulate connection\n        return {\"connected\": True}\n\nUsage\nwith timer(\"Data processing\"):\n    with DatabaseConnection(\"postgresql://localhost/mydb\") as conn:\n        # Process data\n        time.sleep(1)\n\n\nDecorators\n\npython\nimport functools\nimport logging\nfrom typing import Any, Callable\n\nLogging decorator\ndef logcalls(func: Callable) -> Callable:\n    \"\"\"Log function calls with arguments and return value.\"\"\"\n    @functools.wraps(func)\n    def wrapper(args, kwargs):\n        argsrepr = [repr(a) for a in args]\n        kwargsrepr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\n        signature = \", \".join(argsrepr + kwargsrepr)\n        \n        logging.info(f\"Calling {func.name}({signature})\")\n        try:\n            result = func(args, kwargs)\n            logging.info(f\"{func.name} returned {result!r}\")\n            return result\n        except Exception as e:\n            logging.error(f\"{func.name} raised {e!r}\")\n            raise\n    \n    return wrapper\n\nMemoization decorator\ndef memoize(func: Callable) -> Callable:\n    \"\"\"Cache function results.\"\"\"\n    cache = {}\n    \n    @functools.wraps(func)\n    def wrapper(args, kwargs):\n        key = str(args) + str(kwargs)\n        if key not in cache:\n            cache[key] = func(args, kwargs)\n        return cache[key]\n    \n    wrapper.cacheclear = cache.clear\n    return wrapper\n\nRetry decorator\ndef retry(maxattempts: int = 3, delay: float = 1.0):\n    \"\"\"Retry function on exception.\"\"\"\n    def decorator(func: Callable) -> Callable:\n        @functools.wraps(func)\n        def wrapper(args, kwargs):\n            for attempt in range(maxattempts):\n                try:\n                    return func(args, kwargs)\n                except Exception as e:\n                    if attempt == maxattempts - 1:\n                        raise\n                    print(f\"Attempt {attempt + 1} failed: {e}\")\n                    time.sleep(delay  (2  attempt))  # Exponential backoff\n        \n        return wrapper\n    return decorator\n\n\nError Handling\n\npython\nclass ValidationError(Exception):\n    \"\"\"Custom validation error.\"\"\"\n    pass\n\nclass APIError(Exception):\n    \"\"\"API-related errors.\"\"\"\n    def init(self, message: str, statuscode: int):\n        super().init(message)\n        self.statuscode = statuscode\n\ndef validateemail(email: str) -> str:\n    \"\"\"Validate email format.\"\"\"\n    import re\n    \n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    if not re.match(pattern, email):\n        raise ValidationError(f\"Invalid email format: {email}\")\n    \n    return email.lower()\n\nError handling patterns\ndef safedivide(a: float, b: float) -> Optional[float]:\n    \"\"\"Safely divide two numbers.\"\"\"\n    try:\n        return a / b\n    except ZeroDivisionError:\n        logging.warning(\"Division by zero attempted\")\n        return None\n    except TypeError as e:\n        logging.error(f\"Type error in division: {e}\")\n        raise\n\n\nGenerators and Iterators\n\npython\nfrom typing import Generator, Iterator\nimport os\n\nGenerator for reading large files\ndef readlargefile(filepath: str, chunksize: int = 1024) -> Generator[str, None, None]:\n    \"\"\"Read large file in chunks.\"\"\"\n    with open(filepath, 'r') as file:\n        while True:\n            chunk = file.read(chunksize)\n            if not chunk:\n                break\n            yield chunk\n\nGenerator with send() support\ndef runningaverage() -> Generator[float, float, None]:\n    \"\"\"Calculate running average of sent values.\"\"\"\n    total = 0.0\n    count = 0\n    average = 0.0\n    \n    while True:\n        value = yield average\n        if value is not None:\n            total += value\n            count += 1\n            average = total / count\n\nCustom iterator class\nclass Fibonacci:\n    \"\"\"Fibonacci sequence iterator.\"\"\"\n    def init(self, maxcount: int):\n        self.maxcount = maxcount\n        self.count = 0\n        self.current = 0\n        self.next = 1\n    \n    def iter(self):\n        return self\n    \n    def next(self):\n        if self.count >= self.maxcount:\n            raise StopIteration\n        \n        result = self.current\n        self.current, self.next = self.next, self.current + self.next\n        self.count += 1\n        return result\n\n\nAsync Programming\n\npython\nimport asyncio\nfrom typing import List\nimport aiohttp\n\nAsync function with error handling\nasync def fetchurl(session: aiohttp.ClientSession, url: str) -> Dict[str, Any]:\n    \"\"\"Fetch URL asynchronously.\"\"\"\n    try:\n        async with session.get(url) as response:\n            return {\n                'url': url,\n                'status': response.status,\n                'data': await response.text()\n            }\n    except Exception as e:\n        return {\n            'url': url,\n            'error': str(e)\n        }\n\nConcurrent execution\nasync def fetchmultipleurls(urls: List[str]) -> List[Dict[str, Any]]:\n    \"\"\"Fetch multiple URLs concurrently.\"\"\"\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetchurl(session, url) for url in urls]\n        return await asyncio.gather(tasks)\n\nAsync context manager\nclass AsyncDatabase:\n    async def aenter(self):\n        await self.connect()\n        return self\n    \n    async def aexit(self, exctype, excval, exctb):\n        await self.disconnect()\n    \n    async def connect(self):\n        await asyncio.sleep(0.1)  # Simulate connection\n        print(\"Connected to database\")\n    \n    async def disconnect(self):\n        await asyncio.sleep(0.1)  # Simulate disconnection\n        print(\"Disconnected from database\")\n\n\nTesting Best Practices\n\npython\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom dataclasses import dataclass\n\nFixtures\n@pytest.fixture\ndef sampleuser():\n    return User(name=\"Test User\", email=\"test@example.com\", age=25)\n\nParameterized tests\n@pytest.mark.parametrize(\"inputvalue,expected\", [\n    (\"hello\", \"HELLO\"),\n    (\"World\", \"WORLD\"),\n    (\"123\", \"123\"),\n    (\"\", \"\"),\n])\ndef testuppercase(inputvalue, expected):\n    assert inputvalue.upper() == expected\n\nTesting with mocks\ndef testapicall():\n    with patch('requests.get') as mockget:\n        mockget.returnvalue.json.returnvalue = {'status': 'ok'}\n        \n        # Your test code here\n        result = makeapicall('https://api.example.com')\n        \n        assert result['status'] == 'ok'\n        mockget.assertcalledoncewith('https://api.example.com')\n\n\nPerformance Tips\n\n1. Use list comprehensions instead of loops when possible\n2. Use generators for large datasets\n3. Profile your code with cProfile or lineprofiler\n4. Use slots in classes to reduce memory usage\n5. Leverage built-in functions like map(), filter(), zip()\n6. Use collections.deque for queue operations\n7. Consider numpy for numerical computations import this  # Run this to see the Zen of Python\n\n# Key principles:\n# - Explicit is better than implicit\n# - Simple is better than complex\n# - Readability counts\n# - There should be one-- and preferably only one --obvious way to do it my_project/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 my_package/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 core.py\n\u2502       \u2514\u2500\u2500 utils.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_core.py\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 .gitignore from typing import List, Dict, Optional, Union, Tuple, Callable\nfrom dataclasses import dataclass\n\n# Function with type hints\ndef process_data(\n    items: List[str],\n    transform: Callable[[str], str],\n    max_length: Optional[int] = None\n) -> Dict[str, int]:\n    \"\"\"Process list of items and return frequency count.\"\"\"\n    result: Dict[str, int] = {}\n    \n    for item in items:\n        processed = transform(item)\n        if max_length and len(processed) > max_length:\n            processed = processed[:max_length]\n        result[processed] = result.get(processed, 0) + 1\n    \n    return result\n\n# Dataclass with type hints\n@dataclass\nclass User:\n    name: str\n    email: str\n    age: int\n    is_active: bool = True\n    tags: List[str] = None\n    \n    def __post_init__(self):\n        if self.tags is None:\n            self.tags = [] from contextlib import contextmanager\nimport time\n\n# Custom context manager using decorator\n@contextmanager\ndef timer(name: str):\n    \"\"\"Time a block of code.\"\"\"\n    start = time.time()\n    try:\n        yield\n    finally:\n        end = time.time()\n        print(f\"{name} took {end - start:.2f} seconds\")\n\n# Class-based context manager\nclass DatabaseConnection:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n        self.connection = None\n    \n    def __enter__(self):\n        print(f\"Connecting to {self.connection_string}\")\n        self.connection = self._connect()\n        return self.connection\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"Closing connection\")\n        if self.connection:\n            self.connection.close()\n        if exc_type:\n            print(f\"Error occurred: {exc_val}\")\n        return False  # Don't suppress exceptions\n    \n    def _connect(self):\n        # Simulate connection\n        return {\"connected\": True}\n\n# Usage\nwith timer(\"Data processing\"):\n    with DatabaseConnection(\"postgresql://localhost/mydb\") as conn:\n        # Process data\n        time.sleep(1) import functools\nimport logging\nfrom typing import Any, Callable\n\n# Logging decorator\ndef log_calls(func: Callable) -> Callable:\n    \"\"\"Log function calls with arguments and return value.\"\"\"\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        args_repr = [repr(a) for a in args]\n        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\n        signature = \", \".join(args_repr + kwargs_repr)\n        \n        logging.info(f\"Calling {func.__name__}({signature})\")\n        try:\n            result = func(*args, **kwargs)\n            logging.info(f\"{func.__name__} returned {result!r}\")\n            return result\n        except Exception as e:\n            logging.error(f\"{func.__name__} raised {e!r}\")\n            raise\n    \n    return wrapper\n\n# Memoization decorator\ndef memoize(func: Callable) -> Callable:\n    \"\"\"Cache function results.\"\"\"\n    cache = {}\n    \n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        key = str(args) + str(kwargs)\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n    \n    wrapper.cache_clear = cache.clear\n    return wrapper\n\n# Retry decorator\ndef retry(max_attempts: int = 3, delay: float = 1.0):\n    \"\"\"Retry function on exception.\"\"\"\n    def decorator(func: Callable) -> Callable:\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f\"Attempt {attempt + 1} failed: {e}\")\n                    time.sleep(delay * (2 ** attempt))  # Exponential backoff\n        \n        return wrapper\n    return decorator class ValidationError(Exception):\n    \"\"\"Custom validation error.\"\"\"\n    pass\n\nclass APIError(Exception):\n    \"\"\"API-related errors.\"\"\"\n    def __init__(self, message: str, status_code: int):\n        super().__init__(message)\n        self.status_code = status_code\n\ndef validate_email(email: str) -> str:\n    \"\"\"Validate email format.\"\"\"\n    import re\n    \n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    if not re.match(pattern, email):\n        raise ValidationError(f\"Invalid email format: {email}\")\n    \n    return email.lower()\n\n# Error handling patterns\ndef safe_divide(a: float, b: float) -> Optional[float]:\n    \"\"\"Safely divide two numbers.\"\"\"\n    try:\n        return a / b\n    except ZeroDivisionError:\n        logging.warning(\"Division by zero attempted\")\n        return None\n    except TypeError as e:\n        logging.error(f\"Type error in division: {e}\")\n        raise from typing import Generator, Iterator\nimport os\n\n# Generator for reading large files\ndef read_large_file(file_path: str, chunk_size: int = 1024) -> Generator[str, None, None]:\n    \"\"\"Read large file in chunks.\"\"\"\n    with open(file_path, 'r') as file:\n        while True:\n            chunk = file.read(chunk_size)\n            if not chunk:\n                break\n            yield chunk\n\n# Generator with send() support\ndef running_average() -> Generator[float, float, None]:\n    \"\"\"Calculate running average of sent values.\"\"\"\n    total = 0.0\n    count = 0\n    average = 0.0\n    \n    while True:\n        value = yield average\n        if value is not None:\n            total += value\n            count += 1\n            average = total / count\n\n# Custom iterator class\nclass Fibonacci:\n    \"\"\"Fibonacci sequence iterator.\"\"\"\n    def __init__(self, max_count: int):\n        self.max_count = max_count\n        self.count = 0\n        self.current = 0\n        self.next = 1\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.count >= self.max_count:\n            raise StopIteration\n        \n        result = self.current\n        self.current, self.next = self.next, self.current + self.next\n        self.count += 1\n        return result import asyncio\nfrom typing import List\nimport aiohttp\n\n# Async function with error handling\nasync def fetch_url(session: aiohttp.ClientSession, url: str) -> Dict[str, Any]:\n    \"\"\"Fetch URL asynchronously.\"\"\"\n    try:\n        async with session.get(url) as response:\n            return {\n                'url': url,\n                'status': response.status,\n                'data': await response.text()\n            }\n    except Exception as e:\n        return {\n            'url': url,\n            'error': str(e)\n        }\n\n# Concurrent execution\nasync def fetch_multiple_urls(urls: List[str]) -> List[Dict[str, Any]]:\n    \"\"\"Fetch multiple URLs concurrently.\"\"\"\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch_url(session, url) for url in urls]\n        return await asyncio.gather(*tasks)\n\n# Async context manager\nclass AsyncDatabase:\n    async def __aenter__(self):\n        await self.connect()\n        return self\n    \n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.disconnect()\n    \n    async def connect(self):\n        await asyncio.sleep(0.1)  # Simulate connection\n        print(\"Connected to database\")\n    \n    async def disconnect(self):\n        await asyncio.sleep(0.1)  # Simulate disconnection\n        print(\"Disconnected from database\") import pytest\nfrom unittest.mock import Mock, patch\nfrom dataclasses import dataclass\n\n# Fixtures\n@pytest.fixture\ndef sample_user():\n    return User(name=\"Test User\", email=\"test@example.com\", age=25)\n\n# Parameterized tests\n@pytest.mark.parametrize(\"input_value,expected\", [\n    (\"hello\", \"HELLO\"),\n    (\"World\", \"WORLD\"),\n    (\"123\", \"123\"),\n    (\"\", \"\"),\n])\ndef test_uppercase(input_value, expected):\n    assert input_value.upper() == expected\n\n# Testing with mocks\ndef test_api_call():\n    with patch('requests.get') as mock_get:\n        mock_get.return_value.json.return_value = {'status': 'ok'}\n        \n        # Your test code here\n        result = make_api_call('https://api.example.com')\n        \n        assert result['status'] == 'ok'\n        mock_get.assert_called_once_with('https://api.example.com')",
      "code_blocks_count": 9
    },
    {
      "path": "/notes/technical/javascript-tips.md",
      "context": "technical",
      "metadata": {
        "title": "JavaScript Tips and Tricks",
        "tags": [
          "javascript",
          "programming",
          "web-development",
          "tips"
        ],
        "created": "2024-01-10",
        "author": "Alex Chen",
        "description": "Useful JavaScript patterns, tips, and best practices",
        "updated": "2024-02-28",
        "category": "technical",
        "status": "published"
      },
      "content_preview": "javascript\n// Object destructuring with renaming and defaults\nconst user = { name: 'Alice', age: 30 };\nconst { name: userName, age, role = 'user' } = user;\n\n// Array destructuring with skip\nconst [fir...",
      "searchable_content": "\nJavaScript Tips and Tricks\n\nModern JavaScript Features\n\nDestructuring Magic \u2728\n\njavascript\n// Object destructuring with renaming and defaults\nconst user = { name: 'Alice', age: 30 };\nconst { name: userName, age, role = 'user' } = user;\n\n// Array destructuring with skip\nconst [first, , third] = [1, 2, 3];\n\n// Nested destructuring\nconst data = {\n    user: {\n        profile: {\n            name: 'Bob',\n            settings: { theme: 'dark' }\n        }\n    }\n};\nconst { user: { profile: { name, settings: { theme } } } } = data;\n\n\nAsync/Await Patterns\n\njavascript\n// Parallel execution\nasync function fetchMultiple() {\n    const [users, posts, comments] = await Promise.all([\n        fetch('/api/users').then(r => r.json()),\n        fetch('/api/posts').then(r => r.json()),\n        fetch('/api/comments').then(r => r.json())\n    ]);\n    \n    return { users, posts, comments };\n}\n\n// Error handling with async/await\nasync function safeApiCall(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(HTTP error! status: ${response.status});\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('API call failed:', error);\n        return { error: error.message };\n    }\n}\n\n// Retry pattern\nasync function fetchWithRetry(url, retries = 3) {\n    for (let i = 0; i < retries; i++) {\n        try {\n            return await fetch(url);\n        } catch (error) {\n            if (i === retries - 1) throw error;\n            await new Promise(resolve => setTimeout(resolve, 1000  Math.pow(2, i)));\n        }\n    }\n}\n\n\nPerformance Optimization\n\nDebounce and Throttle\n\njavascript\n// Debounce - delays execution until after wait time\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Throttle - limits execution to once per wait time\nfunction throttle(func, limit) {\n    let inThrottle;\n    return function(...args) {\n        if (!inThrottle) {\n            func.apply(this, args);\n            inThrottle = true;\n            setTimeout(() => inThrottle = false, limit);\n        }\n    };\n}\n\n// Usage\nconst searchInput = document.getElementById('search');\nsearchInput.addEventListener('input', debounce(handleSearch, 300));\n\nwindow.addEventListener('scroll', throttle(handleScroll, 100));\n\n\nMemoization\n\njavascript\n// Simple memoization\nfunction memoize(fn) {\n    const cache = new Map();\n    return function(...args) {\n        const key = JSON.stringify(args);\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        const result = fn.apply(this, args);\n        cache.set(key, result);\n        return result;\n    };\n}\n\n// Example: Fibonacci with memoization\nconst fibonacci = memoize((n) => {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n});\n\n\nUseful Utilities\n\nDeep Clone\n\njavascript\n// Deep clone using structured clone (modern browsers)\nconst deepClone = (obj) => structuredClone(obj);\n\n// Fallback for older browsers\nfunction deepCloneFallback(obj) {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (obj instanceof Date) return new Date(obj.getTime());\n    if (obj instanceof Array) return obj.map(item => deepCloneFallback(item));\n    if (obj instanceof Object) {\n        const cloned = {};\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                cloned[key] = deepCloneFallback(obj[key]);\n            }\n        }\n        return cloned;\n    }\n}\n\n\nType Checking\n\njavascript\n// Robust type checking\nconst typeCheck = {\n    isArray: Array.isArray,\n    isObject: (val) => val !== null && typeof val === 'object' && !Array.isArray(val),\n    isFunction: (val) => typeof val === 'function',\n    isString: (val) => typeof val === 'string',\n    isNumber: (val) => typeof val === 'number' && !isNaN(val),\n    isBoolean: (val) => typeof val === 'boolean',\n    isNull: (val) => val === null,\n    isUndefined: (val) => val === undefined,\n    isPromise: (val) => val instanceof Promise || (val && typeof val.then === 'function')\n};\n\n\nArray Methods Mastery\n\nAdvanced Array Operations\n\njavascript\n// Group by property\nconst groupBy = (arr, key) => {\n    return arr.reduce((acc, item) => {\n        const group = item[key];\n        acc[group] = acc[group] ?? [];\n        acc[group].push(item);\n        return acc;\n    }, {});\n};\n\n// Unique values\nconst unique = (arr) => [...new Set(arr)];\n\n// Flatten nested arrays\nconst flatten = (arr, depth = 1) => {\n    return depth > 0\n        ? arr.reduce((acc, val) => \n            acc.concat(Array.isArray(val) ? flatten(val, depth - 1) : val), [])\n        : arr.slice();\n};\n\n// Chunk array\nconst chunk = (arr, size) => {\n    return Array.from({ length: Math.ceil(arr.length / size) }, (, i) =>\n        arr.slice(i  size, i  size + size)\n    );\n};\n\n\nBrowser APIs\n\nIntersection Observer\n\njavascript\n// Lazy loading images\nconst lazyImageObserver = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            const img = entry.target;\n            img.src = img.dataset.src;\n            img.classList.add('loaded');\n            lazyImageObserver.unobserve(img);\n        }\n    });\n});\n\ndocument.querySelectorAll('img[data-src]').forEach(img => {\n    lazyImageObserver.observe(img);\n});\n\n\nWeb Storage with Expiry\n\njavascript\n// LocalStorage with expiration\nconst storage = {\n    set(key, value, expiryMinutes) {\n        const now = new Date();\n        const item = {\n            value: value,\n            expiry: expiryMinutes ? now.getTime() + expiryMinutes  60000 : null\n        };\n        localStorage.setItem(key, JSON.stringify(item));\n    },\n    \n    get(key) {\n        const itemStr = localStorage.getItem(key);\n        if (!itemStr) return null;\n        \n        const item = JSON.parse(itemStr);\n        const now = new Date();\n        \n        if (item.expiry && now.getTime() > item.expiry) {\n            localStorage.removeItem(key);\n            return null;\n        }\n        \n        return item.value;\n    }\n};\n\n\nQuick Tips\n\n1. Use optional chaining: user?.profile?.name ?? 'Anonymous'\n2. Convert NodeList to Array: [...document.querySelectorAll('.item')]\n3. Dynamic property names: { [key]: value }\n4. Tagged template literals for custom string processing\n5. WeakMap for private properties in classes\n6. Proxy for reactive objects\n7. Generator functions for custom iterables // Object destructuring with renaming and defaults\nconst user = { name: 'Alice', age: 30 };\nconst { name: userName, age, role = 'user' } = user;\n\n// Array destructuring with skip\nconst [first, , third] = [1, 2, 3];\n\n// Nested destructuring\nconst data = {\n    user: {\n        profile: {\n            name: 'Bob',\n            settings: { theme: 'dark' }\n        }\n    }\n};\nconst { user: { profile: { name, settings: { theme } } } } = data; // Parallel execution\nasync function fetchMultiple() {\n    const [users, posts, comments] = await Promise.all([\n        fetch('/api/users').then(r => r.json()),\n        fetch('/api/posts').then(r => r.json()),\n        fetch('/api/comments').then(r => r.json())\n    ]);\n    \n    return { users, posts, comments };\n}\n\n// Error handling with async/await\nasync function safeApiCall(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('API call failed:', error);\n        return { error: error.message };\n    }\n}\n\n// Retry pattern\nasync function fetchWithRetry(url, retries = 3) {\n    for (let i = 0; i < retries; i++) {\n        try {\n            return await fetch(url);\n        } catch (error) {\n            if (i === retries - 1) throw error;\n            await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, i)));\n        }\n    }\n} // Debounce - delays execution until after wait time\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Throttle - limits execution to once per wait time\nfunction throttle(func, limit) {\n    let inThrottle;\n    return function(...args) {\n        if (!inThrottle) {\n            func.apply(this, args);\n            inThrottle = true;\n            setTimeout(() => inThrottle = false, limit);\n        }\n    };\n}\n\n// Usage\nconst searchInput = document.getElementById('search');\nsearchInput.addEventListener('input', debounce(handleSearch, 300));\n\nwindow.addEventListener('scroll', throttle(handleScroll, 100)); // Simple memoization\nfunction memoize(fn) {\n    const cache = new Map();\n    return function(...args) {\n        const key = JSON.stringify(args);\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        const result = fn.apply(this, args);\n        cache.set(key, result);\n        return result;\n    };\n}\n\n// Example: Fibonacci with memoization\nconst fibonacci = memoize((n) => {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}); // Deep clone using structured clone (modern browsers)\nconst deepClone = (obj) => structuredClone(obj);\n\n// Fallback for older browsers\nfunction deepCloneFallback(obj) {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (obj instanceof Date) return new Date(obj.getTime());\n    if (obj instanceof Array) return obj.map(item => deepCloneFallback(item));\n    if (obj instanceof Object) {\n        const cloned = {};\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                cloned[key] = deepCloneFallback(obj[key]);\n            }\n        }\n        return cloned;\n    }\n} // Robust type checking\nconst typeCheck = {\n    isArray: Array.isArray,\n    isObject: (val) => val !== null && typeof val === 'object' && !Array.isArray(val),\n    isFunction: (val) => typeof val === 'function',\n    isString: (val) => typeof val === 'string',\n    isNumber: (val) => typeof val === 'number' && !isNaN(val),\n    isBoolean: (val) => typeof val === 'boolean',\n    isNull: (val) => val === null,\n    isUndefined: (val) => val === undefined,\n    isPromise: (val) => val instanceof Promise || (val && typeof val.then === 'function')\n}; // Group by property\nconst groupBy = (arr, key) => {\n    return arr.reduce((acc, item) => {\n        const group = item[key];\n        acc[group] = acc[group] ?? [];\n        acc[group].push(item);\n        return acc;\n    }, {});\n};\n\n// Unique values\nconst unique = (arr) => [...new Set(arr)];\n\n// Flatten nested arrays\nconst flatten = (arr, depth = 1) => {\n    return depth > 0\n        ? arr.reduce((acc, val) => \n            acc.concat(Array.isArray(val) ? flatten(val, depth - 1) : val), [])\n        : arr.slice();\n};\n\n// Chunk array\nconst chunk = (arr, size) => {\n    return Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>\n        arr.slice(i * size, i * size + size)\n    );\n}; // Lazy loading images\nconst lazyImageObserver = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            const img = entry.target;\n            img.src = img.dataset.src;\n            img.classList.add('loaded');\n            lazyImageObserver.unobserve(img);\n        }\n    });\n});\n\ndocument.querySelectorAll('img[data-src]').forEach(img => {\n    lazyImageObserver.observe(img);\n}); // LocalStorage with expiration\nconst storage = {\n    set(key, value, expiryMinutes) {\n        const now = new Date();\n        const item = {\n            value: value,\n            expiry: expiryMinutes ? now.getTime() + expiryMinutes * 60000 : null\n        };\n        localStorage.setItem(key, JSON.stringify(item));\n    },\n    \n    get(key) {\n        const itemStr = localStorage.getItem(key);\n        if (!itemStr) return null;\n        \n        const item = JSON.parse(itemStr);\n        const now = new Date();\n        \n        if (item.expiry && now.getTime() > item.expiry) {\n            localStorage.removeItem(key);\n            return null;\n        }\n        \n        return item.value;\n    }\n};",
      "code_blocks_count": 9
    },
    {
      "path": "/notes/reference/git-commands.md",
      "context": "reference",
      "metadata": {
        "title": "Git Commands Reference",
        "tags": [
          "git",
          "version-control",
          "reference",
          "commands"
        ],
        "created": "2024-01-08",
        "author": "DevOps Team",
        "description": "Comprehensive Git command reference with examples",
        "updated": "2024-03-05",
        "category": "reference",
        "status": "published"
      },
      "content_preview": "bash\n\ngit config --global user.name \"John Doe\"\ngit config --global user.email \"john@example.com\"\n\n\ngit config --global core.editor \"vim\"\n\n\ngit config --global color.ui auto\n\n\ngit config --list\n\n\ngit c...",
      "searchable_content": "\nGit Commands Reference\n\nBasic Commands\n\nConfiguration\nbash\nSet user information\ngit config --global user.name \"John Doe\"\ngit config --global user.email \"john@example.com\"\n\nSet default editor\ngit config --global core.editor \"vim\"\n\nEnable color output\ngit config --global color.ui auto\n\nList all configurations\ngit config --list\n\nGet specific config value\ngit config user.name\n\n\nRepository Initialization\nbash\nInitialize new repository\ngit init\n\nClone existing repository\ngit clone https://github.com/user/repo.git\n\nClone with specific branch\ngit clone -b develop https://github.com/user/repo.git\n\nClone with depth (shallow clone)\ngit clone --depth 1 https://github.com/user/repo.git\n\n\nWorking with Changes\n\nStatus and Differences\nbash\nCheck status\ngit status\n\nShort status\ngit status -s\n\nShow changes in working directory\ngit diff\n\nShow staged changes\ngit diff --staged\n\nShow changes between commits\ngit diff commit1 commit2\n\nShow changes for specific file\ngit diff HEAD -- path/to/file\n\n\nStaging and Committing\nbash\nStage specific files\ngit add file1.txt file2.txt\n\nStage all changes\ngit add .\n\nStage parts of files interactively\ngit add -p\n\nCommit with message\ngit commit -m \"Add new feature\"\n\nCommit with detailed message\ngit commit\n\nAmend last commit\ngit commit --amend\n\nCommit with specific author\ngit commit --author=\"Name <email@example.com>\"\n\n\nBranching and Merging\n\nBranch Management\nbash\nList branches\ngit branch\n\nList all branches (including remote)\ngit branch -a\n\nCreate new branch\ngit branch feature-branch\n\nCreate and switch to branch\ngit checkout -b feature-branch\n\nSwitch branches\ngit checkout main\n\nDelete branch\ngit branch -d feature-branch\n\nForce delete branch\ngit branch -D feature-branch\n\nRename branch\ngit branch -m old-name new-name\n\n\nMerging\nbash\nMerge branch into current branch\ngit merge feature-branch\n\nMerge with no fast-forward\ngit merge --no-ff feature-branch\n\nAbort merge\ngit merge --abort\n\nContinue merge after conflicts\ngit merge --continue\n\n\nRebasing\nbash\nRebase current branch onto main\ngit rebase main\n\nInteractive rebase\ngit rebase -i HEAD3\n\nContinue rebase after conflicts\ngit rebase --continue\n\nAbort rebase\ngit rebase --abort\n\nSkip current commit during rebase\ngit rebase --skip\n\n\nRemote Repositories\n\nRemote Management\nbash\nList remotes\ngit remote -v\n\nAdd remote\ngit remote add origin https://github.com/user/repo.git\n\nRemove remote\ngit remote remove origin\n\nRename remote\ngit remote rename origin upstream\n\nShow remote details\ngit remote show origin\n\n\nPushing and Pulling\nbash\nPush to remote\ngit push origin main\n\nPush and set upstream\ngit push -u origin feature-branch\n\nForce push (use with caution!)\ngit push --force\n\nPush tags\ngit push --tags\n\nPull from remote\ngit pull origin main\n\nPull with rebase\ngit pull --rebase\n\nFetch without merging\ngit fetch origin\n\nFetch all remotes\ngit fetch --all\n\n\nHistory and Logs\n\nViewing History\nbash\nShow commit logs\ngit log\n\nOne line per commit\ngit log --oneline\n\nShow graph\ngit log --graph --oneline --all\n\nShow commits by author\ngit log --author=\"John\"\n\nShow commits since date\ngit log --since=\"2024-01-01\"\n\nShow commits with changes\ngit log -p\n\nShow file history\ngit log --follow path/to/file\n\nCustom format\ngit log --pretty=format:\"%h - %an, %ar : %s\"\n\n\nSearching\nbash\nSearch commit messages\ngit log --grep=\"fix\"\n\nSearch code changes\ngit log -S \"functionname\"\n\nFind commits that changed specific lines\ngit blame path/to/file\n\nBinary search for bug\ngit bisect start\ngit bisect bad\ngit bisect good commit-hash\n\n\nUndoing Changes\n\nReset and Revert\nbash\nUnstage files\ngit reset HEAD file.txt\n\nReset to previous commit (keep changes)\ngit reset --soft HEAD1\n\nReset to previous commit (discard changes)\ngit reset --hard HEAD1\n\nReset specific file to HEAD\ngit checkout -- file.txt\n\nCreate revert commit\ngit revert commit-hash\n\nRevert without committing\ngit revert -n commit-hash\n\n\nStashing\nbash\nStash changes\ngit stash\n\nStash with message\ngit stash save \"Work in progress\"\n\nList stashes\ngit stash list\n\nApply latest stash\ngit stash apply\n\nApply specific stash\ngit stash apply stash@{2}\n\nPop latest stash\ngit stash pop\n\nDrop stash\ngit stash drop stash@{1}\n\nClear all stashes\ngit stash clear\n\n\nAdvanced Commands\n\nCherry-picking\nbash\nApply specific commit\ngit cherry-pick commit-hash\n\nCherry-pick range\ngit cherry-pick commit1..commit2\n\nCherry-pick without committing\ngit cherry-pick -n commit-hash\n\n\nSubmodules\nbash\nAdd submodule\ngit submodule add https://github.com/user/repo.git path/to/submodule\n\nInitialize submodules\ngit submodule init\n\nUpdate submodules\ngit submodule update\n\nClone with submodules\ngit clone --recurse-submodules https://github.com/user/repo.git\n\n\nWorktrees\nbash\nAdd worktree\ngit worktree add ../feature-branch feature-branch\n\nList worktrees\ngit worktree list\n\nRemove worktree\ngit worktree remove ../feature-branch\n\n\nGit Aliases\n\nbash\nCommon aliases\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\n\nComplex aliases\ngit config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\ngit config --global alias.undo \"reset --soft HEAD1\"\n\ngit config --global alias.last \"log -1 HEAD\"\n\n\nTroubleshooting\n\nCommon Fixes\nbash\nFix wrong commit message\ngit commit --amend -m \"New message\"\n\nRemove file from staging\ngit reset HEAD file.txt\n\nUndo last commit but keep changes\ngit reset --soft HEAD1\n\nFix wrong branch commits\ngit cherry-pick commit-hash\ngit reset --hard HEAD1\n\nClean untracked files\ngit clean -fd\n\nRecover deleted branch\ngit reflog\ngit checkout -b recovered-branch commit-hash\n\n\nPerformance\nbash\nGarbage collection\ngit gc\n\nPrune unreachable objects\ngit prune\n\nVerify repository\ngit fsck\n\nRepack repository\ngit repack -a -d\n\n\nBest Practices\n\n1. Commit messages: Use imperative mood (\"Add feature\" not \"Added feature\")\n2. Branch naming: Use descriptive names (feature/user-auth, bugfix/login-error)\n3. Small commits: Make atomic commits that do one thing\n4. Pull before push: Always pull latest changes before pushing\n5. Use .gitignore: Don't track unnecessary files\n6. Review before committing: Use git diff --staged # Set user information\ngit config --global user.name \"John Doe\"\ngit config --global user.email \"john@example.com\"\n\n# Set default editor\ngit config --global core.editor \"vim\"\n\n# Enable color output\ngit config --global color.ui auto\n\n# List all configurations\ngit config --list\n\n# Get specific config value\ngit config user.name # Initialize new repository\ngit init\n\n# Clone existing repository\ngit clone https://github.com/user/repo.git\n\n# Clone with specific branch\ngit clone -b develop https://github.com/user/repo.git\n\n# Clone with depth (shallow clone)\ngit clone --depth 1 https://github.com/user/repo.git # Check status\ngit status\n\n# Short status\ngit status -s\n\n# Show changes in working directory\ngit diff\n\n# Show staged changes\ngit diff --staged\n\n# Show changes between commits\ngit diff commit1 commit2\n\n# Show changes for specific file\ngit diff HEAD -- path/to/file # Stage specific files\ngit add file1.txt file2.txt\n\n# Stage all changes\ngit add .\n\n# Stage parts of files interactively\ngit add -p\n\n# Commit with message\ngit commit -m \"Add new feature\"\n\n# Commit with detailed message\ngit commit\n\n# Amend last commit\ngit commit --amend\n\n# Commit with specific author\ngit commit --author=\"Name <email@example.com>\" # List branches\ngit branch\n\n# List all branches (including remote)\ngit branch -a\n\n# Create new branch\ngit branch feature-branch\n\n# Create and switch to branch\ngit checkout -b feature-branch\n\n# Switch branches\ngit checkout main\n\n# Delete branch\ngit branch -d feature-branch\n\n# Force delete branch\ngit branch -D feature-branch\n\n# Rename branch\ngit branch -m old-name new-name # Merge branch into current branch\ngit merge feature-branch\n\n# Merge with no fast-forward\ngit merge --no-ff feature-branch\n\n# Abort merge\ngit merge --abort\n\n# Continue merge after conflicts\ngit merge --continue # Rebase current branch onto main\ngit rebase main\n\n# Interactive rebase\ngit rebase -i HEAD~3\n\n# Continue rebase after conflicts\ngit rebase --continue\n\n# Abort rebase\ngit rebase --abort\n\n# Skip current commit during rebase\ngit rebase --skip # List remotes\ngit remote -v\n\n# Add remote\ngit remote add origin https://github.com/user/repo.git\n\n# Remove remote\ngit remote remove origin\n\n# Rename remote\ngit remote rename origin upstream\n\n# Show remote details\ngit remote show origin # Push to remote\ngit push origin main\n\n# Push and set upstream\ngit push -u origin feature-branch\n\n# Force push (use with caution!)\ngit push --force\n\n# Push tags\ngit push --tags\n\n# Pull from remote\ngit pull origin main\n\n# Pull with rebase\ngit pull --rebase\n\n# Fetch without merging\ngit fetch origin\n\n# Fetch all remotes\ngit fetch --all # Show commit logs\ngit log\n\n# One line per commit\ngit log --oneline\n\n# Show graph\ngit log --graph --oneline --all\n\n# Show commits by author\ngit log --author=\"John\"\n\n# Show commits since date\ngit log --since=\"2024-01-01\"\n\n# Show commits with changes\ngit log -p\n\n# Show file history\ngit log --follow path/to/file\n\n# Custom format\ngit log --pretty=format:\"%h - %an, %ar : %s\" # Search commit messages\ngit log --grep=\"fix\"\n\n# Search code changes\ngit log -S \"function_name\"\n\n# Find commits that changed specific lines\ngit blame path/to/file\n\n# Binary search for bug\ngit bisect start\ngit bisect bad\ngit bisect good commit-hash # Unstage files\ngit reset HEAD file.txt\n\n# Reset to previous commit (keep changes)\ngit reset --soft HEAD~1\n\n# Reset to previous commit (discard changes)\ngit reset --hard HEAD~1\n\n# Reset specific file to HEAD\ngit checkout -- file.txt\n\n# Create revert commit\ngit revert commit-hash\n\n# Revert without committing\ngit revert -n commit-hash # Stash changes\ngit stash\n\n# Stash with message\ngit stash save \"Work in progress\"\n\n# List stashes\ngit stash list\n\n# Apply latest stash\ngit stash apply\n\n# Apply specific stash\ngit stash apply stash@{2}\n\n# Pop latest stash\ngit stash pop\n\n# Drop stash\ngit stash drop stash@{1}\n\n# Clear all stashes\ngit stash clear # Apply specific commit\ngit cherry-pick commit-hash\n\n# Cherry-pick range\ngit cherry-pick commit1..commit2\n\n# Cherry-pick without committing\ngit cherry-pick -n commit-hash # Add submodule\ngit submodule add https://github.com/user/repo.git path/to/submodule\n\n# Initialize submodules\ngit submodule init\n\n# Update submodules\ngit submodule update\n\n# Clone with submodules\ngit clone --recurse-submodules https://github.com/user/repo.git # Add worktree\ngit worktree add ../feature-branch feature-branch\n\n# List worktrees\ngit worktree list\n\n# Remove worktree\ngit worktree remove ../feature-branch # Common aliases\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\n\n# Complex aliases\ngit config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\ngit config --global alias.undo \"reset --soft HEAD~1\"\n\ngit config --global alias.last \"log -1 HEAD\" # Fix wrong commit message\ngit commit --amend -m \"New message\"\n\n# Remove file from staging\ngit reset HEAD file.txt\n\n# Undo last commit but keep changes\ngit reset --soft HEAD~1\n\n# Fix wrong branch commits\ngit cherry-pick commit-hash\ngit reset --hard HEAD~1\n\n# Clean untracked files\ngit clean -fd\n\n# Recover deleted branch\ngit reflog\ngit checkout -b recovered-branch commit-hash # Garbage collection\ngit gc\n\n# Prune unreachable objects\ngit prune\n\n# Verify repository\ngit fsck\n\n# Repack repository\ngit repack -a -d",
      "code_blocks_count": 19
    },
    {
      "path": "/notes/tutorials/beginner/web-development-101.md",
      "context": "tutorials",
      "metadata": {
        "title": "Web Development 101",
        "tags": [
          "tutorial",
          "web-development",
          "html",
          "css",
          "javascript",
          "beginner"
        ],
        "created": "2024-01-05",
        "author": "Tutorial Team",
        "description": "Complete beginner's guide to web development",
        "updated": "2024-02-20",
        "category": "tutorials",
        "status": "published"
      },
      "content_preview": "Welcome to the world of web development! This tutorial will guide you through the basics of building websites using HTML, CSS, and JavaScript.\n\n\n\n- A text editor (VS Code recommended)\n- A web browser ...",
      "searchable_content": "\nWeb Development 101\n\nWelcome to the world of web development! This tutorial will guide you through the basics of building websites using HTML, CSS, and JavaScript.\n\nPrerequisites\n\n- A text editor (VS Code recommended)\n- A web browser (Chrome, Firefox, or Edge)\n- Basic computer skills\n- Enthusiasm to learn!\n\nChapter 1: HTML Basics\n\nHTML (HyperText Markup Language) is the foundation of web pages. It provides structure and content.\n\nYour First HTML Page\n\nhtml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My First Web Page</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <p>This is my first web page.</p>\n</body>\n</html>\n\n\nEssential HTML Elements\n\nHeadings\nhtml\n<h1>Main Heading</h1>\n<h2>Subheading</h2>\n<h3>Sub-subheading</h3>\n<!-- ... up to h6 -->\n\n\nText Elements\nhtml\n<p>This is a paragraph.</p>\n<strong>Bold text</strong>\n<em>Italic text</em>\n<br> <!-- Line break -->\n<hr> <!-- Horizontal rule -->\n\n\nLists\nhtml\n<!-- Unordered list -->\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n\n<!-- Ordered list -->\n<ol>\n    <li>First step</li>\n    <li>Second step</li>\n    <li>Third step</li>\n</ol>\n\n\nLinks and Images\nhtml\n<!-- Links -->\n<a href=\"https://example.com\">Visit Example</a>\n<a href=\"about.html\">About Page</a>\n<a href=\"#section\">Jump to Section</a>\n\n<!-- Images -->\n<img src=\"photo.jpg\" alt=\"Description of photo\">\n<img src=\"https://example.com/image.png\" alt=\"External image\">\n\n\nForms\nhtml\n<form action=\"/submit\" method=\"post\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    \n    <button type=\"submit\">Send</button>\n</form>\n\n\nChapter 2: CSS Fundamentals\n\nCSS (Cascading Style Sheets) makes your HTML look beautiful by adding colors, layouts, and animations.\n\nAdding CSS to HTML\n\nhtml\n<!-- Inline CSS -->\n<p style=\"color: blue;\">Blue text</p>\n\n<!-- Internal CSS -->\n<style>\n    p {\n        color: green;\n    }\n</style>\n\n<!-- External CSS (recommended) -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n\n\nCSS Selectors\n\ncss\n/ Element selector /\np {\n    color: blue;\n}\n\n/ Class selector /\n.highlight {\n    background-color: yellow;\n}\n\n/ ID selector /\n#header {\n    font-size: 24px;\n}\n\n/ Descendant selector /\nnav a {\n    text-decoration: none;\n}\n\n/ Multiple selectors /\nh1, h2, h3 {\n    font-family: Arial, sans-serif;\n}\n\n\nCommon CSS Properties\n\ncss\n/ Typography /\n.text-styling {\n    font-family: 'Helvetica', Arial, sans-serif;\n    font-size: 16px;\n    font-weight: bold;\n    color: #333;\n    text-align: center;\n    line-height: 1.6;\n}\n\n/ Box Model /\n.box {\n    width: 300px;\n    height: 200px;\n    padding: 20px;\n    margin: 10px;\n    border: 2px solid #000;\n    background-color: #f0f0f0;\n}\n\n/ Flexbox Layout /\n.container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n/ Colors and Backgrounds /\n.styled-element {\n    color: #ff6b6b;\n    background-color: rgba(0, 0, 0, 0.1);\n    background-image: url('pattern.png');\n    background-size: cover;\n}\n\n\nResponsive Design\n\ncss\n/ Mobile-first approach /\n.container {\n    width: 100%;\n    padding: 10px;\n}\n\n/ Tablet styles /\n@media (min-width: 768px) {\n    .container {\n        max-width: 750px;\n        margin: 0 auto;\n    }\n}\n\n/ Desktop styles /\n@media (min-width: 1024px) {\n    .container {\n        max-width: 1200px;\n    }\n}\n\n\nChapter 3: JavaScript Basics\n\nJavaScript brings your website to life with interactivity and dynamic behavior.\n\nAdding JavaScript\n\nhtml\n<!-- Inline JavaScript -->\n<button onclick=\"alert('Hello!')\">Click Me</button>\n\n<!-- Internal JavaScript -->\n<script>\n    console.log('Hello from JavaScript!');\n</script>\n\n<!-- External JavaScript (recommended) -->\n<script src=\"script.js\"></script>\n\n\nVariables and Data Types\n\njavascript\n// Variables\nlet name = \"John\";           // String\nconst age = 25;             // Number\nlet isStudent = true;       // Boolean\nlet grades = [90, 85, 92];  // Array\nlet person = {              // Object\n    name: \"John\",\n    age: 25\n};\n\n// Modern syntax\nconst message = Hello, ${name}!; // Template literal\n\n\nFunctions\n\njavascript\n// Function declaration\nfunction greet(name) {\n    return Hello, ${name}!;\n}\n\n// Arrow function\nconst add = (a, b) => a + b;\n\n// Function with default parameter\nfunction sayHello(name = \"Guest\") {\n    console.log(Welcome, ${name}!);\n}\n\n\nDOM Manipulation\n\njavascript\n// Selecting elements\nconst heading = document.getElementById('heading');\nconst buttons = document.getElementsByClassName('btn');\nconst firstPara = document.querySelector('p');\nconst allParas = document.querySelectorAll('p');\n\n// Changing content\nheading.textContent = 'New Heading';\nheading.innerHTML = '<span>Styled Heading</span>';\n\n// Changing styles\nheading.style.color = 'blue';\nheading.style.fontSize = '24px';\n\n// Adding/removing classes\nheading.classList.add('highlight');\nheading.classList.remove('old-style');\nheading.classList.toggle('active');\n\n\nEvent Handling\n\njavascript\n// Click event\nconst button = document.querySelector('#myButton');\nbutton.addEventListener('click', function() {\n    alert('Button clicked!');\n});\n\n// Form submission\nconst form = document.querySelector('#myForm');\nform.addEventListener('submit', function(event) {\n    event.preventDefault(); // Prevent default submission\n    \n    const formData = new FormData(form);\n    const name = formData.get('name');\n    console.log(Form submitted by ${name});\n});\n\n// Multiple events\nconst input = document.querySelector('#myInput');\ninput.addEventListener('focus', () => console.log('Input focused'));\ninput.addEventListener('blur', () => console.log('Input blurred'));\ninput.addEventListener('input', (e) => console.log(e.target.value));\n\n\nChapter 4: Building Your First Project\n\nLet's build a simple Todo List application!\n\nHTML Structure\n\nhtml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n    <link rel=\"stylesheet\" href=\"todo.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>My Todo List</h1>\n        <form id=\"todoForm\">\n            <input type=\"text\" id=\"todoInput\" placeholder=\"Add a new task...\" required>\n            <button type=\"submit\">Add</button>\n        </form>\n        <ul id=\"todoList\"></ul>\n    </div>\n    <script src=\"todo.js\"></script>\n</body>\n</html>\n\n\nCSS Styling\n\ncss\n {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    padding: 20px;\n}\n\n.container {\n    max-width: 600px;\n    margin: 0 auto;\n    background-color: white;\n    padding: 30px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\nh1 {\n    color: #333;\n    margin-bottom: 20px;\n    text-align: center;\n}\n\n#todoForm {\n    display: flex;\n    margin-bottom: 20px;\n}\n\n#todoInput {\n    flex: 1;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 5px 0 0 5px;\n    font-size: 16px;\n}\n\nbutton {\n    padding: 10px 20px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 0 5px 5px 0;\n    cursor: pointer;\n    font-size: 16px;\n}\n\nbutton:hover {\n    background-color: #45a049;\n}\n\n.todo-item {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n    margin-bottom: 10px;\n    background-color: #f9f9f9;\n    border-radius: 5px;\n}\n\n.todo-item.completed {\n    opacity: 0.6;\n    text-decoration: line-through;\n}\n\n.delete-btn {\n    margin-left: auto;\n    background-color: #f44336;\n    padding: 5px 10px;\n    border-radius: 3px;\n}\n\n.delete-btn:hover {\n    background-color: #da190b;\n}\n\n\nJavaScript Functionality\n\njavascript\n// Get elements\nconst todoForm = document.getElementById('todoForm');\nconst todoInput = document.getElementById('todoInput');\nconst todoList = document.getElementById('todoList');\n\n// Load todos from localStorage\nlet todos = JSON.parse(localStorage.getItem('todos')) || [];\n\n// Display todos on page load\ndisplayTodos();\n\n// Add todo\ntodoForm.addEventListener('submit', function(e) {\n    e.preventDefault();\n    \n    const todoText = todoInput.value.trim();\n    if (todoText) {\n        const todo = {\n            id: Date.now(),\n            text: todoText,\n            completed: false\n        };\n        \n        todos.push(todo);\n        saveTodos();\n        displayTodos();\n        todoInput.value = '';\n    }\n});\n\n// Display todos\nfunction displayTodos() {\n    todoList.innerHTML = '';\n    \n    todos.forEach(todo => {\n        const li = document.createElement('li');\n        li.className = 'todo-item';\n        if (todo.completed) {\n            li.classList.add('completed');\n        }\n        \n        li.innerHTML = \n            <input type=\"checkbox\" ${todo.completed ? 'checked' : ''} \n                   onchange=\"toggleTodo(${todo.id})\">\n            <span>${todo.text}</span>\n            <button class=\"delete-btn\" onclick=\"deleteTodo(${todo.id})\">\n                Delete\n            </button>\n        ;\n        \n        todoList.appendChild(li);\n    });\n}\n\n// Toggle todo completion\nfunction toggleTodo(id) {\n    todos = todos.map(todo => \n        todo.id === id ? {...todo, completed: !todo.completed} : todo\n    );\n    saveTodos();\n    displayTodos();\n}\n\n// Delete todo\nfunction deleteTodo(id) {\n    todos = todos.filter(todo => todo.id !== id);\n    saveTodos();\n    displayTodos();\n}\n\n// Save to localStorage\nfunction saveTodos() {\n    localStorage.setItem('todos', JSON.stringify(todos));\n}\n\n\nNext Steps\n\nCongratulations! You've learned the basics of web development. Here's what to learn next:\n\n1. Advanced CSS\n   - CSS Grid\n   - Animations\n   - Preprocessors (Sass)\n\n2. Advanced JavaScript\n   - ES6+ features\n   - Async/Await\n   - Fetch API\n\n3. Frameworks\n   - React\n   - Vue.js\n   - Angular\n\n4. Backend Development\n   - Node.js\n   - Databases\n   - RESTful APIs\n\n5. Tools & Workflow\n   - Git version control\n   - npm/yarn\n   - Webpack/Vite\n\nKeep practicing and building projects. The best way to learn is by doing! <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My First Web Page</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <p>This is my first web page.</p>\n</body>\n</html> <h1>Main Heading</h1>\n<h2>Subheading</h2>\n<h3>Sub-subheading</h3>\n<!-- ... up to h6 --> <p>This is a paragraph.</p>\n<strong>Bold text</strong>\n<em>Italic text</em>\n<br> <!-- Line break -->\n<hr> <!-- Horizontal rule --> <!-- Unordered list -->\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n\n<!-- Ordered list -->\n<ol>\n    <li>First step</li>\n    <li>Second step</li>\n    <li>Third step</li>\n</ol> <!-- Links -->\n<a href=\"https://example.com\">Visit Example</a>\n<a href=\"about.html\">About Page</a>\n<a href=\"#section\">Jump to Section</a>\n\n<!-- Images -->\n<img src=\"photo.jpg\" alt=\"Description of photo\">\n<img src=\"https://example.com/image.png\" alt=\"External image\"> <form action=\"/submit\" method=\"post\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    \n    <button type=\"submit\">Send</button>\n</form> <!-- Inline CSS -->\n<p style=\"color: blue;\">Blue text</p>\n\n<!-- Internal CSS -->\n<style>\n    p {\n        color: green;\n    }\n</style>\n\n<!-- External CSS (recommended) -->\n<link rel=\"stylesheet\" href=\"styles.css\"> /* Element selector */\np {\n    color: blue;\n}\n\n/* Class selector */\n.highlight {\n    background-color: yellow;\n}\n\n/* ID selector */\n#header {\n    font-size: 24px;\n}\n\n/* Descendant selector */\nnav a {\n    text-decoration: none;\n}\n\n/* Multiple selectors */\nh1, h2, h3 {\n    font-family: Arial, sans-serif;\n} /* Typography */\n.text-styling {\n    font-family: 'Helvetica', Arial, sans-serif;\n    font-size: 16px;\n    font-weight: bold;\n    color: #333;\n    text-align: center;\n    line-height: 1.6;\n}\n\n/* Box Model */\n.box {\n    width: 300px;\n    height: 200px;\n    padding: 20px;\n    margin: 10px;\n    border: 2px solid #000;\n    background-color: #f0f0f0;\n}\n\n/* Flexbox Layout */\n.container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n/* Colors and Backgrounds */\n.styled-element {\n    color: #ff6b6b;\n    background-color: rgba(0, 0, 0, 0.1);\n    background-image: url('pattern.png');\n    background-size: cover;\n} /* Mobile-first approach */\n.container {\n    width: 100%;\n    padding: 10px;\n}\n\n/* Tablet styles */\n@media (min-width: 768px) {\n    .container {\n        max-width: 750px;\n        margin: 0 auto;\n    }\n}\n\n/* Desktop styles */\n@media (min-width: 1024px) {\n    .container {\n        max-width: 1200px;\n    }\n} <!-- Inline JavaScript -->\n<button onclick=\"alert('Hello!')\">Click Me</button>\n\n<!-- Internal JavaScript -->\n<script>\n    console.log('Hello from JavaScript!');\n</script>\n\n<!-- External JavaScript (recommended) -->\n<script src=\"script.js\"></script> // Variables\nlet name = \"John\";           // String\nconst age = 25;             // Number\nlet isStudent = true;       // Boolean\nlet grades = [90, 85, 92];  // Array\nlet person = {              // Object\n    name: \"John\",\n    age: 25\n};\n\n// Modern syntax\nconst message = `Hello, ${name}!`; // Template literal // Function declaration\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// Arrow function\nconst add = (a, b) => a + b;\n\n// Function with default parameter\nfunction sayHello(name = \"Guest\") {\n    console.log(`Welcome, ${name}!`);\n} // Selecting elements\nconst heading = document.getElementById('heading');\nconst buttons = document.getElementsByClassName('btn');\nconst firstPara = document.querySelector('p');\nconst allParas = document.querySelectorAll('p');\n\n// Changing content\nheading.textContent = 'New Heading';\nheading.innerHTML = '<span>Styled Heading</span>';\n\n// Changing styles\nheading.style.color = 'blue';\nheading.style.fontSize = '24px';\n\n// Adding/removing classes\nheading.classList.add('highlight');\nheading.classList.remove('old-style');\nheading.classList.toggle('active'); // Click event\nconst button = document.querySelector('#myButton');\nbutton.addEventListener('click', function() {\n    alert('Button clicked!');\n});\n\n// Form submission\nconst form = document.querySelector('#myForm');\nform.addEventListener('submit', function(event) {\n    event.preventDefault(); // Prevent default submission\n    \n    const formData = new FormData(form);\n    const name = formData.get('name');\n    console.log(`Form submitted by ${name}`);\n});\n\n// Multiple events\nconst input = document.querySelector('#myInput');\ninput.addEventListener('focus', () => console.log('Input focused'));\ninput.addEventListener('blur', () => console.log('Input blurred'));\ninput.addEventListener('input', (e) => console.log(e.target.value)); <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n    <link rel=\"stylesheet\" href=\"todo.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>My Todo List</h1>\n        <form id=\"todoForm\">\n            <input type=\"text\" id=\"todoInput\" placeholder=\"Add a new task...\" required>\n            <button type=\"submit\">Add</button>\n        </form>\n        <ul id=\"todoList\"></ul>\n    </div>\n    <script src=\"todo.js\"></script>\n</body>\n</html> * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    padding: 20px;\n}\n\n.container {\n    max-width: 600px;\n    margin: 0 auto;\n    background-color: white;\n    padding: 30px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\nh1 {\n    color: #333;\n    margin-bottom: 20px;\n    text-align: center;\n}\n\n#todoForm {\n    display: flex;\n    margin-bottom: 20px;\n}\n\n#todoInput {\n    flex: 1;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 5px 0 0 5px;\n    font-size: 16px;\n}\n\nbutton {\n    padding: 10px 20px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 0 5px 5px 0;\n    cursor: pointer;\n    font-size: 16px;\n}\n\nbutton:hover {\n    background-color: #45a049;\n}\n\n.todo-item {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n    margin-bottom: 10px;\n    background-color: #f9f9f9;\n    border-radius: 5px;\n}\n\n.todo-item.completed {\n    opacity: 0.6;\n    text-decoration: line-through;\n}\n\n.delete-btn {\n    margin-left: auto;\n    background-color: #f44336;\n    padding: 5px 10px;\n    border-radius: 3px;\n}\n\n.delete-btn:hover {\n    background-color: #da190b;\n} // Get elements\nconst todoForm = document.getElementById('todoForm');\nconst todoInput = document.getElementById('todoInput');\nconst todoList = document.getElementById('todoList');\n\n// Load todos from localStorage\nlet todos = JSON.parse(localStorage.getItem('todos')) || [];\n\n// Display todos on page load\ndisplayTodos();\n\n// Add todo\ntodoForm.addEventListener('submit', function(e) {\n    e.preventDefault();\n    \n    const todoText = todoInput.value.trim();\n    if (todoText) {\n        const todo = {\n            id: Date.now(),\n            text: todoText,\n            completed: false\n        };\n        \n        todos.push(todo);\n        saveTodos();\n        displayTodos();\n        todoInput.value = '';\n    }\n});\n\n// Display todos\nfunction displayTodos() {\n    todoList.innerHTML = '';\n    \n    todos.forEach(todo => {\n        const li = document.createElement('li');\n        li.className = 'todo-item';\n        if (todo.completed) {\n            li.classList.add('completed');\n        }\n        \n        li.innerHTML = `\n            <input type=\"checkbox\" ${todo.completed ? 'checked' : ''} \n                   onchange=\"toggleTodo(${todo.id})\">\n            <span>${todo.text}</span>\n            <button class=\"delete-btn\" onclick=\"deleteTodo(${todo.id})\">\n                Delete\n            </button>\n        `;\n        \n        todoList.appendChild(li);\n    });\n}\n\n// Toggle todo completion\nfunction toggleTodo(id) {\n    todos = todos.map(todo => \n        todo.id === id ? {...todo, completed: !todo.completed} : todo\n    );\n    saveTodos();\n    displayTodos();\n}\n\n// Delete todo\nfunction deleteTodo(id) {\n    todos = todos.filter(todo => todo.id !== id);\n    saveTodos();\n    displayTodos();\n}\n\n// Save to localStorage\nfunction saveTodos() {\n    localStorage.setItem('todos', JSON.stringify(todos));\n}",
      "code_blocks_count": 18
    }
  ],
  "tags": {
    "getting-started": 1,
    "documentation": 3,
    "wiki": 1,
    "test": 6,
    "debugging": 2,
    "themes": 1,
    "showcase": 1,
    "demo": 1,
    "callouts": 1,
    "html": 2,
    "code": 2,
    "alignment": 1,
    "guide": 2,
    "images": 1,
    "search": 1,
    "links": 1,
    "personal": 3,
    "journal": 1,
    "thoughts": 1,
    "books": 1,
    "reading": 1,
    "reviews": 1,
    "cooking": 1,
    "recipes": 1,
    "food": 1,
    "javascript": 2,
    "programming": 2,
    "web-development": 3,
    "tips": 1,
    "python": 1,
    "best-practices": 1,
    "docker": 2,
    "devops": 1,
    "containers": 1,
    "deployment": 1,
    "sql": 1,
    "databases": 1,
    "performance": 1,
    "optimization": 1,
    "projects": 2,
    "react": 1,
    "typescript": 1,
    "blog": 1,
    "gatsby": 1,
    "graphql": 1,
    "cms": 1,
    "git": 1,
    "version-control": 1,
    "reference": 2,
    "commands": 1,
    "regex": 1,
    "patterns": 1,
    "cheatsheet": 1,
    "tutorial": 1,
    "css": 1,
    "beginner": 1,
    "microservices": 1,
    "architecture": 1,
    "kubernetes": 1,
    "advanced": 1
  },
  "authors": [
    "Tutorial Team",
    "DevOps Team",
    "Project Team",
    "Debug",
    "Alex Chen",
    "Database Team",
    "System",
    "Wiki Admin",
    "Sarah Johnson",
    "John Doe",
    "Architecture Team",
    "Jane Smith",
    "Blog Team",
    "Test User",
    "Dev Team",
    "Maria Rodriguez"
  ],
  "categories": [
    "tutorials",
    "personal",
    "reference",
    "technical",
    "documentation",
    "projects"
  ],
  "contexts": [
    {
      "id": "personal",
      "name": "Personal",
      "noteCount": 3
    },
    {
      "id": "technical",
      "name": "Technical",
      "noteCount": 4
    },
    {
      "id": "projects",
      "name": "Projects",
      "noteCount": 2
    },
    {
      "id": "reference",
      "name": "Reference",
      "noteCount": 2
    },
    {
      "id": "tutorials",
      "name": "Tutorials",
      "noteCount": 2
    }
  ],
  "generated": "2025-06-07T13:26:09.399158",
  "totalNotes": 22
}