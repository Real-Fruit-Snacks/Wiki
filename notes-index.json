{
  "notes": [
    {
      "path": "/notes/tutorials/features/markdown-callouts.md",
      "context": "tutorials",
      "metadata": {
        "title": "Markdown Callouts",
        "tags": [
          "tutorial",
          "markdown",
          "callouts",
          "formatting",
          "documentation"
        ],
        "created": "2025-07-11",
        "author": "Wiki Team",
        "description": "Complete guide to all 13 callout types available in Notes Wiki with examples and best practices",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Master all 13 callout types available in Notes Wiki to highlight important information, create visually appealing documentation, and organize content effectively.\n\n\n\nCallouts are special formatted blo...",
      "searchable_content": "\nMarkdown Callouts - Complete Guide\n\nMaster all 13 callout types available in Notes Wiki to highlight important information, create visually appealing documentation, and organize content effectively.\n\n\ud83c\udfaf What Are Callouts?\n\nCallouts are special formatted blocks that draw attention to important information. They use distinctive colors, icons, and styling to make key points stand out from regular text.\n\nBasic Syntax\nmarkdown\n> [!TYPE] Optional Custom Title\n> Your callout content goes here\n> You can use multiple lines\n> And even markdown formatting\n\n\nKey Features\n- 13 different types with unique icons and colors\n- Custom titles or default type names\n- Markdown support inside callouts\n- Theme integration - colors adapt to your chosen theme\n- Nested callouts - callouts inside other callouts\n\n\ud83d\udccb Complete Callout Reference\n\n1. NOTE - General Information\n\nUse for general information, explanations, or neutral content.\n\nmarkdown\n> [!NOTE] \n> This is a standard note callout for general information.\n\n\n> [!NOTE]\n> This is a standard note callout for general information.\n\nmarkdown\n> [!NOTE] Custom Title\n> You can customize the title of any callout to make it more specific.\n\n\n> [!NOTE] Custom Title\n> You can customize the title of any callout to make it more specific.\n\nBest for:\n- General explanations\n- Background information\n- Context or definitions\n- Neutral observations\n\n2. INFO - Important Information\n\nUse for important information that users should know.\n\nmarkdown\n> [!INFO]\n> This callout highlights important information that users should be aware of.\n\n\n> [!INFO]\n> This callout highlights important information that users should be aware of.\n\nmarkdown\n> [!INFO] System Requirements\n> This application requires Node.js version 16 or higher to run properly.\n\n\n> [!INFO] System Requirements\n> This application requires Node.js version 16 or higher to run properly.\n\nBest for:\n- System requirements\n- Important facts\n- Key information\n- Prerequisites\n\n3. TIP - Helpful Tips\n\nUse for helpful tips, shortcuts, or best practices.\n\nmarkdown\n> [!TIP]\n> Here's a helpful tip to improve your workflow!\n\n\n> [!TIP]\n> Here's a helpful tip to improve your workflow!\n\nmarkdown\n> [!TIP] Pro Tip\n> Use Ctrl+K to quickly access the search function from anywhere in the application.\n\n\n> [!TIP] Pro Tip\n> Use Ctrl+K to quickly access the search function from anywhere in the application.\n\nBest for:\n- Productivity tips\n- Shortcuts and tricks\n- Best practices\n- Optimization suggestions\n\n4. SUCCESS - Positive Outcomes\n\nUse for success messages, completed tasks, or positive results.\n\nmarkdown\n> [!SUCCESS]\n> Great job! This indicates a successful operation or positive outcome.\n\n\n> [!SUCCESS]\n> Great job! This indicates a successful operation or positive outcome.\n\nmarkdown\n> [!SUCCESS] Installation Complete\n> All dependencies have been successfully installed. You can now start the development server.\n\n\n> [!SUCCESS] Installation Complete\n> All dependencies have been successfully installed. You can now start the development server.\n\nBest for:\n- Success messages\n- Completed steps\n- Positive results\n- Achievement notifications\n\n5. QUESTION - Questions and Queries\n\nUse for questions, prompts for thought, or uncertain information.\n\nmarkdown\n> [!QUESTION]\n> This callout poses a question or highlights something that needs consideration.\n\n\n> [!QUESTION]\n> This callout poses a question or highlights something that needs consideration.\n\nmarkdown\n> [!QUESTION] Think About It\n> What would happen if we implemented this feature differently? Consider the trade-offs.\n\n\n> [!QUESTION] Think About It\n> What would happen if we implemented this feature differently? Consider the trade-offs.\n\nBest for:\n- Discussion prompts\n- Uncertain information\n- Review questions\n- Critical thinking exercises\n\n6. WARNING - Caution Required\n\nUse for warnings about potential issues or things to be careful about.\n\nmarkdown\n> [!WARNING]\n> This warning alerts users to potential issues they should be aware of.\n\n\n> [!WARNING]\n> This warning alerts users to potential issues they should be aware of.\n\nmarkdown\n> [!WARNING] Database Migration\n> Always backup your database before running migrations in production environments.\n\n\n> [!WARNING] Database Migration\n> Always backup your database before running migrations in production environments.\n\nBest for:\n- Potential issues\n- Precautions\n- Risk notifications\n- Important warnings\n\n7. CAUTION - Proceed Carefully\n\nUse for situations requiring careful consideration or extra attention.\n\nmarkdown\n> [!CAUTION]\n> Exercise caution when proceeding with this action.\n\n\n> [!CAUTION]\n> Exercise caution when proceeding with this action.\n\nmarkdown\n> [!CAUTION] Configuration Changes\n> Modifying these settings may affect system performance. Test in a development environment first.\n\n\n> [!CAUTION] Configuration Changes\n> Modifying these settings may affect system performance. Test in a development environment first.\n\nBest for:\n- Sensitive operations\n- Configuration changes\n- Actions requiring care\n- Situations needing attention\n\n8. DANGER - Critical Warnings\n\nUse for critical warnings, dangerous operations, or serious issues.\n\nmarkdown\n> [!DANGER]\n> This is a critical warning about dangerous operations or serious issues.\n\n\n> [!DANGER]\n> This is a critical warning about dangerous operations or serious issues.\n\nmarkdown\n> [!DANGER] Data Loss Risk\n> This command will permanently delete all files in the directory. This action cannot be undone.\n\n\n> [!DANGER] Data Loss Risk\n> This command will permanently delete all files in the directory. This action cannot be undone.\n\nBest for:\n- Critical warnings\n- Destructive operations\n- Security risks\n- Irreversible actions\n\n9. IMPORTANT - Critical Information\n\nUse for critical information that must not be missed.\n\nmarkdown\n> [!IMPORTANT]\n> This callout highlights critical information that users must not miss.\n\n\n> [!IMPORTANT]\n> This callout highlights critical information that users must not miss.\n\nmarkdown\n> [!IMPORTANT] Breaking Changes\n> Version 2.0 introduces breaking changes. Please review the migration guide before upgrading.\n\n\n> [!IMPORTANT] Breaking Changes\n> Version 2.0 introduces breaking changes. Please review the migration guide before upgrading.\n\nBest for:\n- Critical updates\n- Breaking changes\n- Must-read information\n- Essential requirements\n\n10. EXAMPLE - Code Examples\n\nUse for code examples, demonstrations, or practical illustrations.\n\nmarkdown\n> [!EXAMPLE]\n> This callout shows examples or demonstrates how something works.\n\n\n> [!EXAMPLE]\n> This callout shows examples or demonstrates how something works.\n\nmarkdown\n> [!EXAMPLE] API Usage\n> javascript\n> const response = await fetch('/api/users');\n> const users = await response.json();\n> \n\n\n> [!EXAMPLE] API Usage\n> javascript\n> const response = await fetch('/api/users');\n> const users = await response.json();\n> \n\nBest for:\n- Code examples\n- Demonstrations\n- Practical illustrations\n- Sample implementations\n\n11. QUOTE - Quotations\n\nUse for quotations, citations, or referenced material.\n\nmarkdown\n> [!QUOTE]\n> This callout is perfect for quotations or cited material.\n\n\n> [!QUOTE]\n> This callout is perfect for quotations or cited material.\n\nmarkdown\n> [!QUOTE] Albert Einstein\n> \"The important thing is not to stop questioning. Curiosity has its own reason for existence.\"\n\n\n> [!QUOTE] Albert Einstein\n> \"The important thing is not to stop questioning. Curiosity has its own reason for existence.\"\n\nBest for:\n- Famous quotes\n- Citations\n- Referenced material\n- Inspirational messages\n\n12. BUG - Bug Reports\n\nUse for bug reports, known issues, or problems.\n\nmarkdown\n> [!BUG]\n> This callout identifies bugs, known issues, or problems that need attention.\n\n\n> [!BUG]\n> This callout identifies bugs, known issues, or problems that need attention.\n\nmarkdown\n> [!BUG] Known Issue\n> The search function may return incorrect results when using special characters. Fix planned for v1.2.\n\n\n> [!BUG] Known Issue\n> The search function may return incorrect results when using special characters. Fix planned for v1.2.\n\nBest for:\n- Bug reports\n- Known issues\n- Problems to fix\n- Workarounds\n\n13. TODO - Tasks and Reminders\n\nUse for tasks, to-do items, or reminders about work to be done.\n\nmarkdown\n> [!TODO]\n> This callout marks tasks or items that need to be completed.\n\n\n> [!TODO]\n> This callout marks tasks or items that need to be completed.\n\nmarkdown\n> [!TODO] Documentation Updates\n> - [ ] Update API documentation\n> - [ ] Add more code examples\n> - [ ] Review and publish changes\n\n\n> [!TODO] Documentation Updates\n> - [ ] Update API documentation\n> - [ ] Add more code examples\n> - [ ] Review and publish changes\n\nBest for:\n- Task lists\n- Reminders\n- Work to be done\n- Action items\n\n\ud83c\udfa8 Advanced Callout Techniques\n\nNested Callouts\n\nYou can place callouts inside other callouts for complex information hierarchy:\n\nmarkdown\n> [!INFO] Main Information\n> This is the main information block.\n> \n> > [!WARNING] Nested Warning\n> > This is a warning inside the info block.\n> > \n> > > [!TIP] Deeply Nested Tip\n> > > This tip is nested two levels deep.\n\n\n> [!INFO] Main Information\n> This is the main information block.\n> \n> > [!WARNING] Nested Warning\n> > This is a warning inside the info block.\n> > \n> > > [!TIP] Deeply Nested Tip\n> > > This tip is nested two levels deep.\n\nCallouts with Rich Content\n\nCallouts support all markdown formatting:\n\nmarkdown\n> [!EXAMPLE] Rich Content Example\n> You can include bold text, italic text, inline code, and even:\n> \n> - Bullet points\n> - Task lists: \n>   - [x] Completed task\n>   - [ ] Pending task\n> \n> | Column 1 | Column 2 |\n> |----------|----------|\n> | Data 1   | Data 2   |\n> \n> javascript\n> // Even code blocks!\n> function example() {\n>     return \"Hello from inside a callout!\";\n> }\n> \n\n\n> [!EXAMPLE] Rich Content Example\n> You can include bold text, italic text, inline code, and even:\n> \n> - Bullet points\n> - Task lists: \n>   - [x] Completed task\n>   - [ ] Pending task\n> \n> | Column 1 | Column 2 |\n> |----------|----------|\n> | Data 1   | Data 2   |\n> \n> javascript\n> // Even code blocks!\n> function example() {\n>     return \"Hello from inside a callout!\";\n> }\n> \n\nMulti-Line Callouts\n\nFor longer content, continue the callout across multiple lines:\n\nmarkdown\n> [!NOTE] Long Content Example\n> This is a longer callout that spans multiple lines.\n> \n> You can have multiple paragraphs inside a callout by continuing\n> the > marker on each line.\n> \n> This technique is useful for longer explanations or when you\n> need to include multiple types of content.\n\n\n> [!NOTE] Long Content Example\n> This is a longer callout that spans multiple lines.\n> \n> You can have multiple paragraphs inside a callout by continuing\n> the > marker on each line.\n> \n> This technique is useful for longer explanations or when you\n> need to include multiple types of content.\n\n\ud83d\udcca Callout Comparison Chart\n\n| Callout Type | Primary Color | Best Use Case | Urgency Level |\n|--------------|---------------|---------------|---------------|\n| NOTE | Gray | General information | Low |\n| INFO | Blue | Important facts | Medium |\n| TIP | Green | Helpful advice | Low |\n| SUCCESS | Green | Positive outcomes | Low |\n| QUESTION | Purple | Prompts & queries | Medium |\n| WARNING | Yellow | Potential issues | High |\n| CAUTION | Orange | Careful consideration | High |\n| DANGER | Red | Critical warnings | Critical |\n| IMPORTANT | Purple | Must-read info | High |\n| EXAMPLE | Pink | Code & demonstrations | Low |\n| QUOTE | Gray | Citations & quotes | Low |\n| BUG | Red | Issues & problems | High |\n| TODO | Blue | Tasks & reminders | Medium |\n\n\ud83c\udfaf Best Practices\n\nWhen to Use Each Type\n\nUse NOTE for:\n- Background information\n- General explanations\n- Context setting\n- Neutral observations\n\nUse INFO for:\n- System requirements\n- Important facts\n- Key information\n- Prerequisites\n\nUse TIP for:\n- Productivity improvements\n- Shortcuts and tricks\n- Best practices\n- Optimization suggestions\n\nUse SUCCESS for:\n- Completion confirmations\n- Positive results\n- Achievement notifications\n- Success stories\n\nUse QUESTION for:\n- Discussion prompts\n- Uncertain information\n- Review questions\n- Critical thinking\n\nUse WARNING for:\n- Potential problems\n- Precautionary advice\n- Risk notifications\n- Important cautions\n\nUse CAUTION for:\n- Sensitive operations\n- Configuration changes\n- Actions requiring care\n- Situations needing attention\n\nUse DANGER for:\n- Critical warnings\n- Destructive operations\n- Security risks\n- Irreversible actions\n\nUse IMPORTANT for:\n- Critical updates\n- Breaking changes\n- Must-read information\n- Essential requirements\n\nUse EXAMPLE for:\n- Code demonstrations\n- Practical illustrations\n- Sample implementations\n- Tutorial examples\n\nUse QUOTE for:\n- Famous quotations\n- Citations\n- Referenced material\n- Inspirational content\n\nUse BUG for:\n- Bug reports\n- Known issues\n- Problems to fix\n- Workarounds\n\nUse TODO for:\n- Task lists\n- Action items\n- Reminders\n- Work planning\n\nWriting Effective Callouts\n\nKeep Titles Concise\nmarkdown\n<!-- Good -->\n> [!TIP] Keyboard Shortcut\n> Use Ctrl+K to search\n\n<!-- Less effective -->\n> [!TIP] Here's a Really Useful Keyboard Shortcut You Should Know About\n> Use Ctrl+K to search\n\n\nUse Clear, Actionable Language\nmarkdown\n<!-- Good -->\n> [!WARNING] Backup Required\n> Always backup your database before running migrations.\n\n<!-- Less clear -->\n> [!WARNING] \n> You might want to consider maybe backing up your database or something.\n\n\nMatch Content to Callout Type\nmarkdown\n<!-- Good match -->\n> [!DANGER] Data Loss Risk\n> This command will permanently delete all files.\n\n<!-- Poor match -->\n> [!TIP] Data Loss Risk\n> This command will permanently delete all files.\n\n\nContent Organization\n\nUse Callouts Strategically\n- Don't overuse - Too many callouts lose impact\n- Be consistent - Use the same type for similar content\n- Consider flow - Place callouts where they add value\n- Maintain hierarchy - Use nested callouts thoughtfully\n\nCombine with Other Elements\nmarkdown\nInstallation Guide\n\nPrerequisites\n\n> [!INFO] System Requirements\n> - Node.js 16 or higher\n> - npm 7 or higher\n\nInstallation Steps\n\n1. Clone the repository\n2. Install dependencies\n\n> [!TIP] Pro Tip\n> Use npm ci instead of npm install for faster, reliable installs.\n\n3. Configure environment\n\n> [!WARNING] Environment Variables\n> Copy .env.example to .env and update with your values.\n\nTroubleshooting\n\n> [!BUG] Common Issue\n> If you see \"Module not found\" errors, try deleting nodemodules and running npm install again.\n\n\n\ud83d\ude80 Advanced Usage Patterns\n\nDocumentation Workflows\n\nAPI Documentation\nmarkdown\nUser API\n\n> [!INFO] Base URL\n> All endpoints use the base URL: https://api.example.com/v1\n\nAuthentication\n\n> [!IMPORTANT] API Key Required\n> All requests must include an API key in the header.\n\n> [!EXAMPLE] Request Header\n> \n> Authorization: Bearer YOURAPIKEY\n> \n\nGet User\n\n> [!EXAMPLE] Request\n> http\n> GET /users/123\n> \n\n> [!SUCCESS] Response\n> json\n> {\n>   \"id\": 123,\n>   \"name\": \"John Doe\",\n>   \"email\": \"john@example.com\"\n> }\n> \n\n> [!DANGER] Rate Limits\n> This endpoint is limited to 100 requests per minute.\n\n\nTutorial Structure\nmarkdown\nReact Tutorial\n\n> [!NOTE] Prerequisites\n> Basic knowledge of JavaScript and HTML required.\n\nSetup\n\n> [!TIP] Quick Start\n> Use Create React App for fastest setup: npx create-react-app my-app\n\nComponents\n\n> [!EXAMPLE] Basic Component\n> jsx\n> function Welcome(props) {\n>   return <h1>Hello, {props.name}!</h1>;\n> }\n> \n\n> [!IMPORTANT] Remember\n> Component names must start with a capital letter.\n\nCommon Mistakes\n\n> [!BUG] Infinite Re-renders\n> Avoid calling setState directly in render methods.\n\n> [!TODO] Next Steps\n> - [ ] Learn about hooks\n> - [ ] Explore context API\n> - [ ] Practice with projects\n\n\nProject Documentation\n\nFeature Planning\nmarkdown\nFeature: User Dashboard\n\n> [!INFO] Overview\n> Create a personalized dashboard for users to manage their account.\n\nRequirements\n\n> [!IMPORTANT] Must Have\n> - User profile editing\n> - Activity history\n> - Settings management\n\n> [!QUESTION] To Consider\n> Should we include analytics or keep it simple?\n\nImplementation\n\n> [!EXAMPLE] Component Structure\n> \n> Dashboard/\n> \u251c\u2500\u2500 Profile.jsx\n> \u251c\u2500\u2500 Activity.jsx\n> \u2514\u2500\u2500 Settings.jsx\n> \n\n> [!WARNING] Security\n> Ensure all user data is properly validated and sanitized.\n\nKnown Issues\n\n> [!BUG] Mobile Layout\n> Dashboard components don't resize properly on mobile devices.\n\n> [!TODO] Action Items\n> - [ ] Create wireframes\n> - [ ] Design mockups\n> - [ ] Implement components\n> - [ ] Write tests\n\n\n\ud83c\udfa8 Theme Integration\n\nColor Adaptation\nCallouts automatically adapt to your chosen theme:\n- Dark themes - Muted colors with good contrast\n- Light themes - Bright colors with proper readability\n- Custom themes - Inherit theme color schemes\n\nAccessibility Features\n- High contrast - Clear visual distinction\n- Screen reader support - Proper semantic markup\n- Keyboard navigation - Accessible to all users\n- Color independence - Icons provide additional context\n\n\ud83d\udca1 Creative Usage Ideas\n\nLearning Materials\nUse callouts to create structured learning content:\n\nmarkdown\nJavaScript Fundamentals\n\n> [!NOTE] Learning Objectives\n> By the end of this lesson, you'll understand variables, functions, and objects.\n\n> [!EXAMPLE] Variables\n> javascript\n> let message = \"Hello, World!\";\n> const pi = 3.14159;\n> \n\n> [!TIP] Naming Convention\n> Use camelCase for variable names: firstName, lastName\n\n> [!QUESTION] Practice\n> What would happen if you try to reassign a const variable?\n\n> [!SUCCESS] Key Takeaway\n> Variables are the building blocks of JavaScript programs.\n\n\nProject Management\nCreate visual project status updates:\n\nmarkdown\nProject Alpha - Weekly Update\n\n> [!SUCCESS] Completed This Week\n> - User authentication system\n> - Database schema design\n> - API endpoints for user management\n\n> [!TODO] Next Week Goals\n> - [ ] Implement password reset\n> - [ ] Add email verification\n> - [ ] Create admin dashboard\n\n> [!WARNING] Blockers\n> Waiting for design approval on the admin interface.\n\n> [!IMPORTANT] Deadline Reminder\n> MVP deadline is next Friday. All core features must be complete.\n\n\nPersonal Notes\nEnhance journal entries and personal documentation:\n\nmarkdown\nDaily Journal - 2025-01-19\n\n> [!SUCCESS] Wins Today\n> - Completed the callout tutorial\n> - Fixed three critical bugs\n> - Had a productive team meeting\n\n> [!QUESTION] Reflection\n> What could I have done better during the client presentation?\n\n> [!TIP] Tomorrow's Focus\n> Start working on the new feature requirements early.\n\n> [!TODO] Personal Goals\n> - [ ] Exercise for 30 minutes\n> - [ ] Read one chapter of \"Clean Code\"\n> - [ ] Update project documentation\n\n\n\ud83d\udd27 Technical Implementation\n\nParsing Rules\nThe callout system uses these parsing rules:\n- Must start with > [!TYPE] \n- Type must be one of the 13 supported types\n- Optional title follows the type\n- Content continues with > prefix on each line\n\nCSS Classes\nEach callout generates HTML with specific classes:\n- .callout - Base callout styling\n- .callout-{type} - Type-specific styling (e.g., .callout-warning)\n- .callout-header - Title section\n- .callout-icon - Icon container\n- .callout-content - Content area\n\nJavaScript Processing\nThe markdown processor:\n1. Detects callout syntax\n2. Extracts type and title\n3. Generates appropriate HTML structure\n4. Applies theme-aware styling\n5. Includes semantic markup for accessibility\n\n\ud83c\udfaf Quick Reference\n\nSyntax Template\nmarkdown\n> [!TYPE] Optional Title\n> Your content here\n> Multiple lines supported\n> Markdown formatting works\n\n\nAll Types at a Glance\n- NOTE - General information\n- INFO - Important facts\n- TIP - Helpful advice\n- SUCCESS - Positive outcomes\n- QUESTION - Queries and prompts\n- WARNING - Potential issues\n- CAUTION - Proceed carefully\n- DANGER - Critical warnings\n- IMPORTANT - Must-read info\n- EXAMPLE - Demonstrations\n- QUOTE - Citations\n- BUG - Issues and problems\n- TODO - Tasks and reminders\n\n---\n\nCallouts are a powerful way to make your documentation more engaging and informative. Experiment with different types to find the perfect fit for your content!  > [!TYPE] Optional Custom Title\n> Your callout content goes here\n> You can use multiple lines\n> And even **markdown formatting** > [!NOTE] \n> This is a standard note callout for general information. > [!NOTE] Custom Title\n> You can customize the title of any callout to make it more specific. > [!INFO]\n> This callout highlights important information that users should be aware of. > [!INFO] System Requirements\n> This application requires Node.js version 16 or higher to run properly. > [!TIP]\n> Here's a helpful tip to improve your workflow! > [!TIP] Pro Tip\n> Use `Ctrl+K` to quickly access the search function from anywhere in the application. > [!SUCCESS]\n> Great job! This indicates a successful operation or positive outcome. > [!SUCCESS] Installation Complete\n> All dependencies have been successfully installed. You can now start the development server. > [!QUESTION]\n> This callout poses a question or highlights something that needs consideration. > [!QUESTION] Think About It\n> What would happen if we implemented this feature differently? Consider the trade-offs. > [!WARNING]\n> This warning alerts users to potential issues they should be aware of. > [!WARNING] Database Migration\n> Always backup your database before running migrations in production environments. > [!CAUTION]\n> Exercise caution when proceeding with this action. > [!CAUTION] Configuration Changes\n> Modifying these settings may affect system performance. Test in a development environment first. > [!DANGER]\n> This is a critical warning about dangerous operations or serious issues. > [!DANGER] Data Loss Risk\n> This command will permanently delete all files in the directory. This action cannot be undone. > [!IMPORTANT]\n> This callout highlights critical information that users must not miss. > [!IMPORTANT] Breaking Changes\n> Version 2.0 introduces breaking changes. Please review the migration guide before upgrading. > [!EXAMPLE]\n> This callout shows examples or demonstrates how something works. > [!EXAMPLE] API Usage\n>  > const response = await fetch('/api/users');\n> const users = await response.json();\n> > [!QUOTE]\n> This callout is perfect for quotations or cited material. > [!QUOTE] Albert Einstein\n> \"The important thing is not to stop questioning. Curiosity has its own reason for existence.\" > [!BUG]\n> This callout identifies bugs, known issues, or problems that need attention. > [!BUG] Known Issue\n> The search function may return incorrect results when using special characters. Fix planned for v1.2. > [!TODO]\n> This callout marks tasks or items that need to be completed. > [!TODO] Documentation Updates\n> - [ ] Update API documentation\n> - [ ] Add more code examples\n> - [ ] Review and publish changes > [!INFO] Main Information\n> This is the main information block.\n> \n> > [!WARNING] Nested Warning\n> > This is a warning inside the info block.\n> > \n> > > [!TIP] Deeply Nested Tip\n> > > This tip is nested two levels deep. > [!EXAMPLE] Rich Content Example\n> You can include **bold text**, *italic text*, `inline code`, and even:\n> \n> - Bullet points\n> - Task lists: \n>   - [x] Completed task\n>   - [ ] Pending task\n> \n> | Column 1 | Column 2 |\n> |----------|----------|\n> | Data 1   | Data 2   |\n> \n>  > // Even code blocks!\n> function example() {\n>     return \"Hello from inside a callout!\";\n> }\n> > [!NOTE] Long Content Example\n> This is a longer callout that spans multiple lines.\n> \n> You can have multiple paragraphs inside a callout by continuing\n> the `>` marker on each line.\n> \n> This technique is useful for longer explanations or when you\n> need to include multiple types of content. <!-- Good -->\n> [!TIP] Keyboard Shortcut\n> Use Ctrl+K to search\n\n<!-- Less effective -->\n> [!TIP] Here's a Really Useful Keyboard Shortcut You Should Know About\n> Use Ctrl+K to search <!-- Good -->\n> [!WARNING] Backup Required\n> Always backup your database before running migrations.\n\n<!-- Less clear -->\n> [!WARNING] \n> You might want to consider maybe backing up your database or something. <!-- Good match -->\n> [!DANGER] Data Loss Risk\n> This command will permanently delete all files.\n\n<!-- Poor match -->\n> [!TIP] Data Loss Risk\n> This command will permanently delete all files. # Installation Guide\n\n## Prerequisites\n\n> [!INFO] System Requirements\n> - Node.js 16 or higher\n> - npm 7 or higher\n\n## Installation Steps\n\n1. Clone the repository\n2. Install dependencies\n\n> [!TIP] Pro Tip\n> Use `npm ci` instead of `npm install` for faster, reliable installs.\n\n3. Configure environment\n\n> [!WARNING] Environment Variables\n> Copy `.env.example` to `.env` and update with your values.\n\n## Troubleshooting\n\n> [!BUG] Common Issue\n> If you see \"Module not found\" errors, try deleting `node_modules` and running `npm install` again. # User API\n\n> [!INFO] Base URL\n> All endpoints use the base URL: `https://api.example.com/v1`\n\n## Authentication\n\n> [!IMPORTANT] API Key Required\n> All requests must include an API key in the header.\n\n> [!EXAMPLE] Request Header\n> ## Get User\n\n> [!EXAMPLE] Request\n> > [!SUCCESS] Response\n> > [!DANGER] Rate Limits\n> This endpoint is limited to 100 requests per minute. # React Tutorial\n\n> [!NOTE] Prerequisites\n> Basic knowledge of JavaScript and HTML required.\n\n## Setup\n\n> [!TIP] Quick Start\n> Use Create React App for fastest setup: `npx create-react-app my-app`\n\n## Components\n\n> [!EXAMPLE] Basic Component\n> > [!IMPORTANT] Remember\n> Component names must start with a capital letter.\n\n## Common Mistakes\n\n> [!BUG] Infinite Re-renders\n> Avoid calling `setState` directly in render methods.\n\n> [!TODO] Next Steps\n> - [ ] Learn about hooks\n> - [ ] Explore context API\n> - [ ] Practice with projects # Feature: User Dashboard\n\n> [!INFO] Overview\n> Create a personalized dashboard for users to manage their account.\n\n## Requirements\n\n> [!IMPORTANT] Must Have\n> - User profile editing\n> - Activity history\n> - Settings management\n\n> [!QUESTION] To Consider\n> Should we include analytics or keep it simple?\n\n## Implementation\n\n> [!EXAMPLE] Component Structure\n> > [!WARNING] Security\n> Ensure all user data is properly validated and sanitized.\n\n## Known Issues\n\n> [!BUG] Mobile Layout\n> Dashboard components don't resize properly on mobile devices.\n\n> [!TODO] Action Items\n> - [ ] Create wireframes\n> - [ ] Design mockups\n> - [ ] Implement components\n> - [ ] Write tests # JavaScript Fundamentals\n\n> [!NOTE] Learning Objectives\n> By the end of this lesson, you'll understand variables, functions, and objects.\n\n> [!EXAMPLE] Variables\n> > [!TIP] Naming Convention\n> Use camelCase for variable names: `firstName`, `lastName`\n\n> [!QUESTION] Practice\n> What would happen if you try to reassign a `const` variable?\n\n> [!SUCCESS] Key Takeaway\n> Variables are the building blocks of JavaScript programs. # Project Alpha - Weekly Update\n\n> [!SUCCESS] Completed This Week\n> - User authentication system\n> - Database schema design\n> - API endpoints for user management\n\n> [!TODO] Next Week Goals\n> - [ ] Implement password reset\n> - [ ] Add email verification\n> - [ ] Create admin dashboard\n\n> [!WARNING] Blockers\n> Waiting for design approval on the admin interface.\n\n> [!IMPORTANT] Deadline Reminder\n> MVP deadline is next Friday. All core features must be complete. # Daily Journal - 2025-01-19\n\n> [!SUCCESS] Wins Today\n> - Completed the callout tutorial\n> - Fixed three critical bugs\n> - Had a productive team meeting\n\n> [!QUESTION] Reflection\n> What could I have done better during the client presentation?\n\n> [!TIP] Tomorrow's Focus\n> Start working on the new feature requirements early.\n\n> [!TODO] Personal Goals\n> - [ ] Exercise for 30 minutes\n> - [ ] Read one chapter of \"Clean Code\"\n> - [ ] Update project documentation > [!TYPE] Optional Title\n> Your content here\n> Multiple lines supported\n> **Markdown** formatting works",
      "code_blocks_count": 51
    },
    {
      "path": "/notes/tutorials/features/context-menus.md",
      "context": "tutorials",
      "metadata": {
        "title": "Context Menus Guide",
        "tags": [
          "interface",
          "context-menus",
          "productivity",
          "right-click",
          "shortcuts"
        ],
        "created": "2025-06-24",
        "author": "Wiki Admin",
        "description": "Master the comprehensive context menu system with 16+ right-click menus for enhanced productivity",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "The Notes Wiki features a comprehensive context menu system with 16+ different right-click menus that provide quick access to actions and options throughout the interface.\n\n\n\n\n- Right-click on any UI ...",
      "searchable_content": "\nContext Menus Guide\n\nThe Notes Wiki features a comprehensive context menu system with 16+ different right-click menus that provide quick access to actions and options throughout the interface.\n\n\ud83d\uddb1\ufe0f Context Menu Basics\n\nHow to Access\n- Right-click on any UI element to see available actions\n- Context-sensitive - menus show relevant options for each element\n- Quick actions - Faster than navigating through multiple menus\n\nGeneral Features\n- Intelligent positioning - Menus adjust to stay on screen\n- Keyboard navigation - Use arrow keys and Enter\n- Auto-close - Click outside or press Escape to close\n- Visual feedback - Icons and clear labels for all actions\n\n\ud83d\udcc4 Note Context Menus\n\nNote Links (Search Results, Sidebar, Bookmarks)\nRight-click any note link for these options:\n\n| Action | Description |\n|--------|-------------|\n| Open in New Tab | Opens note in a new tab |\n| Bookmark Note | Add to bookmarks (or remove if already bookmarked) |\n| Share Note | Copy note URL to clipboard |\n\nBenefits\n- Quick tab management - Open multiple notes efficiently\n- Bookmark organization - Add/remove bookmarks instantly\n- Easy sharing - Get shareable links without navigation\n\n\ud83d\udcd1 Tab Context Menus\n\nTab Bar\nRight-click any tab for these actions:\n\n| Action | Description |\n|--------|-------------|\n| Pin/Unpin Tab | Toggle pin status for tab persistence |\n| Close Tab | Close the selected tab |\n| Close Other Tabs | Close all tabs except the selected one |\n| Close All Tabs | Close all open tabs |\n\nTab Bar Background\nRight-click empty tab bar space:\n- New Tab - Create a new empty tab\n\nClose All Button\nRight-click the close all button (X):\n- Force Close Pinned Tabs - Override pin protection\n\n\ud83d\udcbb Code Block Context Menus\n\nCode Block Actions\nRight-click any code block for these options:\n\n| Action | Description |\n|--------|-------------|\n| Copy Code | Copy code to clipboard with formatting |\n| Select All Code | Select entire code block |\n| Language Info | Display programming language |\n| Download as File | Save as structured markdown file |\n| Wrap/Unwrap Lines | Toggle line wrapping |\n\nCode Block Dropdown\nClick the three dots (\u22ef) button for the same context menu actions.\n\n\ud83c\udfa8 Theme Context Menus\n\nTheme Cards\nRight-click any theme in the theme picker:\n\n| Action | Description |\n|--------|-------------|\n| Apply Theme | Set as current theme immediately |\n| Add/Remove Favorites | Toggle favorite status |\n| Preview Theme | Temporary preview with auto-revert |\n\nBenefits\n- Quick theme switching - Apply themes without clicking\n- Favorites management - Organize preferred themes\n- Risk-free preview - Test themes without committing\n\n\ud83e\udded Navigation Context Menus\n\nSite Brand (Notes Wiki Logo)\nRight-click the site logo for navigation options:\n\n| Action | Description |\n|--------|-------------|\n| Go to Home | Navigate to index page |\n| View All Notes | Show all contexts/notes |\n| Random Note | Open a random note |\n| Show Keyboard Shortcuts | Display shortcuts help |\n| About Notes Wiki | Show application information |\n\nSidebar Elements\nRight-click sidebar sections:\n- Refresh - Reload sidebar content\n- Expand/Collapse - Toggle section visibility\n\n\ud83d\udd0d Search & Filter Context Menus\n\nSearch Input\nRight-click the search box:\n- Clear Search - Reset search field\n- Search History - Access recent searches\n- Search Operators - Quick reference for search syntax\n\nFilter Elements\nRight-click filter buttons:\n- Clear All Filters - Reset all active filters\n- Filter Presets - Quick access to common filter combinations\n\n\u2699\ufe0f Settings Context Menus\n\nSettings Button\nRight-click the settings button (gear icon):\n\n| Action | Description |\n|--------|-------------|\n| Import Settings | Load settings from file |\n| Export Settings | Save settings to file |\n| Reset to Defaults | Restore default settings |\n| Backup Settings | Create settings backup |\n\nRecent Files\nRight-click the recent files button:\n- Clear History - Remove all recent files\n- Set Limit - Adjust how many recent files to track\n\nBookmarks\nRight-click the bookmarks button:\n- Export Bookmarks - Save bookmarks to file\n- Clear All Bookmarks - Remove all bookmarks\n- Import Bookmarks - Load bookmarks from file\n\n\ud83d\udcdd Quick Notes Context Menus\n\nQuick Notes Panel\nRight-click the Quick Notes button:\n\n| Action | Description |\n|--------|-------------|\n| Toggle Panel | Show/hide Quick Notes panel |\n| Import Notes | Load notes from file |\n| Export Notes | Save notes to file |\n| Clear All Notes | Remove all quick notes |\n\nIndividual Quick Notes\nRight-click any quick note:\n- Edit Note - Modify note content\n- Delete Note - Remove the note\n- Duplicate Note - Create a copy\n\n\u23f1\ufe0f Timer Context Menus\n\nPomodoro Timer\nRight-click the timer display:\n\n| Action | Description |\n|--------|-------------|\n| 25 Minutes | Start standard Pomodoro session |\n| 15 Minutes | Start short session |\n| 45 Minutes | Start extended session |\n| Custom Time | Set custom duration |\n\n\ud83c\udff7\ufe0f Tag Context Menus\n\nTag Elements\nRight-click tag filters:\n- Clear Tag Filters - Remove all tag selections\n- Popular Tags - Show most frequently used tags\n- Tag Statistics - View tag usage information\n\n\ud83d\udca1 Context Menu Tips\n\nProductivity Shortcuts\n1. Learn common menus - Focus on note, tab, and code block menus\n2. Use keyboard navigation - Arrow keys + Enter for speed\n3. Combine with hotkeys - Context menus + keyboard shortcuts\n4. Right-click everything - Discover hidden functionality\n\nAccessibility Features\n- High contrast icons - Clear visual indicators\n- Keyboard accessible - Full keyboard navigation support\n- Screen reader friendly - Proper ARIA labels\n- Consistent patterns - Similar actions work the same way\n\nBest Practices\n- Explore systematically - Right-click different UI elements\n- Use for repetitive tasks - Faster than menu navigation\n- Combine with workflows - Integrate into your note-taking process\n- Customize through settings - Some menu behaviors are configurable\n\n\ud83c\udfaf Context Menu Summary\n\nThe Notes Wiki provides 16+ specialized context menus:\n\n1. Note Links - Open, bookmark, share actions\n2. Tab Management - Pin, close, navigate tabs\n3. Code Blocks - Copy, download, format code\n4. Theme Cards - Apply, favorite, preview themes\n5. Site Navigation - Home, random note, shortcuts\n6. Search & Filters - Clear, history, operators\n7. Settings - Import, export, reset options\n8. Quick Notes - Manage temporary notes\n9. Timer Controls - Pomodoro presets and timing\n10. Tag Management - Filter and organize tags\n11. Sidebar Elements - Expand, refresh, navigate\n12. Recent Files - History and limit controls\n13. Bookmarks - Organization and export\n14. Tab Bar - New tab and close actions\n15. Close Buttons - Force close and overrides\n16. Filter Buttons - Quick filter management\n\nGet Started! \ud83d\ude80\n\nStart exploring: Right-click any element in the interface to discover available actions. The context menu system is designed to make your workflow more efficient and provide quick access to powerful features.\n\nPro tip: Make context menus part of your regular workflow - they can significantly speed up common tasks like tab management, theme switching, and code actions!",
      "code_blocks_count": 0
    },
    {
      "path": "/notes/tutorials/features/focus-mode.md",
      "context": "tutorials",
      "metadata": {
        "title": "Focus Mode Guide",
        "tags": [
          "focus-mode",
          "productivity",
          "distraction-free",
          "reading",
          "concentration"
        ],
        "created": "2025-06-24",
        "author": "Wiki Admin",
        "description": "Master Focus Mode for distraction-free reading and writing with enhanced concentration",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Focus Mode provides a distraction-free reading environment by minimizing visual clutter and maximizing content focus. Perfect for deep reading sessions, writing, and concentrated work.\n\n\n\n\nFocus Mode ...",
      "searchable_content": "\nFocus Mode Guide\n\nFocus Mode provides a distraction-free reading environment by minimizing visual clutter and maximizing content focus. Perfect for deep reading sessions, writing, and concentrated work.\n\n\ud83c\udfaf What is Focus Mode?\n\nPurpose\nFocus Mode transforms the Notes Wiki interface into a minimal, distraction-free environment designed for:\n- Deep reading - Extended reading sessions without interruptions\n- Focused writing - Concentrated content creation\n- Research sessions - Immersive information consumption\n- Study periods - Enhanced concentration for learning\n- Presentation mode - Clean interface for sharing content\n\nVisual Changes\nWhen Focus Mode is activated:\n- Simplified interface - Removes non-essential UI elements\n- Enhanced readability - Optimized typography and spacing\n- Reduced visual noise - Minimal distractions\n- Content-first layout - Maximum space for actual content\n- Clean backgrounds - Simplified color schemes\n\n\u2328\ufe0f Activating Focus Mode\n\nPrimary Method\nKeyboard Shortcut:\n- Press F key to toggle Focus Mode on/off\n- Instant activation - No menus or complex interactions\n- Quick toggle - Switch in and out seamlessly\n\nVisual Feedback\nWhen Entering Focus Mode:\n- Smooth transition - Animated interface changes\n- Visual confirmation - Brief indicator showing mode activation\n- Immediate effect - Interface changes instantly\n\nWhen Exiting Focus Mode:\n- Restoration - All UI elements return to normal\n- Preserved state - Tab positions and content unchanged\n- Seamless return - No data loss or disruption\n\n\ud83c\udfa8 Focus Mode Features\n\nInterface Simplification\n\nHidden Elements:\n- Sidebar - Context switching and navigation panels\n- Header clutter - Non-essential buttons and indicators\n- Tab decorations - Simplified tab appearance\n- Status indicators - Minimized visual feedback\n- Background elements - Reduced visual complexity\n\nEnhanced Elements:\n- Content area - Expanded to use available space\n- Typography - Optimized for extended reading\n- Line spacing - Improved readability\n- Color contrast - Enhanced for eye comfort\n- Focus indicators - Clear current position markers\n\nReading Optimizations\n\nTypography Enhancements:\n- Improved line height - Better reading flow\n- Optimal line length - Comfortable reading width\n- Enhanced contrast - Reduced eye strain\n- Clean fonts - Distraction-free typefaces\n\nLayout Improvements:\n- Centered content - Natural reading position\n- Consistent spacing - Rhythmic visual flow\n- Minimal borders - Reduced visual breaks\n- Smooth scrolling - Comfortable navigation\n\n\ud83d\ude80 Focus Mode Workflows\n\nDeep Reading Workflow\nPerfect for extended reading sessions:\n\n\n1. Open main document\n2. Press F \u2192 Enter Focus Mode\n3. Read without distractions\n4. Use arrow keys for navigation\n5. Press F \u2192 Exit when finished\n\n\nBest Practices:\n- Single document focus - Avoid tab switching\n- Natural breaks - Use logical stopping points\n- Progressive reading - Take notes after sections\n\nWriting Workflow\nIdeal for concentrated content creation:\n\n\n1. Create or open document\n2. Press F \u2192 Minimize distractions\n3. Write in clean environment\n4. Focus on content, not interface\n5. Exit when ready for editing/formatting\n\n\nWriting Tips:\n- Content first - Focus on ideas, not formatting\n- Flow state - Maintain writing momentum\n- Minimal editing - Leave detailed editing for normal mode\n\nResearch Workflow\nEnhanced for information processing:\n\n\n1. Open research materials\n2. Enter Focus Mode for deep reading\n3. Exit to take notes or open references\n4. Re-enter for continued reading\n5. Cycle between focused and active modes\n\n\nResearch Strategy:\n- Focused consumption - Deep reading in Focus Mode\n- Active processing - Note-taking in normal mode\n- Rhythmic switching - Balance focus and action\n\nStudy Workflow\nOptimized for learning sessions:\n\n\n1. Open study materials\n2. Enter Focus Mode for concentration\n3. Read/study without interruption\n4. Exit for practice or note-taking\n5. Return to Focus Mode for continued study\n\n\n\u2699\ufe0f Focus Mode Settings\n\nConfiguration Options\nConfigure Focus Mode behavior in Settings \u2192 Appearance \u2192 Focus Mode:\n\nDefault State:\n- Start in Focus Mode - Begin sessions in focused state\n- Remember preference - Maintain Focus Mode across sessions\n- Auto-activation - Enable for specific content types\n\nVisual Customization:\n- Focus theme - Specialized color schemes for concentration\n- Typography adjustments - Enhanced reading fonts\n- Layout preferences - Content width and positioning\n- Animation speed - Transition timing preferences\n\nTheme Integration\nFocus Mode works seamlessly with all themes:\n- Theme adaptation - Applies focus enhancements to current theme\n- Consistent experience - Familiar colors with enhanced focus\n- Dark mode support - Optimized for low-light reading\n- Light mode benefits - Enhanced clarity for daytime use\n\n\ud83d\udca1 Focus Mode Best Practices\n\nWhen to Use Focus Mode\n\nIdeal Scenarios:\n- \u2705 Extended reading - Long documents or research papers\n- \u2705 Writing sessions - Creating content without distractions\n- \u2705 Study periods - Learning new material\n- \u2705 Code review - Examining code blocks in detail\n- \u2705 Presentation - Sharing content with others\n\nLess Ideal Scenarios:\n- \u274c Quick reference - Brief information lookup\n- \u274c Multi-tab work - Frequent tab switching needed\n- \u274c Research with note-taking - Active information processing\n- \u274c Interface exploration - Learning new features\n\nMaximizing Focus Benefits\n\nEnvironment Setup:\n\nPhysical: Quiet space, comfortable seating, good lighting\nDigital: Close other applications, silence notifications\nMental: Clear objectives, defined reading goals\n\n\nSession Management:\n- Set time limits - 25-45 minute focused sessions\n- Take breaks - Regular intervals for eye rest\n- Single-tasking - One document at a time\n- Clear objectives - Know what you want to accomplish\n\nFocus Mode Habits\n\nEntry Rituals:\n1. Clear intention - Define what you want to read/write\n2. Prepare environment - Minimize external distractions\n3. Enter Focus Mode - Press F to start session\n4. Settle in - Take a moment to adjust\n\nExit Strategies:\n1. Natural stopping point - Complete sections or thoughts\n2. Brief reflection - Consider what you've accomplished\n3. Exit gracefully - Press F to return to normal mode\n4. Next actions - Plan follow-up tasks\n\n\ud83c\udfad Focus Mode vs Normal Mode\n\nFeature Comparison\n\n| Aspect | Normal Mode | Focus Mode |\n|--------|-------------|------------|\n| Interface | Full UI elements | Simplified interface |\n| Distractions | Multiple UI elements | Minimal visual clutter |\n| Content Space | Standard layout | Expanded content area |\n| Tab Switching | Easy access | Requires exit/re-enter |\n| Multitasking | Encouraged | Discouraged |\n| Use Case | Active work | Passive consumption |\n\nSwitching Strategy\n\nEffective Patterns:\n\nResearch: Normal \u2192 Focus \u2192 Normal \u2192 Focus\nWriting: Focus (draft) \u2192 Normal (edit) \u2192 Focus (review)\nStudy: Focus (reading) \u2192 Normal (notes) \u2192 Focus (continued)\n\n\nTransition Timing:\n- Enter Focus Mode - When ready for deep work\n- Stay in Focus Mode - For uninterrupted sessions\n- Exit Focus Mode - When needing UI interaction\n- Re-enter quickly - Use F key for rapid switching\n\n\ud83d\udcf1 Device Considerations\n\nDesktop Experience\n- Large screens - Maximum benefit from expanded content area\n- Keyboard shortcuts - F key easily accessible\n- Extended sessions - Comfortable for long periods\n- Multiple monitors - Focus Mode on primary display\n\nLaptop Usage\n- Medium screens - Good balance of focus and functionality\n- Battery conservation - Reduced UI rendering\n- Portable sessions - Focused work anywhere\n- Keyboard accessibility - Standard F key layout\n\nMobile Adaptations\n- Limited screen - Even more important space optimization\n- Touch interface - Alternative activation methods\n- Reading focus - Primary benefit on small screens\n- Battery efficiency - Simplified rendering\n\n\ud83d\udd27 Troubleshooting Focus Mode\n\nCommon Issues\n\nFocus Mode Not Activating:\n- Check F key - Ensure key is functioning\n- Browser focus - Click in content area first\n- Keyboard conflicts - Check for browser shortcuts\n- Settings verification - Confirm Focus Mode is enabled\n\nVisual Problems:\n- Theme compatibility - Try different themes\n- Browser zoom - Reset to default zoom level\n- Window size - Ensure adequate screen space\n- Cache issues - Refresh page if needed\n\nExit Difficulties:\n- F key toggle - Press F again to exit\n- Escape fallback - Use Esc key as alternative\n- Refresh option - Reload page if stuck\n- Settings reset - Disable and re-enable feature\n\nPerformance Optimization\n\nSmooth Operation:\n- Close unused tabs - Reduce memory usage\n- Adequate RAM - Ensure sufficient system resources\n- Updated browser - Use recent browser versions\n- Clean cache - Clear browser cache periodically\n\n\ud83c\udfaf Advanced Focus Techniques\n\nFocus Mode Combinations\n\nWith Other Features:\n- Focus + Split View - Compare documents in clean interface\n- Focus + Bookmarks - Quick access to important content\n- Focus + Search - Find information without distraction\n- Focus + Themes - Optimal visual environment\n\nPower User Tips\n\nKeyboard Mastery:\n\nF - Toggle Focus Mode\nArrow keys - Navigate content\nCtrl+F - Find in document (if needed)\nEsc - Quick exit from any modal\n\n\nSession Planning:\n1. Pre-session setup - Prepare documents and environment\n2. Focus activation - Enter mode with clear intent\n3. Immersive work - Maintain focus without switching\n4. Planned exits - Leave mode at natural break points\n\n---\n\nFocus Mode Mastery\n\nFocus Mode transforms your reading and writing experience by eliminating distractions and optimizing for concentration. Develop the habit of using Focus Mode for deep work sessions and watch your productivity and comprehension improve.\n\nRemember: Focus Mode is about quality over quantity - use it when you want to engage deeply with content rather than quickly reference information.\n\nGet Started: Press F right now to experience Focus Mode and see how it changes your interaction with content! \ud83c\udfaf 1. Open main document\n2. Press F \u2192 Enter Focus Mode\n3. Read without distractions\n4. Use arrow keys for navigation\n5. Press F \u2192 Exit when finished 1. Create or open document\n2. Press F \u2192 Minimize distractions\n3. Write in clean environment\n4. Focus on content, not interface\n5. Exit when ready for editing/formatting 1. Open research materials\n2. Enter Focus Mode for deep reading\n3. Exit to take notes or open references\n4. Re-enter for continued reading\n5. Cycle between focused and active modes 1. Open study materials\n2. Enter Focus Mode for concentration\n3. Read/study without interruption\n4. Exit for practice or note-taking\n5. Return to Focus Mode for continued study Physical: Quiet space, comfortable seating, good lighting\nDigital: Close other applications, silence notifications\nMental: Clear objectives, defined reading goals Research: Normal \u2192 Focus \u2192 Normal \u2192 Focus\nWriting: Focus (draft) \u2192 Normal (edit) \u2192 Focus (review)\nStudy: Focus (reading) \u2192 Normal (notes) \u2192 Focus (continued) F - Toggle Focus Mode\nArrow keys - Navigate content\nCtrl+F - Find in document (if needed)\nEsc - Quick exit from any modal",
      "code_blocks_count": 7
    },
    {
      "path": "/notes/tutorials/features/pomodoro-timer.md",
      "context": "tutorials",
      "metadata": {
        "title": "Pomodoro Timer Guide",
        "tags": [
          "pomodoro",
          "timer",
          "productivity",
          "focus",
          "time-management",
          "workflow"
        ],
        "created": "2025-06-24",
        "author": "Wiki Admin",
        "description": "Master the built-in Pomodoro timer for enhanced focus, productivity, and time management",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "The Notes Wiki includes a built-in Pomodoro timer to enhance your focus and productivity while reading, writing, and researching. Use proven time management techniques to maximize your concentration a...",
      "searchable_content": "\nPomodoro Timer Guide\n\nThe Notes Wiki includes a built-in Pomodoro timer to enhance your focus and productivity while reading, writing, and researching. Use proven time management techniques to maximize your concentration and maintain healthy work rhythms.\n\n\u23f1\ufe0f What is the Pomodoro Technique?\n\nTechnique Overview\nThe Pomodoro Technique is a time management method that uses focused work intervals followed by short breaks:\n\n1. Work for 25 minutes (one \"Pomodoro\")\n2. Take a 5-minute break\n3. Repeat 3-4 cycles\n4. Take a longer break (15-30 minutes)\n\nBenefits\n- Enhanced focus - Concentrated work periods without distractions\n- Reduced fatigue - Regular breaks prevent mental exhaustion\n- Better time awareness - Clear understanding of time spent on tasks\n- Improved productivity - Structured approach to work completion\n- Break enforcement - Prevents overwork and burnout\n\n\ud83c\udfaf Accessing the Timer\n\nTimer Location\nThe Pomodoro timer is integrated into the Notes Wiki interface:\n- Timer display - Visible in the header area\n- Always accessible - Available on all pages and modes\n- Theme integrated - Adapts to your current theme\n- Unobtrusive - Doesn't interfere with content\n\nTimer Controls\nPrimary Interactions:\n- Right-click timer display - Access timer context menu\n- Click timer - View current status and controls\n- Visual indicators - Clear progress and status display\n- Audio notifications - Sound alerts for session completion\n\n\ud83d\uddb1\ufe0f Timer Context Menu\n\nQuick Start Options\nRight-click the timer display for instant presets:\n\n| Preset Name | Work Time | Short Break | Long Break | Description | Best For |\n|-------------|-----------|-------------|------------|-------------|----------|\n| Classic | 25 min | 5 min | 15 min | 25/5/15 min | Traditional Pomodoro, general productivity |\n| Extended | 50 min | 10 min | 20 min | 50/10/20 min | Longer focus sessions, complex tasks |\n| Short Focus | 15 min | 5 min | 15 min | 15/5/15 min | Quick tasks, email, light reading |\n| Long Focus | 45 min | 15 min | 30 min | 45/15/30 min | Deep work, research, analysis |\n| Deep Work | 90 min | 20 min | 30 min | 90/20/30 min | Extended concentration, complex projects |\n\nAdditional Options:\n- Timer Settings - Access full timer configuration\n- Pomodoro Settings - Customize presets and behavior\n\nPreset Use Cases\n\nClassic (25/5/15 min):\n- Traditional Pomodoro - Original technique timing for general productivity\n- Focused reading - Single document concentration without interruption\n- Writing sessions - Draft creation, editing, and content development\n- Code review - Examining implementations and documentation\n- Research tasks - Information gathering and initial analysis\n\nShort Focus (15/5/15 min):\n- Quick tasks - Email processing, brief reviews, administrative work\n- Light reading - Articles, short documents, quick research\n- Planning sessions - Task organization, daily planning, goal setting\n- Break activities - Short learning sessions, skill practice\n- Transition periods - Between major tasks or after meetings\n\nLong Focus (45/15/30 min):\n- Deep work sessions - Complex problem solving requiring sustained attention\n- Comprehensive research - Multi-source analysis, data gathering\n- Creative work - Design, writing, strategic planning\n- Study sessions - In-depth learning, exam preparation\n- Technical tasks - Programming, system administration, analysis\n\nExtended (50/10/20 min):\n- Project work - Substantial task completion requiring extended focus\n- Long-form writing - Articles, reports, documentation creation\n- Complex analysis - Data interpretation, research synthesis\n- Learning sessions - Tutorial completion, skill development\n- Administrative blocks - Batch processing of similar tasks\n\nDeep Work (90/20/30 min):\n- Flow state activities - Tasks requiring maximum concentration\n- Creative projects - Art, design, complex writing, strategic thinking\n- Research deep dives - Comprehensive literature reviews, analysis\n- Complex programming - Algorithm development, system design\n- Intensive study - Difficult material, certification preparation\n\nChoosing the Right Preset:\n- Energy level - Match session length to your current energy\n- Task complexity - Longer sessions for complex, shorter for simple tasks\n- Time constraints - Use available time blocks effectively\n- Personal preference - Experiment to find your optimal focus duration\n- Context switching - Shorter sessions when frequently interrupted\n\n\u2699\ufe0f Timer Features\n\nVisual Feedback\nTimer Display Elements:\n- Countdown display - Real-time remaining time\n- Progress indicator - Visual completion progress\n- Status icons - Play, pause, stop states\n- Session counter - Track completed Pomodoros\n- Phase indication - Work vs. break periods\n\nTheme Integration:\n- Color adaptation - Matches current theme\n- Consistent styling - Integrated with interface\n- High contrast - Readable in all themes\n- Icon clarity - Clear visual indicators\n\nAudio Notifications\nSound Alerts:\n- Session start - Gentle notification sound\n- Session end - Completion alert\n- Break reminders - Break time notifications\n- Custom sounds - Configurable alert tones (future feature)\n\nAudio Controls:\n- Volume adjustment - Adjustable notification volume\n- Mute option - Silent mode for quiet environments\n- Sound selection - Choose preferred alert sounds\n\nSession Management\nTimer States:\n- Active - Timer counting down\n- Paused - Timer temporarily stopped\n- Stopped - Timer reset or inactive\n- Break mode - Rest period timing\n- Completed - Session finished\n\nSession Tracking:\n- Completed Pomodoros - Count finished sessions\n- Total time - Track cumulative work time\n- Session history - Review past timer usage\n- Productivity metrics - Analyze work patterns\n\n\ud83d\ude80 Pomodoro Workflows\n\nClassic Pomodoro Workflow\nTraditional technique implementation:\n\n\n1. Choose task or document\n2. Right-click timer \u2192 \"Classic (25/5/15 min)\"\n3. Work with full focus for 25 minutes\n4. Take 5-minute break when timer ends\n5. Repeat for 4 cycles\n6. Take 15-minute long break (as configured in Classic preset)\n\n\nBreak Activities:\n- Stand and stretch - Physical movement\n- Hydrate - Drink water or tea\n- Look away from screen - Rest eyes\n- Quick walk - Light physical activity\n- Breathing exercises - Mental reset\n\nReading Workflow\nOptimized for content consumption:\n\n\n1. Open document or article\n2. Choose appropriate preset:\n   - Classic (25 min) for standard reading\n   - Short Focus (15 min) for quick articles\n   - Long Focus (45 min) for complex material\n3. Read without distractions during work period\n4. Note key points during break\n5. Continue with next session\n\n\nReading Tips:\n- Single document focus - Avoid tab switching\n- No note-taking during timer - Full reading focus\n- Bookmark stopping points - Easy session resumption\n- Review notes during breaks - Process information\n\nWriting Workflow\nEnhanced for content creation:\n\n\n1. Open draft or create new document\n2. Select preset based on writing task:\n   - Classic (25 min) for general writing\n   - Long Focus (45 min) for complex content\n   - Extended (50 min) for flow state writing\n   - Deep Work (90 min) for major projects\n3. Write continuously without editing during work period\n4. Save and step away during break\n5. Review and edit in next session\n\n\nWriting Strategies:\n- Draft first - Focus on content over perfection\n- No editing during timer - Maintain writing flow\n- Goal setting - Target word count or sections\n- Break planning - Use breaks for quick outlines\n\nResearch Workflow\nStructured for information gathering:\n\n\n1. Define research objectives\n2. Start 25-minute focused session\n3. Gather information from single source\n4. Organize findings during break\n5. Move to next source in new session\n\n\nResearch Techniques:\n- Source separation - One source per session\n- Quick note capture - Minimal note-taking during timer\n- Break organization - Structure findings between sessions\n- Reference tracking - Maintain source lists\n\nStudy Workflow\nDesigned for learning and retention:\n\n\n1. Prepare study materials\n2. 25-minute focused study session\n3. 5-minute review and note-taking\n4. Repeat with new material\n5. Longer break for reflection\n\n\nStudy Optimization:\n- Active reading - Engage with material\n- Concept focus - One topic per session\n- Break review - Reinforce learning\n- Spaced repetition - Return to topics across sessions\n\n\ud83c\udf9b\ufe0f Timer Customization\n\nSettings Integration\nConfigure timer behavior in Settings \u2192 Productivity \u2192 Timer:\n\nBasic Settings:\n- Default duration - Preferred session length\n- Auto-start breaks - Automatic break timer\n- Session goals - Daily Pomodoro targets\n- Notification preferences - Sound and visual alerts\n\nAdvanced Settings:\n- Long break intervals - After how many sessions\n- Custom durations - Saved preset times\n- Theme integration - Timer appearance options\n- Keyboard shortcuts - Quick timer controls\n\nNotification Customization\nAlert Options:\n- Volume levels - Adjustable notification volume\n- Sound themes - Different alert sounds\n- Visual notifications - Browser notifications\n- Silent mode - No audio alerts\n\nTiming Preferences:\n- Warning alerts - 5-minute remaining notifications\n- Break reminders - Encourage break-taking\n- Daily summaries - End-of-day productivity reports\n\n\ud83d\udcca Productivity Tracking\n\nSession Analytics\nTrack Your Progress:\n- Daily Pomodoros - Completed sessions per day\n- Focus time - Total productive time\n- Break adherence - Actual vs. planned breaks\n- Session patterns - Peak productivity periods\n\nWeekly Reviews:\n- Consistency tracking - Regular technique usage\n- Productivity trends - Improvement over time\n- Goal achievement - Target vs. actual completion\n- Habit formation - Building sustainable routines\n\nPerformance Insights\nAnalyze Your Data:\n- Peak hours - Most productive time periods\n- Session effectiveness - Quality vs. quantity\n- Break importance - Impact on subsequent sessions\n- Long-term trends - Productivity patterns\n\n\ud83d\udca1 Advanced Timer Techniques\n\nTimer Combinations\n\nWith Focus Mode:\n\n1. Enter Focus Mode (F key)\n2. Start Pomodoro timer\n3. Distraction-free, timed session\n4. Exit Focus Mode during breaks\n\n\nWith Split View:\n\n1. Open references in split view\n2. Start timer for focused comparison\n3. Work with side-by-side materials\n4. Organize findings during breaks\n\n\nWith Quick Notes:\n\n1. Open Quick Notes panel\n2. Start timer for capture session\n3. Rapid idea documentation\n4. Organize notes during breaks\n\n\nSpecialized Sessions\n\nLearning Sessions:\n- Study period - 25 minutes focused learning\n- Practice break - 5 minutes applying concepts\n- Review cycle - Return to difficult concepts\n\nCreative Sessions:\n- Idea generation - 15 minutes brainstorming\n- Implementation - 45 minutes focused creation\n- Reflection break - Evaluate and adjust\n\nPlanning Sessions:\n- Goal setting - 25 minutes planning\n- Action breakdown - Task decomposition\n- Priority review - Importance evaluation\n\n\ud83d\udd27 Troubleshooting Timer Issues\n\nCommon Problems\n\nTimer Not Starting:\n- Check browser permissions - Audio notifications enabled\n- Verify timer display - Ensure timer is visible\n- Context menu access - Right-click functionality\n- Page refresh - Reload if timer seems stuck\n\nAudio Not Working:\n- Browser audio settings - Unmute tab/browser\n- System volume - Check device audio\n- Permission settings - Allow notifications\n- Audio conflicts - Close other audio applications\n\nTimer Interruptions:\n- Browser focus - Keep tab active\n- System notifications - Minimize distractions\n- Power settings - Prevent computer sleep\n- Network stability - Maintain connection\n\nPerformance Optimization\n\nSmooth Operation:\n- Close unused tabs - Reduce memory usage\n- Stable internet - Prevent connectivity issues\n- Updated browser - Use recent versions\n- Adequate resources - Sufficient RAM/CPU\n\nBattery Conservation:\n- Timer efficiency - Minimal resource usage\n- Screen brightness - Adjust for longer sessions\n- Background apps - Close unnecessary programs\n- Power plan - Optimize for productivity\n\n\ud83d\udcf1 Mobile Timer Usage\n\nTouch Interface\nMobile Adaptations:\n- Touch controls - Tap timer for options\n- Responsive design - Adapts to screen size\n- Gesture support - Swipe interactions\n- Mobile notifications - Device integration\n\nMobile Considerations:\n- Battery usage - Timer impact on battery\n- Notification permissions - Allow alerts\n- Background operation - Maintain timer when app backgrounded\n- Lock screen - Timer continues when locked\n\nCross-Device Sync\nSession Continuity:\n- Local storage - Settings preserved per device\n- Manual sync - Export/import timer settings\n- Session independence - Device-specific tracking\n- Consistent experience - Same features across devices\n\n\ud83c\udfaf Pomodoro Best Practices\n\nTechnique Mastery\n\nGetting Started:\n1. Start small - Begin with 15-minute sessions\n2. Build consistency - Daily timer usage\n3. Respect breaks - Don't skip rest periods\n4. Track progress - Monitor improvements\n\nAdvanced Techniques:\n- Batch similar tasks - Group related activities\n- Eliminate distractions - Prepare environment\n- Set clear goals - Define session objectives\n- Celebrate completion - Acknowledge achievements\n\nCommon Mistakes to Avoid\n\nDon't:\n- \u274c Skip breaks - Breaks are essential for technique effectiveness\n- \u274c Multitask during sessions - Focus on single tasks\n- \u274c Extend sessions without breaks - Respect timing\n- \u274c Use timer for all tasks - Some activities don't fit the technique\n\nDo:\n- \u2705 Honor break time - Rest is productive\n- \u2705 Single-task focus - One activity per session\n- \u2705 Adjust as needed - Customize for your workflow\n- \u2705 Be consistent - Regular practice builds habits\n\nAdaptation Strategies\n\nPersonal Customization:\n- Find your rhythm - Discover optimal session lengths\n- Environment setup - Create productive spaces\n- Task matching - Align technique with work types\n- Energy management - Use timer during peak hours\n\nWorkflow Integration:\n- Meeting schedules - Plan around commitments\n- Deadline management - Use timer for time-bounded work\n- Collaboration - Coordinate with team rhythms\n- Energy cycles - Match technique to natural patterns\n\n---\n\nPomodoro Timer Mastery\n\nThe Pomodoro timer transforms how you approach work by providing structure, focus, and sustainable productivity patterns. Start with basic sessions, develop your personal rhythm, and integrate the technique into your regular workflow.\n\nRemember: The timer is a tool for focus, not a rigid rule. Adapt the technique to serve your productivity needs while maintaining the core principle of focused work followed by intentional breaks.\n\nGet Started: Right-click the timer display now and start your first 25-minute Pomodoro session! \ud83c\udf45 1. Choose task or document\n2. Right-click timer \u2192 \"Classic (25/5/15 min)\"\n3. Work with full focus for 25 minutes\n4. Take 5-minute break when timer ends\n5. Repeat for 4 cycles\n6. Take 15-minute long break (as configured in Classic preset) 1. Open document or article\n2. Choose appropriate preset:\n   - Classic (25 min) for standard reading\n   - Short Focus (15 min) for quick articles\n   - Long Focus (45 min) for complex material\n3. Read without distractions during work period\n4. Note key points during break\n5. Continue with next session 1. Open draft or create new document\n2. Select preset based on writing task:\n   - Classic (25 min) for general writing\n   - Long Focus (45 min) for complex content\n   - Extended (50 min) for flow state writing\n   - Deep Work (90 min) for major projects\n3. Write continuously without editing during work period\n4. Save and step away during break\n5. Review and edit in next session 1. Define research objectives\n2. Start 25-minute focused session\n3. Gather information from single source\n4. Organize findings during break\n5. Move to next source in new session 1. Prepare study materials\n2. 25-minute focused study session\n3. 5-minute review and note-taking\n4. Repeat with new material\n5. Longer break for reflection 1. Enter Focus Mode (F key)\n2. Start Pomodoro timer\n3. Distraction-free, timed session\n4. Exit Focus Mode during breaks 1. Open references in split view\n2. Start timer for focused comparison\n3. Work with side-by-side materials\n4. Organize findings during breaks 1. Open Quick Notes panel\n2. Start timer for capture session\n3. Rapid idea documentation\n4. Organize notes during breaks",
      "code_blocks_count": 8
    },
    {
      "path": "/notes/tutorials/features/quick-notes.md",
      "context": "tutorials",
      "metadata": {
        "title": "Quick Notes Guide",
        "tags": [
          "quick-notes",
          "productivity",
          "temporary-notes",
          "panel",
          "workflow"
        ],
        "created": "2025-06-24",
        "author": "Wiki Admin",
        "description": "Master the Quick Notes panel for temporary notes, quick capture, and side-by-side workflows",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "The Notes Wiki features a Quick Notes panel that slides out from the right side of the screen, providing instant access to temporary notes without leaving your current workspace.\n\n\n\n\nQuick Notes are t...",
      "searchable_content": "\nQuick Notes Guide\n\nThe Notes Wiki features a Quick Notes panel that slides out from the right side of the screen, providing instant access to temporary notes without leaving your current workspace.\n\n\ud83d\udcdd Quick Notes Basics\n\nWhat are Quick Notes?\nQuick Notes are temporary, lightweight notes perfect for:\n- Quick capture - Jot down ideas without interrupting your workflow\n- Temporary storage - Hold information while working on main notes\n- Side-by-side reference - Keep important info visible while reading\n- Draft snippets - Write quick drafts before adding to main notes\n- Task lists - Create quick to-do lists and reminders\n\nKey Features\n- Slide-out panel - Appears from the right side of the screen\n- Persistent storage - Notes saved automatically to localStorage\n- Multiple notes - Create and manage multiple quick notes\n- Rich text support - Full markdown formatting support\n- Context menus - Right-click actions for management\n- Import/Export - Backup and share your quick notes\n\n\ud83c\udfaf Accessing Quick Notes\n\nOpening the Panel\nPrimary Methods:\n- Click the Quick Notes button (\ud83d\udcdd) in the header\n- Keyboard shortcut - Press Ctrl+Shift+S (Mac: \u2318+Shift+S)\n- Right-click menu - Right-click the Quick Notes button for options\n\nPanel Behavior:\n- Slide animation - Smooth slide-in from right edge\n- Overlay mode - Panel appears over main content\n- Responsive width - Adapts to screen size\n- Auto-focus - Automatically focuses on note content\n\nClosing the Panel\n- Click outside the panel to close\n- Press Escape key\n- Click the Quick Notes button again to toggle\n- Use the close button (\u00d7) in the panel header\n\n\u270f\ufe0f Creating and Managing Notes\n\nAdding New Notes\nCreate a Quick Note:\n1. Open the Quick Notes panel\n2. Click the \"Add Note\" button (+) at the top\n3. Start typing - Note is created automatically\n4. Click outside the note or press Ctrl+Enter to save\n\nAuto-Save Features:\n- Real-time saving - Changes saved automatically as you type\n- No manual save required - Everything is persistent\n- Crash recovery - Notes recovered if browser crashes\n\nEditing Notes\nEdit Existing Notes:\n- Click any note to edit it\n- Start typing to modify content\n- Markdown support - Use standard markdown formatting\n- Multi-line support - Create longer notes with line breaks\n\nFormatting Support:\nmarkdown\nBold text\nItalic text\n- Bullet points\n1. Numbered lists\nLinks\nCode snippets\n\n\nDeleting Notes\nDelete Individual Notes:\n- Right-click the note \u2192 \"Delete Note\"\n- Confirmation dialog - Prevents accidental deletion\n- Permanent removal - Deleted notes cannot be recovered\n\nBulk Operations:\n- Right-click panel header \u2192 \"Clear All Notes\"\n- Confirmation required - Multiple confirmations for safety\n- Export first - Recommended before clearing all\n\n\ud83d\uddb1\ufe0f Quick Notes Context Menus\n\nPanel Context Menu\nRight-click the Quick Notes button in the header:\n\n| Action | Description |\n|--------|-------------|\n| Toggle Panel | Show/hide the Quick Notes panel |\n| Import Notes | Load quick notes from JSON file |\n| Export Notes | Save all notes to JSON file |\n| Clear All Notes | Remove all quick notes (with confirmation) |\n\nIndividual Note Context Menu\nRight-click any quick note:\n\n| Action | Description |\n|--------|-------------|\n| Edit Note | Enter edit mode for the note |\n| Delete Note | Remove the note (with confirmation) |\n| Duplicate Note | Create a copy of the note |\n\n\ud83d\udcbe Import and Export\n\nExporting Quick Notes\nSave Your Notes:\n1. Right-click Quick Notes button \u2192 \"Export Notes\"\n2. Choose filename - Defaults to quick-notes-YYYY-MM-DD.json\n3. Download file - JSON format with all note data\n4. Backup regularly - Especially before major changes\n\nExport Format:\njson\n{\n  \"notes\": [\n    {\n      \"id\": \"note-1\",\n      \"content\": \"My quick note content\",\n      \"created\": \"2025-06-24T10:30:00Z\",\n      \"modified\": \"2025-06-24T10:35:00Z\"\n    }\n  ],\n  \"exported\": \"2025-06-24T10:40:00Z\",\n  \"version\": \"1.0\"\n}\n\n\nImporting Quick Notes\nRestore or Load Notes:\n1. Right-click Quick Notes button \u2192 \"Import Notes\"\n2. Select JSON file - Must be valid quick notes export\n3. Choose merge mode - Replace all or add to existing\n4. Confirmation - Review before importing\n\nImport Options:\n- Replace All - Removes existing notes, imports from file\n- Merge - Adds imported notes to existing collection\n- Duplicate handling - Automatically resolves ID conflicts\n\n\ud83d\ude80 Quick Notes Workflows\n\nCapture Workflow\nPerfect for rapid idea capture:\n\n\n1. Reading main note \u2192 Idea occurs\n2. Ctrl+Shift+S \u2192 Open Quick Notes\n3. Type idea quickly \u2192 Auto-saves\n4. Esc \u2192 Close panel, continue reading\n5. Later: Review and organize captured ideas\n\n\nResearch Workflow\nIdeal for collecting information:\n\n\n1. Open Quick Notes panel\n2. Create note for each key point\n3. Copy relevant quotes/URLs\n4. Keep panel open during research\n5. Export notes when research complete\n\n\nTask Management Workflow\nUse for quick to-do lists:\n\n\nQuick Note 1:\n- [ ] Review project requirements\n- [ ] Update documentation\n- [ ] Schedule team meeting\n\nQuick Note 2:\nIdeas for next sprint:\n- Feature X improvements\n- Bug fixes for component Y\n- Performance optimization\n\n\nWriting Workflow\nGreat for draft snippets:\n\n\nQuick Note: \"Introduction ideas\"\n- Hook: Statistics about productivity\n- Problem: Information overload\n- Solution: Quick Notes system\n\nQuick Note: \"Key points to cover\"\n- Workflow integration\n- Context menu features\n- Export capabilities\n\n\n\u2328\ufe0f Keyboard Integration\n\nPrimary Shortcuts\n- Ctrl+Shift+S - Toggle Quick Notes panel (Mac: \u2318+Shift+S)\n- Escape - Close panel when open\n- Ctrl+Enter - Save current note and create new one\n- Tab - Navigate between notes in panel\n\nFocus Management\n- Auto-focus - New notes automatically receive focus\n- Tab navigation - Move between notes using Tab key\n- Return focus - Main content regains focus when panel closes\n\n\ud83d\udca1 Best Practices\n\nEffective Quick Notes Usage\n\nKeep Notes Atomic:\n- One idea per note - Easier to manage and organize\n- Clear, concise content - Quick reference without scrolling\n- Use descriptive first lines - Makes notes scannable\n\nOrganize Regularly:\n\nDaily: Review and clean up old notes\nWeekly: Export important notes to main documents\nMonthly: Archive or delete obsolete quick notes\n\n\nUse for the Right Content:\n- \u2705 Temporary ideas - Things you'll process later\n- \u2705 Quick references - URLs, quotes, snippets\n- \u2705 Draft content - Rough ideas before main notes\n- \u274c Permanent content - Use main notes instead\n- \u274c Long documents - Better suited for full notes\n\nPerformance Tips\n\nManage Note Count:\n- Limit active notes - Keep under 20 for best performance\n- Archive regularly - Export and clear old notes\n- Use main notes for permanent content\n\nOptimize Content:\n- Avoid very long notes - Split into multiple notes\n- Minimize formatting - Focus on content over styling\n- Regular cleanup - Remove notes no longer needed\n\nPrivacy and Security\n\nData Storage:\n- Local storage only - Notes stored in browser localStorage\n- No cloud sync - All data remains on your device\n- Export for backup - Regular exports recommended\n\nSharing Considerations:\n- Export selectively - Only share notes you intend to\n- Review content - Check for sensitive information\n- Use import/export - For controlled sharing\n\n\ud83c\udfa8 Panel Customization\n\nVisual Appearance\nThe Quick Notes panel adapts to your current theme:\n- Theme integration - Matches current color scheme\n- Responsive design - Works on all screen sizes\n- Smooth animations - Polished slide-in/out experience\n\nPanel Behavior\n- Persistent across sessions - Panel state remembered\n- Auto-resize - Adjusts to content length\n- Overlay positioning - Never blocks main content access\n\n\ud83d\udd27 Troubleshooting\n\nCommon Issues\n\nPanel Not Opening:\n- Check keyboard shortcut conflicts\n- Verify Quick Notes button is visible\n- Try refreshing the page\n\nNotes Not Saving:\n- Ensure localStorage is enabled\n- Check browser storage limits\n- Try clearing old data\n\nImport/Export Problems:\n- Verify JSON file format\n- Check file permissions\n- Ensure valid quick notes export format\n\nPerformance Issues:\n- Reduce number of active notes\n- Clear browser cache\n- Export and remove old notes\n\n\ud83d\udcf1 Mobile Support\n\nTouch Interface\n- Tap to open - Quick Notes button works on mobile\n- Swipe to close - Gesture support for panel closing\n- Touch editing - Native mobile text editing\n\nMobile Considerations\n- Smaller panel - Adapted for mobile screens\n- Simplified interface - Optimized for touch\n- Limited context menus - Some features desktop-only\n\n---\n\nQuick Notes Mastery\n\nQuick Notes transform how you capture and manage temporary information. Start with simple idea capture, develop your workflow patterns, and integrate the panel into your regular note-taking routine.\n\nRemember: Quick Notes are for temporary capture - move important content to main notes for permanent storage.\n\nGet Started: Press Ctrl+Shift+S right now to open the panel and create your first quick note! \ud83d\ude80 **Bold text**\n*Italic text*\n- Bullet points\n1. Numbered lists\n[Links](https://example.com)\n`Code snippets` {\n  \"notes\": [\n    {\n      \"id\": \"note-1\",\n      \"content\": \"My quick note content\",\n      \"created\": \"2025-06-24T10:30:00Z\",\n      \"modified\": \"2025-06-24T10:35:00Z\"\n    }\n  ],\n  \"exported\": \"2025-06-24T10:40:00Z\",\n  \"version\": \"1.0\"\n} 1. Reading main note \u2192 Idea occurs\n2. Ctrl+Shift+S \u2192 Open Quick Notes\n3. Type idea quickly \u2192 Auto-saves\n4. Esc \u2192 Close panel, continue reading\n5. Later: Review and organize captured ideas 1. Open Quick Notes panel\n2. Create note for each key point\n3. Copy relevant quotes/URLs\n4. Keep panel open during research\n5. Export notes when research complete Quick Note 1:\n- [ ] Review project requirements\n- [ ] Update documentation\n- [ ] Schedule team meeting\n\nQuick Note 2:\nIdeas for next sprint:\n- Feature X improvements\n- Bug fixes for component Y\n- Performance optimization Quick Note: \"Introduction ideas\"\n- Hook: Statistics about productivity\n- Problem: Information overload\n- Solution: Quick Notes system\n\nQuick Note: \"Key points to cover\"\n- Workflow integration\n- Context menu features\n- Export capabilities Daily: Review and clean up old notes\nWeekly: Export important notes to main documents\nMonthly: Archive or delete obsolete quick notes",
      "code_blocks_count": 7
    },
    {
      "path": "/notes/tutorials/features/settings-guide.md",
      "context": "tutorials",
      "metadata": {
        "title": "Settings Guide",
        "tags": [
          "settings",
          "configuration",
          "customization",
          "preferences",
          "interface"
        ],
        "created": "2025-06-24",
        "author": "Wiki Admin",
        "description": "Complete guide to customizing Notes Wiki through the comprehensive settings system",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "The Notes Wiki provides a comprehensive settings system to customize your experience, optimize workflows, and personalize the interface. Master these settings to create your ideal note-taking environm...",
      "searchable_content": "\nSettings Guide\n\nThe Notes Wiki provides a comprehensive settings system to customize your experience, optimize workflows, and personalize the interface. Master these settings to create your ideal note-taking environment.\n\n\u2699\ufe0f Accessing Settings\n\nPrimary Methods\nOpen Settings:\n- Keyboard shortcut - Press Ctrl+, (Mac: \u2318+,)\n- Settings button - Click the gear icon (\u2699\ufe0f) in the header\n- Menu navigation - Through application menus\n\nSettings Modal:\n- Tabbed interface - Organized by category\n- Real-time preview - See changes as you make them\n- Auto-save - Changes saved automatically\n- Import/Export - Backup and restore settings\n\n\ud83c\udfaf Settings Categories\n\nAppearance Settings\n\nTheme Configuration:\n- Theme selection - Choose from 74 professional themes\n- Auto theme - Match system light/dark preference\n- Theme favorites - Quick access to preferred themes\n- Custom CSS - Advanced styling options\n\nInterface Options:\n- Content width - Normal, wide, full-width layouts\n- Focus mode - Distraction-free reading toggle\n- Line numbers - Show/hide code block line numbers\n- Word wrap - Enable text wrapping for long lines\n\nVisual Preferences:\njavascript\n// Example settings structure\nappearance: {\n    theme: 'ayu-mirage',\n    autoTheme: false,\n    contentWidth: 'normal',\n    focusMode: false,\n    showLineNumbers: true,\n    enableWordWrap: true\n}\n\n\nNavigation Settings\n\nTab Management:\n- Tab limits - Maximum number of open tabs\n- Tab persistence - Restore tabs on startup\n- Pinned tab behavior - Protection and positioning\n- Close confirmations - Prevent accidental tab closure\n\nRecent Files:\n- Track recent files - Enable/disable recent file tracking\n- Recent limit - Number of files to remember (default: 20)\n- History display - Show recent files in interface\n- Auto-cleanup - Remove old entries automatically\n\nBookmarks:\n- Bookmark organization - Categorization options\n- Quick access - Bookmark button visibility\n- Sync options - Cross-device bookmark sharing\n- Export format - Backup file structure\n\nProductivity Settings\n\nSearch Configuration:\n- Search delay - Debounce timing for search input\n- Results per page - Pagination settings\n- Search operators - Enable advanced search syntax\n- History retention - Search history storage\n\nTimer Settings:\n- Default duration - Preferred Pomodoro length\n- Break intervals - Rest period timing\n- Audio notifications - Sound alerts configuration\n- Session tracking - Productivity analytics\n\nQuick Notes:\n- Panel position - Right/left side placement\n- Auto-save interval - Note persistence timing\n- Default format - Markdown/plain text preference\n- Backup frequency - Automatic export schedule\n\nAdvanced Settings\n\nPerformance Options:\n- Memory management - Cleanup intervals\n- Cache settings - Local storage optimization\n- Resource loading - Lazy loading preferences\n- Background processing - Task scheduling\n\nDeveloper Options:\n- Debug mode - Enhanced logging\n- Console output - Development information\n- API settings - Advanced configurations\n- Feature flags - Experimental feature access\n\n\ud83d\udd27 Essential Settings Configuration\n\nFirst-Time Setup\nRecommended Initial Settings:\n\n1. Choose Your Theme:\n   \n   Settings \u2192 Appearance \u2192 Theme\n   - Browse 74 themes\n   - Try different categories\n   - Set favorites for quick access\n   \n\n2. Configure Navigation:\n   \n   Settings \u2192 Navigation \u2192 Tabs\n   - Set tab limit (recommended: 8-10)\n   - Enable tab persistence\n   - Turn on close confirmations\n   \n\n3. Optimize Display:\n   \n   Settings \u2192 Appearance \u2192 Display\n   - Enable line numbers for code\n   - Set content width preference\n   - Configure word wrap behavior\n   \n\n4. Set Up Productivity:\n   \n   Settings \u2192 Productivity \u2192 Timer\n   - Choose default Pomodoro duration\n   - Enable audio notifications\n   - Configure break reminders\n   \n\nPower User Configuration\nAdvanced Optimization:\n\nContent Creator Setup:\njavascript\n{\n    theme: 'github-light',\n    contentWidth: 'wide',\n    showLineNumbers: true,\n    enableWordWrap: false,\n    focusMode: false,\n    trackRecent: true,\n    recentLimit: 50\n}\n\n\nResearcher Configuration:\njavascript\n{\n    theme: 'nord',\n    contentWidth: 'normal',\n    showLineNumbers: false,\n    enableWordWrap: true,\n    focusMode: true,\n    trackRecent: true,\n    recentLimit: 30\n}\n\n\nDeveloper Setup:\njavascript\n{\n    theme: 'vscode-dark-plus',\n    contentWidth: 'full',\n    showLineNumbers: true,\n    enableWordWrap: false,\n    focusMode: false,\n    trackRecent: true,\n    recentLimit: 20\n}\n\n\n\ud83d\uddb1\ufe0f Settings Context Menu\n\nSettings Button Menu\nRight-click the settings button (\u2699\ufe0f):\n\n| Action | Description |\n|--------|-------------|\n| Import Settings | Load settings from JSON file |\n| Export Settings | Save current settings to file |\n| Reset to Defaults | Restore original settings |\n| Backup Settings | Create timestamped backup |\n\nImport/Export Features\n\nExport Settings:\n- Complete backup - All settings and preferences\n- Selective export - Choose specific categories\n- Timestamped files - Automatic naming\n- JSON format - Human-readable structure\n\nImport Settings:\n- Full restore - Replace all current settings\n- Merge mode - Combine with existing settings\n- Validation - Ensure settings file integrity\n- Rollback option - Undo import if needed\n\nBackup Strategy:\n\nDaily: Auto-backup settings (if enabled)\nWeekly: Manual export before major changes\nMonthly: Archive settings with date stamps\n\n\n\ud83d\udcca Settings Categories Deep Dive\n\nAppearance & Theming\n\nTheme System:\n- 74 themes across 10 categories\n- Real-time preview - See changes instantly\n- Theme favorites - Star your preferred themes\n- Auto theme switching - Light/dark based on system\n\nLayout Options:\n- Content width control - Optimize for screen size\n- Focus mode toggle - Distraction-free reading\n- Typography settings - Font and spacing preferences\n- Visual indicators - Icons and status displays\n\nCode Display:\n- Line numbers - Toggle for all code blocks\n- Syntax highlighting - Language-specific colors\n- Word wrapping - Handle long lines\n- Copy functionality - Enhanced code copying\n\nNavigation & Organization\n\nTab System:\n- Tab limits - Prevent performance issues\n- Pin protection - Keep important tabs open\n- Session restoration - Recover tabs on restart\n- Drag-and-drop - Reorder tab positions\n\nFile Management:\n- Recent file tracking - Quick access to documents\n- Bookmark system - Organize important content\n- Search history - Remember previous searches\n- Context switching - Navigate between sections\n\nInterface Layout:\n- Sidebar configuration - Show/hide navigation\n- Header customization - Button visibility\n- Panel positioning - Quick Notes placement\n- Modal behavior - Settings panel preferences\n\nPerformance & Efficiency\n\nMemory Management:\n- Cleanup intervals - Prevent memory leaks\n- Cache optimization - Balance speed and storage\n- Resource loading - On-demand content loading\n- Background tasks - Optimize processing\n\nSearch Optimization:\n- Index management - Search performance tuning\n- Query processing - Advanced search features\n- Result caching - Faster repeat searches\n- Filter persistence - Remember search preferences\n\nTimer Integration:\n- Notification settings - Audio and visual alerts\n- Session tracking - Productivity analytics\n- Break management - Automatic reminders\n- Goal setting - Daily/weekly targets\n\n\ud83d\udcbe Settings Persistence\n\nLocal Storage\nData Management:\n- Browser storage - Settings saved locally\n- Cross-session persistence - Maintain preferences\n- Storage limits - Monitor usage\n- Cleanup routines - Prevent storage bloat\n\nBackup Solutions:\n- Manual exports - User-initiated backups\n- Automatic saves - Regular persistence\n- Version control - Track setting changes\n- Recovery options - Restore from backups\n\nCross-Device Considerations\nDevice Synchronization:\n- Manual sync - Export/import between devices\n- Setting categories - Device-specific vs. universal\n- Storage optimization - Efficient data structures\n- Conflict resolution - Handle setting differences\n\n\ud83d\udd12 Privacy & Security\n\nData Protection\nLocal Storage Only:\n- No cloud sync - All data stays on device\n- Browser isolation - Settings per browser profile\n- Incognito behavior - Temporary settings in private mode\n- Data export control - User manages all exports\n\nSetting Categories:\njavascript\n// Public settings (safe to share)\npublic: {\n    theme: 'nord',\n    contentWidth: 'normal',\n    showLineNumbers: true\n}\n\n// Private settings (device-specific)\nprivate: {\n    recentFiles: [...],\n    bookmarks: [...],\n    searchHistory: [...]\n}\n\n\nSecurity Best Practices\nRecommended Practices:\n- Regular backups - Export settings periodically\n- Review imports - Verify settings before importing\n- Clean exports - Remove sensitive data before sharing\n- Secure storage - Protect backup files appropriately\n\n\ud83d\ude80 Advanced Settings Workflows\n\nTeam Collaboration\nShared Configuration:\n\n1. Create team settings template\n2. Export standardized configuration\n3. Share settings file with team\n4. Team members import settings\n5. Maintain consistency across team\n\n\nConfiguration Management:\n- Standard themes - Consistent visual experience\n- Shared shortcuts - Common keyboard mappings\n- Performance settings - Optimized for team workflow\n- Feature flags - Enable/disable experimental features\n\nWorkflow Optimization\nProductivity Setups:\n\nFocus Workflow:\njavascript\n{\n    focusMode: true,\n    theme: 'zenburn',\n    contentWidth: 'normal',\n    confirmOnClose: true,\n    trackRecent: false\n}\n\n\nResearch Workflow:\njavascript\n{\n    focusMode: false,\n    theme: 'github-light',\n    contentWidth: 'wide',\n    recentLimit: 50,\n    trackRecent: true\n}\n\n\nPresentation Mode:\njavascript\n{\n    theme: 'light',\n    contentWidth: 'full',\n    showLineNumbers: false,\n    focusMode: true\n}\n\n\n\ud83d\udd27 Troubleshooting Settings\n\nCommon Issues\n\nSettings Not Saving:\n- Check localStorage - Ensure browser allows local storage\n- Clear cache - Remove corrupted settings\n- Browser permissions - Verify storage permissions\n- Incognito mode - Settings may not persist\n\nImport/Export Problems:\n- File format - Ensure valid JSON structure\n- File permissions - Check read/write access\n- Settings validation - Verify setting names and values\n- Browser compatibility - Some features may be browser-specific\n\nPerformance Issues:\n- Reset settings - Return to defaults\n- Clear storage - Remove accumulated data\n- Update browser - Use recent browser versions\n- Check conflicts - Resolve extension conflicts\n\nRecovery Procedures\n\nSettings Recovery:\n1. Try import - Use recent backup file\n2. Reset to defaults - Use built-in reset function\n3. Manual configuration - Rebuild critical settings\n4. Browser reset - Clear all local storage (last resort)\n\nBackup Verification:\njavascript\n// Verify backup file structure\n{\n    \"version\": \"4.0.2\",\n    \"exported\": \"2025-06-24T10:30:00Z\",\n    \"settings\": {\n        // All setting categories\n    }\n}\n\n\n\ud83d\udcf1 Mobile Settings\n\nTouch Interface Adaptations\nMobile-Specific Settings:\n- Touch targets - Larger buttons for finger interaction\n- Gesture support - Swipe and pinch configurations\n- Screen orientation - Portrait/landscape optimization\n- Battery optimization - Reduce resource usage\n\nResponsive Behavior:\n- Automatic adjustments - Settings adapt to screen size\n- Context awareness - Mobile-appropriate defaults\n- Performance tuning - Optimized for mobile processors\n- Network efficiency - Reduced data usage\n\n\ud83d\udca1 Settings Best Practices\n\nConfiguration Strategy\nSystematic Approach:\n1. Start with defaults - Use provided settings initially\n2. Change gradually - Modify one setting at a time\n3. Test thoroughly - Verify each change works as expected\n4. Document changes - Track what works for your workflow\n5. Create backups - Export settings before major changes\n\nMaintenance Routine\nRegular Review:\n- Weekly - Check setting effectiveness\n- Monthly - Export backup of current settings\n- Quarterly - Review and optimize configuration\n- Annually - Major settings review and cleanup\n\nSharing Settings\nTeam Coordination:\n- Standard configs - Create team templates\n- Documentation - Explain setting choices\n- Version control - Track team setting changes\n- Onboarding - Help new team members configure\n\n---\n\nSettings Mastery\n\nThe Notes Wiki settings system provides extensive customization to create your perfect work environment. Start with essential settings, gradually explore advanced options, and develop configurations that enhance your specific workflows.\n\nRemember: Settings are tools for optimization - configure them to serve your productivity needs while maintaining simplicity and performance.\n\nGet Started: Press Ctrl+, now to open settings and begin customizing your Notes Wiki experience! \u2699\ufe0f // Example settings structure\nappearance: {\n    theme: 'ayu-mirage',\n    autoTheme: false,\n    contentWidth: 'normal',\n    focusMode: false,\n    showLineNumbers: true,\n    enableWordWrap: true\n} Settings \u2192 Appearance \u2192 Theme\n   - Browse 74 themes\n   - Try different categories\n   - Set favorites for quick access Settings \u2192 Navigation \u2192 Tabs\n   - Set tab limit (recommended: 8-10)\n   - Enable tab persistence\n   - Turn on close confirmations Settings \u2192 Appearance \u2192 Display\n   - Enable line numbers for code\n   - Set content width preference\n   - Configure word wrap behavior Settings \u2192 Productivity \u2192 Timer\n   - Choose default Pomodoro duration\n   - Enable audio notifications\n   - Configure break reminders {\n    theme: 'github-light',\n    contentWidth: 'wide',\n    showLineNumbers: true,\n    enableWordWrap: false,\n    focusMode: false,\n    trackRecent: true,\n    recentLimit: 50\n} {\n    theme: 'nord',\n    contentWidth: 'normal',\n    showLineNumbers: false,\n    enableWordWrap: true,\n    focusMode: true,\n    trackRecent: true,\n    recentLimit: 30\n} {\n    theme: 'vscode-dark-plus',\n    contentWidth: 'full',\n    showLineNumbers: true,\n    enableWordWrap: false,\n    focusMode: false,\n    trackRecent: true,\n    recentLimit: 20\n} Daily: Auto-backup settings (if enabled)\nWeekly: Manual export before major changes\nMonthly: Archive settings with date stamps // Public settings (safe to share)\npublic: {\n    theme: 'nord',\n    contentWidth: 'normal',\n    showLineNumbers: true\n}\n\n// Private settings (device-specific)\nprivate: {\n    recentFiles: [...],\n    bookmarks: [...],\n    searchHistory: [...]\n} 1. Create team settings template\n2. Export standardized configuration\n3. Share settings file with team\n4. Team members import settings\n5. Maintain consistency across team {\n    focusMode: true,\n    theme: 'zenburn',\n    contentWidth: 'normal',\n    confirmOnClose: true,\n    trackRecent: false\n} {\n    focusMode: false,\n    theme: 'github-light',\n    contentWidth: 'wide',\n    recentLimit: 50,\n    trackRecent: true\n} {\n    theme: 'light',\n    contentWidth: 'full',\n    showLineNumbers: false,\n    focusMode: true\n} // Verify backup file structure\n{\n    \"version\": \"4.0.2\",\n    \"exported\": \"2025-06-24T10:30:00Z\",\n    \"settings\": {\n        // All setting categories\n    }\n}",
      "code_blocks_count": 15
    },
    {
      "path": "/notes/tutorials/features/keyboard-shortcuts.md",
      "context": "tutorials",
      "metadata": {
        "title": "Keyboard Shortcuts Guide",
        "tags": [
          "demo",
          "shortcuts",
          "productivity",
          "navigation"
        ],
        "created": "2025-06-13",
        "author": "Wiki Admin",
        "description": "Complete guide to all available keyboard shortcuts",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "The Notes Wiki includes keyboard shortcuts to boost your productivity. Press <kbd>?</kbd> at any time to see the shortcuts cheatsheet!\n\n\n\n| Shortcut | Action | Description |\n|----------|--------|-----...",
      "searchable_content": "\nKeyboard Shortcuts Guide\n\nThe Notes Wiki includes keyboard shortcuts to boost your productivity. Press <kbd>?</kbd> at any time to see the shortcuts cheatsheet!\n\n\ud83c\udfaf Quick Access\n\n| Shortcut | Action | Description |\n|----------|--------|-------------|\n| <kbd>?</kbd> | Show shortcuts cheatsheet | Opens the complete shortcuts overlay |\n| <kbd>Esc</kbd> | Close modals | Closes any open modals, overlays, or dialogs |\n| <kbd>F</kbd> | Focus mode | Toggle distraction-free reading mode |\n\n\ud83d\udd0d Search & Navigation\n\n| Shortcut | Action | Description |\n|----------|--------|-------------|\n| <kbd>Ctrl</kbd>+<kbd>K</kbd> | Search | Open global search (Mac: <kbd>\u2318</kbd>+<kbd>K</kbd>) |\n| <kbd>Ctrl</kbd>+<kbd>D</kbd> | Bookmark note | Bookmark the current note (Mac: <kbd>\u2318</kbd>+<kbd>D</kbd>) |\n\nNote: <kbd>Ctrl</kbd>+<kbd>F</kbd> opens the browser's native find-in-page function. Tag filtering is accessed via the Tags button (\ud83c\udff7\ufe0f) in the header.\n\n\ud83d\udcd1 Tab Management\n\nBrowser-Compatible Shortcuts (Recommended)\n| Shortcut | Action | Description |\n|----------|--------|-------------|\n| <kbd>Alt</kbd>+<kbd>T</kbd> | New tab | Open a new empty tab (browser-safe) |\n| <kbd>Alt</kbd>+<kbd>W</kbd> | Close tab | Close the current tab (browser-safe) |\n| <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>W</kbd> | Close all tabs | Close all open tabs (Mac: <kbd>\u2318</kbd>+<kbd>Shift</kbd>+<kbd>W</kbd>) |\n| <kbd>Alt</kbd>+<kbd>1</kbd>-<kbd>9</kbd> | Switch to tab | Jump to tab by number (1-9) |\n| <kbd>Alt</kbd>+<kbd>PageUp</kbd> | Previous tab | Switch to the previous tab |\n| <kbd>Alt</kbd>+<kbd>PageDown</kbd> | Next tab | Switch to the next tab |\n| <kbd>Alt</kbd>+<kbd>P</kbd> | Pin/unpin tab | Toggle pin status of current tab |\n\nLegacy Shortcuts (May conflict with browser)\n| Shortcut | Action | Description |\n|----------|--------|-------------|\n| <kbd>Ctrl</kbd>+<kbd>T</kbd> | New tab | May conflict with browser (Mac: <kbd>\u2318</kbd>+<kbd>T</kbd>) |\n| <kbd>Ctrl</kbd>+<kbd>W</kbd> | Close tab | May conflict with browser (Mac: <kbd>\u2318</kbd>+<kbd>W</kbd>) |\n| <kbd>Ctrl</kbd>+<kbd>1</kbd>-<kbd>9</kbd> | Switch to tab | May conflict with browser (Mac: <kbd>\u2318</kbd>+<kbd>1</kbd>-<kbd>9</kbd>) |\n| <kbd>Ctrl</kbd>+<kbd>PageUp</kbd> | Previous tab | May conflict with browser (Mac: <kbd>\u2318</kbd>+<kbd>PageUp</kbd>) |\n| <kbd>Ctrl</kbd>+<kbd>PageDown</kbd> | Next tab | May conflict with browser (Mac: <kbd>\u2318</kbd>+<kbd>PageDown</kbd>) |\n\n\u2699\ufe0f Settings & Features\n\n| Shortcut | Action | Description |\n|----------|--------|-------------|\n| <kbd>Ctrl</kbd>+<kbd>,</kbd> | Open settings | Access all application settings (Mac: <kbd>\u2318</kbd>+<kbd>,</kbd>) |\n| <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>S</kbd> | Toggle Quick Notes panel | Open/close the Quick Notes panel (Mac: <kbd>\u2318</kbd>+<kbd>Shift</kbd>+<kbd>S</kbd>) |\n| <kbd>Ctrl</kbd>+<kbd>/</kbd> | Toggle split view | Enable/disable split view mode (Mac: <kbd>\u2318</kbd>+<kbd>/</kbd>) |\n\n\ud83d\udca1 Tips\n\nPlatform Compatibility\n- Windows/Linux: Use <kbd>Ctrl</kbd> key for shortcuts\n- Mac: Use <kbd>\u2318</kbd> (Command) key instead of <kbd>Ctrl</kbd>\n\nCustomizable Shortcuts\nYou can customize some keyboard shortcuts in Settings \u2192 Advanced \u2192 Keyboard Shortcuts. The following shortcuts can be customized:\n- New tab\n- Search  \n- Settings\n- Tag filtering\n- Bookmark note\n\nBrowser Compatibility\nSome shortcuts may conflict with browser defaults. The wiki provides alternative shortcuts (using <kbd>Alt</kbd>) to avoid conflicts.\n\n---\n\nRemember: <kbd>?</kbd> Shows All Shortcuts\n\nThe most important shortcut to remember is <kbd>?</kbd> - it will show you the complete, up-to-date shortcuts cheatsheet whenever you need it!\n\nCustomize available shortcuts in Settings \u2192 Advanced \u2192 Keyboard Shortcuts to match your workflow.",
      "code_blocks_count": 0
    },
    {
      "path": "/notes/tutorials/features/search-guide.md",
      "context": "tutorials",
      "metadata": {
        "title": "Advanced Search Features",
        "tags": [
          "demo",
          "search",
          "operators",
          "filtering"
        ],
        "created": "2025-06-13",
        "author": "Wiki Admin",
        "description": "Complete guide to advanced search features including operators, tag filtering, and search techniques",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "The Notes Wiki includes a powerful search system that goes far beyond simple text matching. Learn how to use advanced operators, tag filtering, and search techniques to find exactly what you're lookin...",
      "searchable_content": "\nAdvanced Search Features\n\nThe Notes Wiki includes a powerful search system that goes far beyond simple text matching. Learn how to use advanced operators, tag filtering, and search techniques to find exactly what you're looking for.\n\n\ud83d\udd0d Quick Search Access\n\n- Header Search: Click the search icon or search box in the header\n- Keyboard Shortcut: Press <kbd>Ctrl</kbd>+<kbd>K</kbd> to focus search instantly\n- URL Search: Use #/search/your+search+term for direct search links\n\n\ud83c\udfaf Search Operators\n\nExact Phrase Search\nUse quotes for exact phrase matching:\n\n\n\"machine learning algorithms\"\n\"Notes Wiki system\" \n\"CSS counter-based line numbers\"\n\n\nExample Results:\n- \u2705 \"machine learning algorithms for beginners\"\n- \u274c \"machine algorithms for learning\"\n\nExclusion Operator\nUse minus (-) to exclude terms:\n\n\njavascript -angular\npython -django\ntheme -dark\n\n\nExample:\n- javascript -angular finds JavaScript content but excludes Angular-related notes\n- css -framework finds CSS notes excluding framework-specific content\n\nTag Filtering\nUse tag: to search within specific tags:\n\n\ntag:javascript\ntag:tutorial\ntag:personal\ntag:code-blocks\n\n\nMultiple Tags:\n\ntag:javascript tag:tutorial\ntag:css tag:demo\n\n\nAuthor Filtering  \nUse author: to find notes by specific authors:\n\n\nauthor:\"Wiki Admin\"\nauthor:\"John Doe\"\nauthor:System\n\n\nCode Content Filtering\nUse code: to find notes with code content:\n\n\ncode:javascript\ncode:python\ncode:css\ncode:any\n\n\nExamples:\n- code:javascript - Notes containing JavaScript code or mentioning JavaScript\n- code:any - Notes that contain any code blocks\n- code:sql - Notes with SQL code or database content\n\nStatus & Category Filtering\nUse status: and category: for organizational filtering:\n\n\nstatus:draft\nstatus:published  \nstatus:review\ncategory:tutorial\ncategory:reference\n\n\nNote: These operators work with notes that have populated status and category metadata fields.\n\nCombining Operators\nCreate powerful queries by combining operators:\n\n\ntag:javascript \"async await\" -promise\nauthor:\"Wiki Admin\" tag:demo -test\n\"code blocks\" tag:tutorial -basic\ncode:javascript tag:tutorial status:published\ncode:any -tag:test category:guide\n\n\n\ud83c\udff7\ufe0f Tag-Based Filtering\n\nTag Filter Interface\n- Click the Tags button (\ud83c\udff7\ufe0f) in the header\n- Select multiple tags for filtering\n- Choose between OR/AND logic using the mode toggle\n\nTag Logic\nTag filtering uses simple matching:\n- Multiple tags selected work as OR logic by default\n- Shows notes that match any of the selected tags\n- Use search operators for precise tag combinations\n\n\ud83c\udfa8 Smart Search Features\n\nSearch History\nYour recent searches are saved automatically:\n- Up to 50 recent searches stored locally\n- Previous searches remembered across sessions\n- Access history through browser localStorage\n\n\ud83d\udcca Search Results\n\nResult Ordering\nResults appear in the order they exist in the search index:\n- No relevance ranking or scoring applied\n- All matching notes displayed in index order\n- Pagination available for large result sets (20 per page)\n\nResult Information\nEach result shows:\n- Title - Note title with highlighting\n- Description - Brief content summary\n- Tags - Associated tags\n- Author - Note author\n- Preview - Content snippet with search terms highlighted\n\nKeyboard Navigation\nEnhanced navigation through search results:\n- \u2191/\u2193 arrows - Navigate between results\n- Home/End - Jump to first/last result\n- Page Up/Down - Jump 5 results up/down\n- Enter - Open selected result\n- Ctrl+Enter - Open selected result in new tab\n- Escape - Clear selection and return to search input\n\nCross-Page Navigation:\n- Automatically loads next page when navigating past last result\n- Seamless keyboard navigation across paginated results\n\nQuick Actions\nFrom search results:\n- Click title - Open note in current tab\n- Ctrl+Click - Open in new tab\n- Click tags - Filter by that tag\n- Click author - Filter by author\n\n\ud83d\ude80 Advanced Search Techniques\n\nContent Type Searches\nFind specific types of content:\n\n\ntag:code-blocks \"function\"\ntag:tutorial \"step by step\"  \ntag:reference \"cheat sheet\"\ntag:personal \"daily\"\n\n\nDate-Based Searches\nSearch metadata includes dates:\n\n\nauthor:System \"2025\"\n\"created: 2025-01\" \n\"updated\" tag:demo\n\n\nTechnical Content Searches\nFind programming content:\n\n\ncode:javascript tag:tutorial\ncode:python \"function\"\ncode:any tag:demo\n\"syntax highlighting\" -test\ntag:css \"theme\" \"color\"\ncode:sql \"database\"\n\n\nDocumentation Searches\nFind specific documentation:\n\n\n\"how to\" tag:tutorial\n\"getting started\" -test\n\"configuration\" tag:settings\n\"keyboard shortcuts\" tag:demo\n\n\n\ud83d\udca1 Search Best Practices\n\nEffective Search Strategies\n\n1. Start Broad, Then Narrow\n\nStep 1: javascript\nStep 2: javascript tutorial  \nStep 3: javascript tutorial -advanced\nStep 4: tag:tutorial \"javascript\" \"beginner\"\n\n\n2. Use Multiple Search Methods\n- Try tag filtering first for categorical searches\n- Use text search for specific content\n- Combine both for precise results\n\n3. Leverage Exclusions\n\ntheme -test -debug\ntutorial -\"work in progress\"\njavascript -framework -library\n\n\nCommon Search Patterns\n\nFinding Examples:\n\ntag:demo \"example\"\n\"code example\" tag:tutorial\n\"sample\" -test\n\n\nFinding Documentation:\n\n\"how to\" OR \"guide\" OR \"tutorial\"\ntag:documentation -draft\n\"getting started\" tag:beginner\n\n\nFinding Reference Material:\n\ntag:reference OR tag:cheatsheet\n\"reference\" OR \"cheat sheet\"\n\"commands\" tag:reference\n\n\n\ud83d\udd17 Search URLs & Sharing\n\nDirect Search Links\nShare searches with URL patterns:\n\n\n#/search/javascript+tutorial\n#/search/\"code+blocks\"+tag:demo\n#/search/tag:css+-test\n\n\nBookmarkable Searches\nCreate bookmarks for frequent searches:\n- Weekly Reviews: tag:personal \"weekly\"\n- Code References: tag:reference \"code\"\n- Learning Material: tag:tutorial -completed\n\nSearch in New Tabs\n- <kbd>Ctrl</kbd>+<kbd>Click</kbd> search results to open in new tabs\n- Use <kbd>Ctrl</kbd>+<kbd>T</kbd> then search for research sessions\n\n\ud83c\udfaf Search Examples\n\nReal-World Search Scenarios\n\nScenario 1: Learning JavaScript\n\nSearch: tag:javascript tag:tutorial -advanced\nFilter: Include [beginner], [examples]\nResult: Beginner-friendly JavaScript tutorials with examples\n\n\nScenario 2: Theme Customization\n\nSearch: \"theme\" OR \"css\" tag:demo\nExclude: test, debug\nResult: Theme and CSS demos excluding test files\n\n\nScenario 3: Code Block Features\n\nSearch: \"code block\" OR \"syntax highlighting\" OR \"line numbers\"\nFilter: Include [demo], [features]\nResult: All code block feature documentation\n\n\nScenario 4: Personal Project Notes\n  \nSearch: author:\"Your Name\" tag:personal tag:projects\nFilter: Exclude [archive], [completed]\nResult: Your active personal project notes\n\n\n\ud83d\udd27 Search Configuration\n\nSearch Behavior\nThe search system uses these built-in behaviors:\n\n- Search delay - 150ms debounce before search executes\n- Results per page - 20 results with pagination\n- Content inclusion - Searches titles, descriptions, content, and tags\n- Case insensitive - All searches ignore letter case\n- Exact matching - No fuzzy matching or approximation\n\nPerformance Tips\n\nFor Large Wikis:\n- Use tag filtering first to narrow results\n- Prefer specific terms over general ones\n- Use exclusions to eliminate noise\n- Limit searches to relevant sections\n\nFor Quick Finding:\n- Use recent search history\n- Bookmark frequent searches  \n- Learn common tag patterns\n- Use keyboard shortcuts for speed\n\n---\n\nMaster Search with Practice\n\nThe search system becomes more powerful as you learn your content patterns. Experiment with different operators and develop search strategies that match your workflow!\n\nPro Tip: Use <kbd>Ctrl</kbd>+<kbd>K</kbd> for instant search access, and don't forget that search results can be opened in multiple tabs with <kbd>Ctrl</kbd>+<kbd>Click</kbd> for research sessions. \"machine learning algorithms\"\n\"Notes Wiki system\" \n\"CSS counter-based line numbers\" javascript -angular\npython -django\ntheme -dark tag:javascript\ntag:tutorial\ntag:personal\ntag:code-blocks tag:javascript tag:tutorial\ntag:css tag:demo author:\"Wiki Admin\"\nauthor:\"John Doe\"\nauthor:System code:javascript\ncode:python\ncode:css\ncode:any status:draft\nstatus:published  \nstatus:review\ncategory:tutorial\ncategory:reference tag:javascript \"async await\" -promise\nauthor:\"Wiki Admin\" tag:demo -test\n\"code blocks\" tag:tutorial -basic\ncode:javascript tag:tutorial status:published\ncode:any -tag:test category:guide tag:code-blocks \"function\"\ntag:tutorial \"step by step\"  \ntag:reference \"cheat sheet\"\ntag:personal \"daily\" author:System \"2025\"\n\"created: 2025-01\" \n\"updated\" tag:demo code:javascript tag:tutorial\ncode:python \"function\"\ncode:any tag:demo\n\"syntax highlighting\" -test\ntag:css \"theme\" \"color\"\ncode:sql \"database\" \"how to\" tag:tutorial\n\"getting started\" -test\n\"configuration\" tag:settings\n\"keyboard shortcuts\" tag:demo Step 1: javascript\nStep 2: javascript tutorial  \nStep 3: javascript tutorial -advanced\nStep 4: tag:tutorial \"javascript\" \"beginner\" theme -test -debug\ntutorial -\"work in progress\"\njavascript -framework -library tag:demo \"example\"\n\"code example\" tag:tutorial\n\"sample\" -test \"how to\" OR \"guide\" OR \"tutorial\"\ntag:documentation -draft\n\"getting started\" tag:beginner tag:reference OR tag:cheatsheet\n\"reference\" OR \"cheat sheet\"\n\"commands\" tag:reference #/search/javascript+tutorial\n#/search/\"code+blocks\"+tag:demo\n#/search/tag:css+-test Search: tag:javascript tag:tutorial -advanced\nFilter: Include [beginner], [examples]\nResult: Beginner-friendly JavaScript tutorials with examples Search: \"theme\" OR \"css\" tag:demo\nExclude: test, debug\nResult: Theme and CSS demos excluding test files Search: \"code block\" OR \"syntax highlighting\" OR \"line numbers\"\nFilter: Include [demo], [features]\nResult: All code block feature documentation Search: author:\"Your Name\" tag:personal tag:projects\nFilter: Exclude [archive], [completed]\nResult: Your active personal project notes",
      "code_blocks_count": 22
    },
    {
      "path": "/notes/tutorials/features/tab-management.md",
      "context": "tutorials",
      "metadata": {
        "title": "Tab Management Guide",
        "tags": [
          "demo",
          "tabs",
          "productivity",
          "navigation"
        ],
        "created": "2025-06-13",
        "author": "Wiki Admin",
        "description": "Complete guide to tab management features including drag-and-drop, keyboard shortcuts, and multi-tab workflows",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "The Notes Wiki includes a powerful tab system that enables efficient multi-document workflows. Open multiple notes simultaneously, reorder tabs with drag-and-drop, and navigate quickly with keyboard s...",
      "searchable_content": "\nTab Management Guide\n\nThe Notes Wiki includes a powerful tab system that enables efficient multi-document workflows. Open multiple notes simultaneously, reorder tabs with drag-and-drop, and navigate quickly with keyboard shortcuts.\n\n\ud83d\udcd1 Tab Basics\n\nOpening Tabs\n\nNew Empty Tab:\n- Click the + button in the tab bar\n- Press <kbd>Alt</kbd>+<kbd>T</kbd> (browser-safe) or <kbd>Ctrl</kbd>+<kbd>T</kbd>\n- Right-click tab bar \u2192 \"New Tab\"\n\nOpen Note in New Tab:\n- <kbd>Ctrl</kbd>+<kbd>Click</kbd> any note link\n- <kbd>Ctrl</kbd>+<kbd>Click</kbd> search results\n- <kbd>Ctrl</kbd>+<kbd>Click</kbd> sidebar items\n- Right-click note \u2192 \"Open in New Tab\"\n\nDuplicate Current Tab:\n- Press <kbd>Ctrl</kbd>+<kbd>D</kbd>\n- Right-click tab \u2192 \"Duplicate\"\n\nTab Navigation\n\nKeyboard Shortcuts:\n- <kbd>Alt</kbd>+<kbd>1</kbd>-<kbd>9</kbd> - Jump to tab by number (browser-safe)\n- <kbd>Alt</kbd>+<kbd>PageUp</kbd>/<kbd>PageDown</kbd> - Navigate between tabs\n- <kbd>Ctrl</kbd>+<kbd>1</kbd>-<kbd>9</kbd> - Jump to tab by number (may conflict with browser)\n\nMouse Navigation:\n- Click tab - Switch to tab\n- Middle-click tab - Close tab\n- Scroll on tab bar - Scroll through many tabs\n\nClosing Tabs\n\nSingle Tab:\n- Click the \u00d7 button on tab\n- Press <kbd>Alt</kbd>+<kbd>W</kbd> (browser-safe) or <kbd>Ctrl</kbd>+<kbd>W</kbd>\n- Middle-click the tab\n\nMultiple Tabs:\n- <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>W</kbd> - Close all tabs\n- Right-click tab \u2192 \"Close Other Tabs\"\n- Right-click tab \u2192 \"Close Tabs to Right\"\n\nPinning Tabs\n\nPin Important Tabs:\n- Press <kbd>Alt</kbd>+<kbd>P</kbd> to pin/unpin current tab\n- Right-click tab \u2192 \"Pin Tab\"\n- Click the pin icon on the tab (when available)\n\nPinned Tab Features:\n- Protection from closure - Pinned tabs cannot be accidentally closed\n- Visual indicator - Pin icon shows tab is pinned\n- Persistent position - Pinned tabs stay at the beginning of the tab bar\n- Session persistence - Pinned tabs are restored when reopening the wiki\n- No accidental closure - Close button disabled on pinned tabs\n\n\ud83c\udfaf Drag-and-Drop Features\n\nReordering Tabs\nDrag tabs to reorder them for better organization:\n\n1. Click and hold on a tab\n2. Drag to desired position\n3. Drop to reorder\n\nVisual Feedback:\n- Tab being dragged becomes semi-transparent\n- Drop zone indicators show valid positions\n- Smooth animations provide feedback\n\nAdvanced Drag Operations\n\nDrag to Specific Positions:\n- Beginning - Drag to leftmost position\n- Between tabs - Drop between any two tabs\n- End - Drag to rightmost position\n\nMulti-Tab Dragging (Future Feature):\n- Select multiple tabs with <kbd>Ctrl</kbd>+<kbd>Click</kbd>\n- Drag entire selection to new position\n\n\ud83d\ude80 Tab Workflows\n\nResearch Workflow\nPerfect for gathering information from multiple sources:\n\n\n1. Start with main topic note\n2. Ctrl+Click related links \u2192 Open in background tabs\n3. Ctrl+1-9 to jump between tabs\n4. Drag tabs to group related content\n5. Pin reference tabs with Alt+P to keep them accessible\n\n\nExample Research Session:\n\nTab 1: \"JavaScript Basics\" (main topic)\nTab 2: \"Array Methods Reference\" (reference)\nTab 3: \"Async/Await Tutorial\" (related)\nTab 4: \"Code Examples\" (examples)\nTab 5: \"Best Practices\" (guidelines)\n\n\nWriting Workflow\nIdeal for content creation with references:\n\n\n1. Open draft in main tab\n2. Open reference materials in background tabs\n3. Use Ctrl+Tab to cycle between draft and references\n4. Pin style guide tab with Alt+P for persistent access\n5. Use duplicate tabs for before/after comparisons\n\n\nStudy Workflow\nOrganize learning materials efficiently:\n\n\n1. Course overview in first tab\n2. Current lesson in second tab  \n3. Practice exercises in third tab\n4. Reference materials in remaining tabs\n5. Reorder tabs by learning sequence\n\n\n\ud83c\udfa8 Tab Appearance & Indicators\n\nTab States\n\nActive Tab:\n- Highlighted background\n- Full opacity\n- Bold title text\n\nInactive Tabs:\n- Dimmed background\n- Reduced opacity\n- Normal title text\n\nLoading Tab:\n- Loading spinner icon\n- \"Loading...\" text\n- Disabled interaction\n\nVisual Indicators\n\nIcons:\n- \ud83d\udcc4 - Regular note\n- \ud83c\udfe0 - Home/Index page\n- \ud83d\udd0d - Search results\n- \u2699\ufe0f - Settings page\n- \ud83d\udccb - Empty/New tab\n\nStatus Indicators:\n- Modified - Dot indicator for unsaved changes\n- Pinned - \ud83d\udccc Pin icon for persistent tabs (protected from closure)\n- Shared - Share icon for shared content\n\nTab Titles\nTab titles are intelligently shortened:\n\n- Full title - \"JavaScript Advanced Concepts Tutorial\"\n- Shortened - \"JavaScript Advanced...\"\n- Minimal - \"JavaScript...\"\n- Icon only - When space is very limited\n\n\ud83d\udd27 Tab Management Features\n\nTab Persistence\nTabs are preserved across sessions:\n\n- Automatic saving - Open tabs saved to localStorage\n- Restore on startup - Previous session tabs restored\n- Crash recovery - Tabs recovered after browser crashes\n\nTab Limits\nManage performance with tab limits:\n\n- Default limit - 10 tabs (configurable)\n- Warning threshold - 8 tabs\n- Auto-close - Oldest unused tabs closed when limit reached\n- Exempt tabs - Pinned tabs are never auto-closed and don't count toward the limit\n\nTab Groups (Future Feature)\nOrganize tabs into logical groups:\n\n- Color coding - Assign colors to tab groups\n- Group names - Label groups for easy identification\n- Collapse groups - Hide/show entire groups\n- Group operations - Close/duplicate entire groups\n\n\u2699\ufe0f Tab Settings\n\nCustomization Options\nConfigure tab behavior in Settings \u2192 Tabs:\n\nAppearance:\n- Tab width - Minimum and maximum tab width\n- Show icons - Display icons in tabs\n- Show close buttons - Always/on hover/never\n- Animation speed - Tab transition animations\n\nBehavior:\n- Tab limit - Maximum number of open tabs\n- Auto-close - Close unused tabs automatically\n- Middle-click action - Close tab/new tab/custom\n- Scroll behavior - Mouse wheel scrolling in tab bar\n\nKeyboard:\n- Cycle order - Recently used vs. visual order\n- New tab position - End/after current/custom\n- Close tab focus - Previous/next/recent\n\n\ud83d\udca1 Tab Best Practices\n\nEfficient Tab Organization\n\nGroup Related Content:\n\nResearch tabs: Tab 1-3 (drag together)\nReference tabs: Tab 4-6 (keep at end)\nDraft tabs: Tab 7-8 (keep accessible)\n\n\nUse Descriptive Workflows:\n\nWorkflow 1: Learning new technology\n- Overview \u2192 Tutorial \u2192 Examples \u2192 Reference\n\nWorkflow 2: Project planning  \n- Requirements \u2192 Design \u2192 Research \u2192 Notes\n\nWorkflow 3: Content creation\n- Outline \u2192 Draft \u2192 References \u2192 Style guide\n\n\nPerformance Tips\n\nManage Tab Count:\n- Close unused tabs regularly\n- Use bookmarks for long-term references\n- Pin frequently accessed tabs with Alt+P\n- Set reasonable tab limits\n- Pinned tabs are protected from accidental closure\n\nOptimize for Your Screen:\n- Larger screens - More tabs visible\n- Smaller screens - Fewer tabs, more scrolling\n- Mobile - Limited tab functionality\n\nKeyboard Efficiency\n\nMaster Tab Shortcuts:\n\nCtrl+T - New tab (most important)\nCtrl+W - Close tab (second most important)\nAlt+P - Pin/unpin tab (protect important tabs)\nCtrl+1-9 - Jump to specific tabs\nCtrl+Tab - Cycle through tabs\n\n\nPower User Tips:\n\nCtrl+Shift+T - Reopen closed tab (future)\nCtrl+Shift+N - New private tab (future)\nCtrl+Shift+Tab - Reverse tab cycling\n\n\n\ud83c\udfaf Advanced Tab Techniques\n\nTab Templates\nCreate templates for common workflows:\n\nResearch Template:\n1. Main topic tab\n2. Reference tab  \n3. Notes tab\n4. Examples tab\n\nWriting Template:\n1. Outline tab\n2. Draft tab\n3. Style guide tab\n4. References tab\n\nTab Automation (Future)\nAutomate tab management with rules:\n\n- Auto-pin - Pin tabs matching patterns\n- Auto-close - Close tabs after inactivity\n- Auto-group - Group tabs by domain/topic\n- Auto-restore - Restore specific tab sets\n\nCross-Session Workflows\nMaintain workflows across browser sessions:\n\n1. Save tab sessions - Export current tab set\n2. Name sessions - \"Research Project Alpha\"\n3. Restore sessions - Load saved tab sets\n4. Share sessions - Export for team collaboration\n\n---\n\nTab Management Mastery\n\nEffective tab management transforms your note-taking workflow. Start with basic shortcuts, develop organization patterns, and gradually adopt advanced techniques that match your work style.\n\nRemember: The goal is productivity, not having the most tabs open. Find the balance that works for your workflow and screen size!\n\nQuick Start: Try opening 3-4 related notes in tabs right now and practice using <kbd>Ctrl</kbd>+<kbd>1</kbd>-<kbd>4</kbd> to jump between them. 1. Start with main topic note\n2. Ctrl+Click related links \u2192 Open in background tabs\n3. Ctrl+1-9 to jump between tabs\n4. Drag tabs to group related content\n5. Pin reference tabs with Alt+P to keep them accessible Tab 1: \"JavaScript Basics\" (main topic)\nTab 2: \"Array Methods Reference\" (reference)\nTab 3: \"Async/Await Tutorial\" (related)\nTab 4: \"Code Examples\" (examples)\nTab 5: \"Best Practices\" (guidelines) 1. Open draft in main tab\n2. Open reference materials in background tabs\n3. Use Ctrl+Tab to cycle between draft and references\n4. Pin style guide tab with Alt+P for persistent access\n5. Use duplicate tabs for before/after comparisons 1. Course overview in first tab\n2. Current lesson in second tab  \n3. Practice exercises in third tab\n4. Reference materials in remaining tabs\n5. Reorder tabs by learning sequence Research tabs: Tab 1-3 (drag together)\nReference tabs: Tab 4-6 (keep at end)\nDraft tabs: Tab 7-8 (keep accessible) Workflow 1: Learning new technology\n- Overview \u2192 Tutorial \u2192 Examples \u2192 Reference\n\nWorkflow 2: Project planning  \n- Requirements \u2192 Design \u2192 Research \u2192 Notes\n\nWorkflow 3: Content creation\n- Outline \u2192 Draft \u2192 References \u2192 Style guide Ctrl+T - New tab (most important)\nCtrl+W - Close tab (second most important)\nAlt+P - Pin/unpin tab (protect important tabs)\nCtrl+1-9 - Jump to specific tabs\nCtrl+Tab - Cycle through tabs Ctrl+Shift+T - Reopen closed tab (future)\nCtrl+Shift+N - New private tab (future)\nCtrl+Shift+Tab - Reverse tab cycling",
      "code_blocks_count": 8
    },
    {
      "path": "/notes/tutorials/features/custom-css.md",
      "context": "tutorials",
      "metadata": {
        "title": "Custom CSS",
        "tags": [
          "customization",
          "advanced",
          "styling",
          "css",
          "themes"
        ],
        "created": "2025-01-23",
        "author": "NotesWiki Team",
        "description": "Customize NotesWiki's appearance with your own CSS styles",
        "updated": "2025-01-23",
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Custom CSS allows you to personalize NotesWiki beyond the built-in themes and settings. Whether you want to tweak a few colors, adjust spacing, or create an entirely unique look, custom CSS gives you ...",
      "searchable_content": "\nCustom CSS\n\nCustom CSS allows you to personalize NotesWiki beyond the built-in themes and settings. Whether you want to tweak a few colors, adjust spacing, or create an entirely unique look, custom CSS gives you complete control over the visual appearance.\n\nAccessing Custom CSS\n\n1. Open Settings (\u2699\ufe0f) or press Ctrl + ,\n2. Navigate to the Advanced tab\n3. Find the Custom CSS section\n4. Enter your CSS in the text editor\n5. Click Save to apply changes\n\nChanges take effect immediately without needing to refresh.\n\nCSS Variables\n\nNotesWiki uses CSS custom properties (variables) for theming. You can override any of these:\n\nCore Color Variables\ncss\n:root {\n  / Backgrounds /\n  --bg-primary: #1a1a1a;\n  --bg-secondary: #252525;\n  --bg-sidebar: #1e1e1e;\n  \n  / Text Colors /\n  --text-primary: #ffffff;\n  --text-secondary: #cccccc;\n  --text-muted: #999999;\n  \n  / Accent Colors /\n  --accent-primary: #007acc;\n  --accent-secondary: #0098ff;\n  --accent-error: #ff6b6b;\n  --accent-warning: #ffa500;\n  --accent-success: #4caf50;\n}\n\n\nCommon Customizations\n\n1. Change Accent Color\ncss\n:root {\n  --accent-primary: #ff6b6b;\n  --accent-secondary: #ff8787;\n  --link-color: #ff6b6b;\n}\n\n\n2. Adjust Spacing\ncss\n:root {\n  --spacing-xs: 0.5rem;\n  --spacing-sm: 1rem;\n  --spacing-md: 1.5rem;\n  --spacing-lg: 2rem;\n}\n\n\n3. Modify Fonts\ncss\n:root {\n  --font-family: 'Georgia', serif;\n  --font-mono: 'Fira Code', monospace;\n}\n\n\nComponent Styling\n\nNavigation Sidebar\ncss\n/ Wider sidebar /\n.sidebar {\n  width: 300px !important;\n}\n\n/ Custom folder colors /\n.folder-name {\n  color: #ffa500;\n}\n\n/ Highlight active file /\n.tree-item.active {\n  background-color: rgba(255, 255, 255, 0.1);\n  font-weight: bold;\n}\n\n\nTabs\ncss\n/ Rounded tabs /\n.tab {\n  border-radius: 8px 8px 0 0;\n  margin: 0 2px;\n}\n\n/ Colorful pinned tabs /\n.tab.pinned {\n  background-color: #ff6b6b;\n}\n\n/ Tab hover effect /\n.tab:hover {\n  transform: translateY(-2px);\n  transition: transform 0.2s;\n}\n\n\nContent Area\ncss\n/ Custom heading styles /\n.content h1 {\n  border-bottom: 3px solid var(--accent-primary);\n  padding-bottom: 0.5rem;\n}\n\n/ Styled blockquotes /\nblockquote {\n  border-left: 4px solid #ffa500;\n  background-color: rgba(255, 165, 0, 0.1);\n  font-style: italic;\n}\n\n/ Code block enhancements /\npre {\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n  border-radius: 8px;\n}\n\n\nAdvanced Customizations\n\nCustom Callouts\ncss\n/ Create a custom callout type /\n.callout-custom {\n  background-color: #e3f2fd;\n  border-color: #2196f3;\n  color: #0d47a1;\n}\n\n.callout-custom .callout-icon::before {\n  content: \"\ud83d\udca1\";\n}\n\n\nAnimation Effects\ncss\n/ Smooth transitions /\n {\n  transition: background-color 0.3s ease;\n}\n\n/ Animated links /\na {\n  position: relative;\n  text-decoration: none;\n}\n\na::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 0;\n  height: 2px;\n  background-color: var(--accent-primary);\n  transition: width 0.3s;\n}\n\na:hover::after {\n  width: 100%;\n}\n\n\nFocus Mode Enhancements\ncss\n/ Ultra-focused reading mode /\nbody.focus-mode .content {\n  max-width: 650px;\n  font-size: 1.2em;\n  line-height: 1.8;\n}\n\nbody.focus-mode {\n  background-color: #fafafa;\n}\n\n\nTheme Overrides\n\nOverride specific theme elements while keeping the base theme:\n\ncss\n/ Override theme colors while keeping theme structure /\n[data-theme=\"ayu-mirage\"] {\n  --bg-primary: #1f2430;\n  --accent-primary: #ffcc66;\n}\n\n/ Conditional styling based on theme /\n[data-theme=\"dark\"] .content {\n  text-shadow: 0 0 2px rgba(0, 0, 0, 0.5);\n}\n\n\nResponsive Customizations\n\ncss\n/ Mobile-specific styles /\n@media (max-width: 768px) {\n  .sidebar {\n    width: 100% !important;\n  }\n  \n  .content {\n    padding: 1rem !important;\n  }\n}\n\n/ Large screen optimizations /\n@media (min-width: 1400px) {\n  .content {\n    max-width: 1200px;\n  }\n}\n\n\nBest Practices\n\n1. Use CSS Variables\ncss\n/ Good - uses variables /\n.custom-element {\n  color: var(--text-primary);\n  background: var(--bg-secondary);\n}\n\n/ Avoid - hardcoded colors /\n.custom-element {\n  color: #ffffff;\n  background: #252525;\n}\n\n\n2. Maintain Specificity\ncss\n/ Use specific selectors /\n.sidebar .tree-item.active {\n  / styles /\n}\n\n/ Avoid !important when possible /\n.tree-item {\n  color: red !important; / Try to avoid /\n}\n\n\n3. Test Across Themes\nAlways test your custom CSS with multiple themes:\n- Light themes\n- Dark themes\n- High contrast themes\n\nCommon Use Cases\n\n1. Brand Colors\ncss\n:root {\n  --accent-primary: #your-brand-color;\n  --accent-secondary: #your-secondary-color;\n}\n\n\n2. Improved Readability\ncss\n.content {\n  font-size: 18px;\n  line-height: 1.7;\n  letter-spacing: 0.02em;\n}\n\n\n3. Custom Syntax Highlighting\ncss\n/ Override Prism.js theme colors /\n.token.keyword {\n  color: #ff79c6;\n}\n\n.token.string {\n  color: #f1fa8c;\n}\n\n\n4. Hide Elements\ncss\n/ Hide elements you don't use /\n.pomodoro-timer {\n  display: none;\n}\n\n/ Hide breadcrumbs /\n.breadcrumb {\n  display: none;\n}\n\n\nDebugging Tips\n\n1. Use Browser DevTools\n- Right-click \u2192 Inspect Element\n- Test CSS changes live\n- Copy working styles to custom CSS\n\n2. Check Specificity\nIf styles aren't applying:\ncss\n/ Increase specificity /\nbody .content h1 {\n  / styles /\n}\n\n/ Or use !important as last resort /\n.element {\n  color: red !important;\n}\n\n\n3. Validate CSS\nEnsure your CSS is valid:\n- No missing semicolons\n- Proper bracket matching\n- Valid property names\n\nSafety and Performance\n\nDo's\n- \u2705 Override CSS variables when possible\n- \u2705 Test with multiple themes\n- \u2705 Keep custom CSS organized\n- \u2705 Comment complex sections\n- \u2705 Back up your custom CSS\n\nDon'ts\n- \u274c Don't hide critical UI elements\n- \u274c Avoid breaking layouts with position changes\n- \u274c Don't use excessive animations\n- \u274c Avoid very large CSS files\n\nExamples Gallery\n\nMinimal Writer Theme\ncss\n/ Clean, distraction-free writing /\n:root {\n  --bg-primary: #fafafa;\n  --text-primary: #333;\n  --accent-primary: #333;\n}\n\n.sidebar { width: 200px; }\n.header { border-bottom: none; }\n.content { max-width: 650px; }\n\n\nNeon Glow Effect\ncss\n/ Cyberpunk-style glow /\n.tab.active {\n  box-shadow: 0 0 20px var(--accent-primary);\n}\n\nh1, h2 {\n  text-shadow: 0 0 10px currentColor;\n}\n\n\nPaper Notebook Style\ncss\n/ Lined paper effect /\n.content {\n  background-image: repeating-linear-gradient(\n    transparent,\n    transparent 1.5rem,\n    #e0e0e0 1.5rem,\n    #e0e0e0 calc(1.5rem + 1px)\n  );\n  line-height: 1.5rem;\n}\n\n\nRelated Features\n\n- [[Themes]] - Built-in theme system\n- [[Typography and Fonts|Typography]] - Font customization\n- [[Settings Customization]] - Other customization options\n- [[Focus Mode]] - Distraction-free writing\n- [[Print Mode|Print Styles]] - Custom print styling\n\nSharing Custom CSS\n\nShare your custom CSS with others:\n1. Copy your CSS from settings\n2. Save to a .css file\n3. Share via GitHub Gist or similar\n4. Others can paste into their custom CSS\n\nRemember: Custom CSS is stored locally and needs to be manually backed up! :root {\n  /* Backgrounds */\n  --bg-primary: #1a1a1a;\n  --bg-secondary: #252525;\n  --bg-sidebar: #1e1e1e;\n  \n  /* Text Colors */\n  --text-primary: #ffffff;\n  --text-secondary: #cccccc;\n  --text-muted: #999999;\n  \n  /* Accent Colors */\n  --accent-primary: #007acc;\n  --accent-secondary: #0098ff;\n  --accent-error: #ff6b6b;\n  --accent-warning: #ffa500;\n  --accent-success: #4caf50;\n} :root {\n  --accent-primary: #ff6b6b;\n  --accent-secondary: #ff8787;\n  --link-color: #ff6b6b;\n} :root {\n  --spacing-xs: 0.5rem;\n  --spacing-sm: 1rem;\n  --spacing-md: 1.5rem;\n  --spacing-lg: 2rem;\n} :root {\n  --font-family: 'Georgia', serif;\n  --font-mono: 'Fira Code', monospace;\n} /* Wider sidebar */\n.sidebar {\n  width: 300px !important;\n}\n\n/* Custom folder colors */\n.folder-name {\n  color: #ffa500;\n}\n\n/* Highlight active file */\n.tree-item.active {\n  background-color: rgba(255, 255, 255, 0.1);\n  font-weight: bold;\n} /* Rounded tabs */\n.tab {\n  border-radius: 8px 8px 0 0;\n  margin: 0 2px;\n}\n\n/* Colorful pinned tabs */\n.tab.pinned {\n  background-color: #ff6b6b;\n}\n\n/* Tab hover effect */\n.tab:hover {\n  transform: translateY(-2px);\n  transition: transform 0.2s;\n} /* Custom heading styles */\n.content h1 {\n  border-bottom: 3px solid var(--accent-primary);\n  padding-bottom: 0.5rem;\n}\n\n/* Styled blockquotes */\nblockquote {\n  border-left: 4px solid #ffa500;\n  background-color: rgba(255, 165, 0, 0.1);\n  font-style: italic;\n}\n\n/* Code block enhancements */\npre {\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n  border-radius: 8px;\n} /* Create a custom callout type */\n.callout-custom {\n  background-color: #e3f2fd;\n  border-color: #2196f3;\n  color: #0d47a1;\n}\n\n.callout-custom .callout-icon::before {\n  content: \"\ud83d\udca1\";\n} /* Smooth transitions */\n* {\n  transition: background-color 0.3s ease;\n}\n\n/* Animated links */\na {\n  position: relative;\n  text-decoration: none;\n}\n\na::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 0;\n  height: 2px;\n  background-color: var(--accent-primary);\n  transition: width 0.3s;\n}\n\na:hover::after {\n  width: 100%;\n} /* Ultra-focused reading mode */\nbody.focus-mode .content {\n  max-width: 650px;\n  font-size: 1.2em;\n  line-height: 1.8;\n}\n\nbody.focus-mode {\n  background-color: #fafafa;\n} /* Override theme colors while keeping theme structure */\n[data-theme=\"ayu-mirage\"] {\n  --bg-primary: #1f2430;\n  --accent-primary: #ffcc66;\n}\n\n/* Conditional styling based on theme */\n[data-theme*=\"dark\"] .content {\n  text-shadow: 0 0 2px rgba(0, 0, 0, 0.5);\n} /* Mobile-specific styles */\n@media (max-width: 768px) {\n  .sidebar {\n    width: 100% !important;\n  }\n  \n  .content {\n    padding: 1rem !important;\n  }\n}\n\n/* Large screen optimizations */\n@media (min-width: 1400px) {\n  .content {\n    max-width: 1200px;\n  }\n} /* Good - uses variables */\n.custom-element {\n  color: var(--text-primary);\n  background: var(--bg-secondary);\n}\n\n/* Avoid - hardcoded colors */\n.custom-element {\n  color: #ffffff;\n  background: #252525;\n} /* Use specific selectors */\n.sidebar .tree-item.active {\n  /* styles */\n}\n\n/* Avoid !important when possible */\n.tree-item {\n  color: red !important; /* Try to avoid */\n} :root {\n  --accent-primary: #your-brand-color;\n  --accent-secondary: #your-secondary-color;\n} .content {\n  font-size: 18px;\n  line-height: 1.7;\n  letter-spacing: 0.02em;\n} /* Override Prism.js theme colors */\n.token.keyword {\n  color: #ff79c6;\n}\n\n.token.string {\n  color: #f1fa8c;\n} /* Hide elements you don't use */\n.pomodoro-timer {\n  display: none;\n}\n\n/* Hide breadcrumbs */\n.breadcrumb {\n  display: none;\n} /* Increase specificity */\nbody .content h1 {\n  /* styles */\n}\n\n/* Or use !important as last resort */\n.element {\n  color: red !important;\n} /* Clean, distraction-free writing */\n:root {\n  --bg-primary: #fafafa;\n  --text-primary: #333;\n  --accent-primary: #333;\n}\n\n.sidebar { width: 200px; }\n.header { border-bottom: none; }\n.content { max-width: 650px; } /* Cyberpunk-style glow */\n.tab.active {\n  box-shadow: 0 0 20px var(--accent-primary);\n}\n\nh1, h2 {\n  text-shadow: 0 0 10px currentColor;\n} /* Lined paper effect */\n.content {\n  background-image: repeating-linear-gradient(\n    transparent,\n    transparent 1.5rem,\n    #e0e0e0 1.5rem,\n    #e0e0e0 calc(1.5rem + 1px)\n  );\n  line-height: 1.5rem;\n}",
      "code_blocks_count": 22
    },
    {
      "path": "/notes/tutorials/features/tag-filtering.md",
      "context": "tutorials",
      "metadata": {
        "title": "Tag Filtering",
        "tags": [
          "search",
          "organization",
          "filtering",
          "tags",
          "navigation"
        ],
        "created": "2025-01-23",
        "author": "NotesWiki Team",
        "description": "Master the powerful tag filtering system to quickly find related content",
        "updated": "2025-01-23",
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Tag filtering is a powerful way to quickly narrow down your notes to specific topics or categories. Unlike text search, tag filtering lets you browse and combine tags visually, making it perfect for e...",
      "searchable_content": "\nTag Filtering\n\nTag filtering is a powerful way to quickly narrow down your notes to specific topics or categories. Unlike text search, tag filtering lets you browse and combine tags visually, making it perfect for exploring related content or finding notes by category.\n\nOpening the Tag Filter\n\nAccess the tag filter by:\n\n1. Tag Filter Button: Click the tag icon (\ud83c\udff7\ufe0f) in the header\n\nThis opens the visual tag filter modal showing all available tags with search and filtering options.\n\nUnderstanding the Tag Filter Interface\n\nTag Display\n- Tag badges show each tag with its note count\n- Color coding indicates tag state:\n  - Normal (gray) - Available for selection\n  - Selected (blue) - Included in filter\n  - Excluded (red) - Explicitly excluded from results\n\nTag Search\n- Search box at the top to quickly find specific tags\n- Type to filter the tag list in real-time\n- Useful when you have many tags\n\nFilter Information\n- Active filter count shows number of selected tags\n- Results preview indicates how many notes match\n- Filter mode shows AND/OR logic (if applicable)\n\nBasic Tag Selection\n\nIncluding Tags (OR Logic)\n\n1. Click any tag to include it in your filter\n2. Tag turns blue indicating selection\n3. Results show notes with ANY of the selected tags\n4. Click additional tags to expand results\n\nExample: Selecting \"javascript\" and \"tutorial\" shows all notes tagged with either.\n\nExcluding Tags\n\n1. Right-click any tag to exclude it\n2. Tag turns red indicating exclusion\n3. Results hide notes with that tag\n4. Useful for filtering out unwanted content\n\nAlternative: Hold Ctrl while clicking to exclude\n\nExample: Select \"tutorial\" but exclude \"advanced\" to find beginner tutorials.\n\nAdvanced Filtering Techniques\n\nCombining Includes and Excludes\n\nCreate precise filters by combining both:\n\n1. Include tags for topics you want\n2. Exclude tags for content to avoid\n3. Results show included tags minus excluded ones\n\nExample Use Case:\n- Include: \"python\", \"tutorial\"\n- Exclude: \"deprecated\", \"draft\"\n- Result: Current Python tutorials only\n\nMulti-Tag Workflows\n\nResearch Workflow:\n1. Include all relevant topic tags\n2. Exclude \"archived\" or \"outdated\"\n3. Browse filtered results\n\nProject Organization:\n1. Include your project tag\n2. Include status tags like \"active\" or \"todo\"\n3. Exclude \"completed\" if focusing on current work\n\nTag Filter Controls\n\nClear Filters\n- Clear All button removes all tag selections\n- Resets to show all notes\n- Keyboard: Escape also clears and closes\n\nApply Filter\n- Apply button activates the filter\n- Updates the note list immediately\n- Filter remains active until cleared\n\nVisual Indicators\n- Badge numbers show note count per tag\n- Highlighted tags show current selection\n- Strikethrough on excluded tags (in some themes)\n\nSearch Operators vs Tag Filter\n\nWhen to Use Tag Filter\n\nUse tag filtering when you want to:\n- Browse by category without specific keywords\n- Combine multiple topics visually\n- Exclude categories of content\n- Explore available tags in your wiki\n\nWhen to Use Search\n\nUse text search (Ctrl + K) when you:\n- Know specific keywords\n- Need full-text search\n- Want to combine text and tag queries\n- Need advanced operators\n\nCombining Both\n\nPower user tip: Use search with tag operators:\n\ntag:javascript tag:tutorial -tag:advanced react\n\nThis searches for \"react\" in JavaScript tutorials, excluding advanced ones.\n\nPractical Examples\n\n1. Finding Learning Resources\n\nInclude: tutorial, guide, howto\nExclude: advanced, reference\n\n\n2. Project Management\n\nInclude: project-x, active\nExclude: completed, archived\n\n\n3. Knowledge Areas\n\nInclude: programming, web-dev\nExclude: deprecated, outdated\n\n\n4. Time-Based Filtering\n\nInclude: 2024, current\nExclude: archived, historical\n\n\nTag Organization Best Practices\n\nHierarchical Tagging\nConsider using prefixes for organization:\n- project-website\n- project-mobile\n- status-active\n- status-completed\n- type-tutorial\n- type-reference\n\nConsistent Naming\n- Use lowercase for consistency\n- Use hyphens for multi-word tags\n- Avoid special characters\n- Keep tags concise but descriptive\n\nTag Categories\nOrganize tags by purpose:\n- Topics: javascript, python, docker\n- Types: tutorial, reference, snippet\n- Status: draft, review, published\n- Projects: project-a, project-b\n- Dates: 2024, q1-2024\n\nPerformance Tips\n\nWith Many Tags\n- Use the search box to quickly find tags\n- Organize tags with consistent prefixes\n- Regular cleanup of unused tags\n- Consider tag hierarchies\n\nLarge Note Collections\n- Start with broad categories\n- Progressively narrow with excludes\n- Save common filter combinations\n- Use search for very specific queries\n\nKeyboard Shortcuts\n\n| Action | Shortcut |\n|--------|----------|\n| Clear and Close | Escape |\n| Toggle Tag | Click |\n| Exclude Tag | Right-click or Ctrl + Click |\n\nNote: Tag filtering is accessed via the tag button (\ud83c\udff7\ufe0f) in the header - no keyboard shortcut is available.\n\nRelated Features\n\n- [[Search Guide]] - Full-text search and operators\n- [[Bookmarks]] - Save frequently accessed notes\n- [[Context Filtering]] - Filter by folders\n- [[Recent Files & Bookmarks|Recent Files]] - Quick access to recent work\n\nTips and Tricks\n\n1. Quick Exclude: Right-click is fastest for exclusions\n2. Bulk Select: Click multiple tags rapidly without waiting\n3. Preview Results: Watch the count update as you select\n4. Escape to Reset: Quick way to start over\n5. Combine Methods: Use both tag filter and search for precision\n\nCommon Issues\n\nQ: No tags appear in the filter\nA: Ensure your notes have tags in their frontmatter\n\nQ: Filter isn't applying\nA: Click the Apply button after making selections\n\nQ: Too many tags to browse\nA: Use the search box to filter the tag list\n\nQ: Can't see excluded tags clearly\nA: Some themes show exclusions better than others tag:javascript tag:tutorial -tag:advanced react Include: tutorial, guide, howto\nExclude: advanced, reference Include: project-x, active\nExclude: completed, archived Include: programming, web-dev\nExclude: deprecated, outdated Include: 2024, current\nExclude: archived, historical",
      "code_blocks_count": 5
    },
    {
      "path": "/notes/tutorials/advanced/performance-optimization.md",
      "context": "tutorials",
      "metadata": {
        "title": "Performance Optimization Guide",
        "tags": [
          "performance",
          "optimization",
          "advanced",
          "large-collections",
          "speed"
        ],
        "created": "2025-01-19",
        "author": "Wiki Team",
        "description": "Advanced guide to optimizing Notes Wiki performance for large note collections and improved user experience",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Optimize Notes Wiki for lightning-fast performance with large note collections, efficient search, and smooth user experience. This guide covers advanced techniques for power users managing hundreds or...",
      "searchable_content": "\nPerformance Optimization Guide\n\nOptimize Notes Wiki for lightning-fast performance with large note collections, efficient search, and smooth user experience. This guide covers advanced techniques for power users managing hundreds or thousands of notes.\n\n\ud83d\udcca Performance Baseline\n\nUnderstanding Performance Metrics\n\nKey Performance Indicators\njavascript\n// Benchmark your current performance\nconst metrics = {\n  initialLoadTime: '<2 seconds',      // First page load\n  searchResponseTime: '<100ms',       // Search query to results\n  tabSwitchTime: '<50ms',            // Tab switching speed\n  scrollPerformance: '60fps',         // Smooth scrolling\n  memoryUsage: '<100MB',             // Browser memory consumption\n};\n\n\nWhen to Optimize\nConsider optimization when you experience:\n- \u26a0\ufe0f Search takes >500ms for simple queries\n- \u26a0\ufe0f Tab switching feels sluggish\n- \u26a0\ufe0f Initial load takes >5 seconds\n- \u26a0\ufe0f Browser memory usage >200MB\n- \u26a0\ufe0f Scroll lag or UI freezing\n\nPerformance Measurement Tools\n\nBrowser Developer Tools\njavascript\n// Performance monitoring in console\nconsole.time('search-performance');\n// Perform search\nconsole.timeEnd('search-performance');\n\n// Memory usage check\nconsole.log('Memory usage:', performance.memory);\n\n// Monitor long tasks\nnew PerformanceObserver((list) => {\n  for (const entry of list.getEntries()) {\n    console.log('Long task:', entry.duration);\n  }\n}).observe({entryTypes: ['longtask']});\n\n\nBuilt-in Performance Monitor\njavascript\n// Enable debug mode for performance insights\nlocalStorage.setItem('wiki-debug', 'true');\nlocalStorage.setItem('wiki-performance', 'true');\n// Reload page to see performance logs\n\n\n\ud83d\uddc2\ufe0f Content Optimization\n\nNote Collection Management\n\nOptimal Collection Size\nbash\nPerformance guidelines by collection size\nSmall (1-100 notes):     No optimization needed\nMedium (100-500 notes):  Basic optimization recommended\nLarge (500-1000 notes):  Moderate optimization required\nHuge (1000+ notes):      Aggressive optimization essential\n\n\nCollection Structure\n\nOptimized structure for large collections\nnotes/\n\u251c\u2500\u2500 active/           # Current working notes (< 50 notes)\n\u251c\u2500\u2500 reference/        # Frequently accessed (< 100 notes)\n\u251c\u2500\u2500 archive/          # Older content (organized by year/quarter)\n\u2514\u2500\u2500 projects/         # Project-specific notes (organized by status)\n\n\nSearch Index Optimization\n\nIndex Size Management\nbash\nCheck current index size\nls -lh notes-index.json\nTarget: < 5MB for optimal performance\n\nAnalyze index contents\npython3 -c \"\nimport json\nwith open('notes-index.json') as f:\n    data = json.load(f)\n    print(f'Total entries: {len(data)}')\n    totalsize = sum(len(str(item)) for item in data)\n    print(f'Total content size: {totalsize:,} characters')\n    avgsize = totalsize / len(data)\n    print(f'Average note size: {avgsize:.0f} characters')\n\"\n\n\nCustom Build Optimization\npython\nbuild-optimized.py - Custom optimized build script\nimport json\nimport os\nfrom pathlib import Path\n\ndef buildoptimizedindex():\n    notes = []\n    notesdir = Path(\"notes\")\n    \n    for mdfile in notesdir.rglob(\".md\"):\n        # Skip archived or draft content\n        if 'archive' in str(mdfile) or 'draft' in str(mdfile):\n            continue\n            \n        with open(mdfile, 'r', encoding='utf-8') as f:\n            content = f.read()\n            \n            # Extract frontmatter and content\n            if content.startswith('---'):\n                parts = content.split('---', 2)\n                if len(parts) >= 3:\n                    frontmatter = parts[1]\n                    body = parts[2]\n                    \n                    # Optimize content size\n                    # Keep only first 1000 characters for search\n                    optimizedcontent = body[:1000]\n                    \n                    # Build minimal index entry\n                    entry = {\n                        'id': str(mdfile.relativeto(notesdir).withsuffix('')),\n                        'title': extracttitle(frontmatter),\n                        'content': optimizedcontent.strip(),\n                        'tags': extracttags(frontmatter),\n                        'path': str(mdfile)\n                    }\n                    notes.append(entry)\n    \n    # Write compressed index\n    with open('notes-index.json', 'w', encoding='utf-8') as f:\n        json.dump(notes, f, separators=(',', ':'), ensureascii=False)\n    \n    print(f\"Optimized index built with {len(notes)} entries\")\n\nif name == \"main\":\n    buildoptimizedindex()\n\n\nIncremental Index Updates\npython\nincremental-build.py - Only rebuild changed files\nimport os\nimport json\nimport hashlib\nfrom pathlib import Path\n\ndef getfilehash(filepath):\n    with open(filepath, 'rb') as f:\n        return hashlib.md5(f.read()).hexdigest()\n\ndef incrementalbuild():\n    # Load existing index and hashes\n    try:\n        with open('notes-index.json') as f:\n            existingindex = json.load(f)\n        with open('.index-hashes.json') as f:\n            existinghashes = json.load(f)\n    except FileNotFoundError:\n        existingindex = []\n        existinghashes = {}\n    \n    notesdir = Path(\"notes\")\n    updatednotes = []\n    currenthashes = {}\n    \n    # Check each markdown file\n    for mdfile in notesdir.rglob(\".md\"):\n        filepath = str(mdfile)\n        currenthash = getfilehash(mdfile)\n        currenthashes[filepath] = currenthash\n        \n        # If file changed or is new\n        if existinghashes.get(filepath) != currenthash:\n            # Process the changed file\n            entry = processnotefile(mdfile)\n            updatednotes.append(entry)\n            print(f\"Updated: {filepath}\")\n    \n    # Merge with existing index\n    # ... (merge logic here)\n    \n    # Save updated index and hashes\n    with open('notes-index.json', 'w') as f:\n        json.dump(finalindex, f)\n    with open('.index-hashes.json', 'w') as f:\n        json.dump(currenthashes, f)\n\n\nContent Optimization\n\nReduce Note Bloat\nmarkdown\n<!-- Before: Verbose and repetitive -->\nMeeting Notes from the Weekly Team Meeting on January 19, 2025\n\nToday we had our weekly team meeting. In this meeting, we discussed several important topics including project updates, budget considerations, and timeline adjustments for the current quarter.\n\nProject Updates\nDuring the meeting, John provided updates on Project Alpha. He mentioned that the project is progressing well and is currently on track to meet the deadline...\n\n<!-- After: Concise and structured -->\nTeam Meeting - 2025-01-19\n\nKey Updates\n- Project Alpha (John): On track, Q1 delivery confirmed\n- Budget Review (Sarah): 15% under budget, reallocate to tools\n- Timeline (Mike): Sprint 3 extended by 1 week\n\nDecisions\n1. Approved additional tool licenses\n2. Extended current sprint deadline\n3. Next review scheduled for 2025-01-26\n\nAction Items\n- [ ] John: Complete Alpha testing by Jan 25\n- [ ] Sarah: Submit budget reallocation request\n- [ ] Mike: Update project timeline in tracker\n\n\nOptimize Media Content\nbash\nCompress large images\nfind notes/ -name \".jpg\" -size +500k -exec echo \"Large image: {}\" \\;\nfind notes/ -name \".png\" -size +500k -exec echo \"Large image: {}\" \\;\n\nUse image optimization tools\nImageOptim, TinyPNG, or CLI tools like:\nmogrify -resize 800x600 -quality 85 notes//.jpg\n\n\nArchive Strategy\nbash\nMove old content to archive\nfind notes/ -name \".md\" -mtime +365 -path \"/archive/\" -prune -o -print | \nwhile read file; do\n    year=$(date -r \"$file\" +%Y)\n    mkdir -p \"notes/archive/$year\"\n    mv \"$file\" \"notes/archive/$year/\"\ndone\n\nUpdate index after archiving\npython3 build.py\n\n\n\u26a1 Browser Performance\n\nMemory Management\n\nSettings for Large Collections\njavascript\n// Optimized settings for performance\nconst performanceSettings = {\n    // Reduce memory usage\n    recentFilesLimit: 10,         // Default: 20\n    searchHistoryLimit: 25,       // Default: 50\n    maxTabsOpen: 5,              // Default: 10\n    \n    // Optimize rendering\n    enableVirtualScrolling: true,\n    lazyLoadImages: true,\n    debounceSearch: 300,         // ms delay for search\n    \n    // Reduce visual effects\n    animationSpeed: 'fast',       // or 'none' for maximum speed\n    transitionsEnabled: false,    // Disable for performance\n    \n    // Memory cleanup\n    autoCleanupInterval: 300000,  // 5 minutes\n    maxCacheSize: 50,            // Number of cached notes\n};\n\n// Apply settings\nlocalStorage.setItem('wiki-settings', JSON.stringify(performanceSettings));\n\n\nMemory Cleanup\njavascript\n// Manual memory cleanup function\nfunction performanceCleanup() {\n    // Clear unused cached data\n    const cache = JSON.parse(localStorage.getItem('wiki-cache') || '{}');\n    const now = Date.now();\n    const maxAge = 30  60  1000; // 30 minutes\n    \n    Object.keys(cache).forEach(key => {\n        if (cache[key].timestamp < now - maxAge) {\n            delete cache[key];\n        }\n    });\n    \n    localStorage.setItem('wiki-cache', JSON.stringify(cache));\n    \n    // Force garbage collection (if available)\n    if (window.gc) {\n        window.gc();\n    }\n    \n    console.log('Performance cleanup completed');\n}\n\n// Run cleanup every 10 minutes\nsetInterval(performanceCleanup, 600000);\n\n\nOptimized Theme Selection\n\nPerformance-Oriented Themes\njavascript\n// Fastest-loading themes (minimal CSS)\nconst fastThemes = [\n    'light',           // Minimal styling\n    'dark',            // Basic dark theme\n    'zenburn',         // Simple, low contrast\n    'vim',             // Lightweight terminal style\n];\n\n// Avoid heavy themes for large collections\nconst heavyThemes = [\n    'cyberpunk',       // Complex animations\n    'vaporwave',       // Gradient-heavy\n    'holographic',     // Effects-intensive\n    'digital-rain',    // Animation-heavy\n];\n\n\nCSS Optimization\ncss\n/ Custom CSS for performance /\n/ Add to Settings \u2192 Appearance \u2192 Custom CSS /\n\n/ Disable animations for performance /\n, ::before, ::after {\n    animation-duration: 0s !important;\n    animation-delay: 0s !important;\n    transition-duration: 0s !important;\n    transition-delay: 0s !important;\n}\n\n/ Optimize font rendering /\nbody {\n    font-display: swap;\n    text-rendering: optimizeSpeed;\n}\n\n/ Reduce visual complexity /\n.content-area {\n    box-shadow: none;\n    border-radius: 0;\n}\n\n/ Optimize scrolling /\n.note-content {\n    contain: layout style paint;\n    will-change: scroll-position;\n}\n\n\n\ud83d\udd0d Search Performance\n\nAdvanced Search Configuration\n\nSearch Optimization Settings\njavascript\n// Optimize search for large collections\nconst searchConfig = {\n    // Debounce settings\n    searchDelay: 200,              // Wait 200ms before searching\n    minQueryLength: 2,             // Don't search single characters\n    \n    // Result optimization\n    maxResults: 20,                // Limit initial results\n    resultsPagination: true,       // Enable pagination\n    \n    // Indexing optimization\n    indexChunkSize: 100,          // Process index in chunks\n    searchWorker: true,           // Use web worker for search\n    \n    // Cache settings\n    cacheSearchResults: true,     // Cache recent searches\n    maxCacheEntries: 50,         // Limit cache size\n};\n\n\nCustom Search Implementation\njavascript\n// Optimized search with web worker\nclass OptimizedSearch {\n    constructor() {\n        this.searchWorker = new Worker('search-worker.js');\n        this.resultCache = new Map();\n        this.maxCacheSize = 50;\n    }\n    \n    async search(query) {\n        // Check cache first\n        if (this.resultCache.has(query)) {\n            return this.resultCache.get(query);\n        }\n        \n        // Use web worker for search\n        const results = await new Promise((resolve) => {\n            this.searchWorker.postMessage({ query, index: this.searchIndex });\n            this.searchWorker.onmessage = (e) => resolve(e.data);\n        });\n        \n        // Cache results\n        if (this.resultCache.size >= this.maxCacheSize) {\n            const firstKey = this.resultCache.keys().next().value;\n            this.resultCache.delete(firstKey);\n        }\n        this.resultCache.set(query, results);\n        \n        return results;\n    }\n}\n\n\nSearch Strategy Optimization\n\nQuery Optimization\njavascript\n// Efficient search patterns\nconst searchTips = {\n    // Fast searches\n    tagSearch: 'tag:javascript',           // Pre-indexed field\n    authorSearch: 'author:admin',          // Pre-indexed field\n    exactPhrase: '\"specific phrase\"',      // Single exact match\n    \n    // Slower searches (use sparingly)\n    wildcardSearch: 'java',              // Pattern matching\n    fuzzySearch: 'javascrpt',            // Fuzzy matching\n    complexQuery: 'tag:js AND author:admin AND \"tutorial\"',\n    \n    // Optimization strategies\n    useFilters: 'Use tag: and author: filters before free text',\n    beSpecific: 'Specific terms faster than general ones',\n    useExact: 'Use \"quotes\" for exact phrases',\n    limitScope: 'Search within specific folders when possible'\n};\n\n\n\ud83d\ude80 Advanced Optimization\n\nProgressive Loading\n\nLazy Loading Implementation\njavascript\n// Implement progressive note loading\nclass LazyNoteLoader {\n    constructor() {\n        this.observer = new IntersectionObserver(\n            this.handleIntersection.bind(this),\n            { threshold: 0.1 }\n        );\n        this.loadedNotes = new Set();\n    }\n    \n    handleIntersection(entries) {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                this.loadNote(entry.target.dataset.noteId);\n            }\n        });\n    }\n    \n    async loadNote(noteId) {\n        if (this.loadedNotes.has(noteId)) return;\n        \n        // Load note content asynchronously\n        const content = await this.fetchNoteContent(noteId);\n        this.renderNote(noteId, content);\n        this.loadedNotes.add(noteId);\n    }\n}\n\n\nVirtual Scrolling for Search Results\njavascript\n// Virtual scrolling for large result sets\nclass VirtualScrollResults {\n    constructor(container, itemHeight = 60) {\n        this.container = container;\n        this.itemHeight = itemHeight;\n        this.visibleItems = Math.ceil(container.clientHeight / itemHeight) + 2;\n        this.scrollTop = 0;\n        this.data = [];\n        \n        this.setupScrollListener();\n    }\n    \n    setData(data) {\n        this.data = data;\n        this.render();\n    }\n    \n    render() {\n        const startIndex = Math.floor(this.scrollTop / this.itemHeight);\n        const endIndex = Math.min(startIndex + this.visibleItems, this.data.length);\n        \n        // Only render visible items\n        const visibleData = this.data.slice(startIndex, endIndex);\n        this.renderItems(visibleData, startIndex);\n    }\n    \n    setupScrollListener() {\n        this.container.addEventListener('scroll', () => {\n            this.scrollTop = this.container.scrollTop;\n            this.render();\n        });\n    }\n}\n\n\nDatabase-Style Indexing\n\nMulti-Field Index Creation\npython\ncreate-optimized-index.py\nimport json\nfrom collections import defaultdict\n\ndef createmultiindex(notes):\n    \"\"\"Create multiple optimized indexes for fast lookup\"\"\"\n    \n    # Main content index\n    contentindex = []\n    \n    # Specialized indexes\n    tagindex = defaultdict(list)\n    authorindex = defaultdict(list)\n    dateindex = defaultdict(list)\n    titleindex = {}\n    \n    for i, note in enumerate(notes):\n        # Content index (existing)\n        contentindex.append(note)\n        \n        # Tag index\n        for tag in note.get('tags', []):\n            tagindex[tag].append(i)\n        \n        # Author index\n        if note.get('author'):\n            authorindex[note['author']].append(i)\n        \n        # Date index\n        if note.get('created'):\n            datekey = note['created'][:7]  # YYYY-MM\n            dateindex[datekey].append(i)\n        \n        # Title index for exact matches\n        if note.get('title'):\n            titleindex[note['title'].lower()] = i\n    \n    return {\n        'content': contentindex,\n        'tags': dict(tagindex),\n        'authors': dict(authorindex),\n        'dates': dict(dateindex),\n        'titles': titleindex\n    }\n\ndef saveoptimizedindexes(indexes):\n    \"\"\"Save indexes as separate files for faster loading\"\"\"\n    \n    # Main index (always loaded)\n    with open('notes-index.json', 'w') as f:\n        json.dump(indexes['content'], f, separators=(',', ':'))\n    \n    # Specialized indexes (loaded on demand)\n    for indexname, indexdata in indexes.items():\n        if indexname != 'content':\n            with open(f'index-{indexname}.json', 'w') as f:\n                json.dump(indexdata, f, separators=(',', ':'))\n\n\nPerformance Monitoring\n\nReal-Time Performance Dashboard\njavascript\n// Performance monitoring system\nclass PerformanceMonitor {\n    constructor() {\n        this.metrics = {\n            searchTimes: [],\n            loadTimes: [],\n            memoryUsage: [],\n            renderTimes: []\n        };\n        this.startTime = performance.now();\n    }\n    \n    recordSearchTime(duration) {\n        this.metrics.searchTimes.push(duration);\n        this.logSlowOperation('search', duration, 100);\n    }\n    \n    recordLoadTime(duration) {\n        this.metrics.loadTimes.push(duration);\n        this.logSlowOperation('load', duration, 500);\n    }\n    \n    logSlowOperation(operation, duration, threshold) {\n        if (duration > threshold) {\n            console.warn(Slow ${operation}: ${duration}ms (threshold: ${threshold}ms));\n            this.suggestOptimizations(operation, duration);\n        }\n    }\n    \n    suggestOptimizations(operation, duration) {\n        const suggestions = {\n            search: [\n                'Consider using tag: or author: filters',\n                'Use more specific search terms',\n                'Check if search index needs rebuilding'\n            ],\n            load: [\n                'Reduce note collection size',\n                'Archive old notes',\n                'Optimize images and media'\n            ]\n        };\n        \n        console.log(Optimization suggestions for ${operation}:, suggestions[operation]);\n    }\n    \n    generateReport() {\n        const report = {\n            averageSearchTime: this.average(this.metrics.searchTimes),\n            averageLoadTime: this.average(this.metrics.loadTimes),\n            peakMemoryUsage: Math.max(...this.metrics.memoryUsage),\n            slowOperations: this.metrics.searchTimes.filter(t => t > 200).length\n        };\n        \n        console.table(report);\n        return report;\n    }\n    \n    average(arr) {\n        return arr.length ? arr.reduce((a, b) => a + b) / arr.length : 0;\n    }\n}\n\n// Initialize monitoring\nconst perfMonitor = new PerformanceMonitor();\n\n\n\ud83d\udcf1 Mobile Performance\n\nMobile-Specific Optimizations\n\nTouch Performance\ncss\n/ Optimize touch interactions /\n.touch-optimized {\n    touch-action: manipulation;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n}\n\n/ Optimize scrolling on mobile /\n.scroll-container {\n    -webkit-overflow-scrolling: touch;\n    scroll-behavior: smooth;\n}\n\n/ Reduce mobile rendering load /\n@media (max-width: 768px) {\n    .complex-animations {\n        animation: none !important;\n    }\n    \n    .heavy-shadows {\n        box-shadow: none !important;\n    }\n}\n\n\nMobile-First Loading Strategy\njavascript\n// Detect mobile and adjust performance settings\nconst isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\nif (isMobile) {\n    // Reduce features for mobile performance\n    const mobileSettings = {\n        animationsEnabled: false,\n        maxTabsOpen: 3,\n        searchResultsLimit: 10,\n        imageLoadingStrategy: 'lazy',\n        cacheSize: 25\n    };\n    \n    // Apply mobile optimizations\n    applyMobileOptimizations(mobileSettings);\n}\n\n\n\ud83c\udfaf Performance Testing\n\nBenchmarking Tools\n\nPerformance Test Suite\njavascript\n// Comprehensive performance test\nclass PerformanceTestSuite {\n    async runAllTests() {\n        const results = {};\n        \n        // Test search performance\n        results.search = await this.testSearchPerformance();\n        \n        // Test memory usage\n        results.memory = await this.testMemoryUsage();\n        \n        // Test load times\n        results.loading = await this.testLoadTimes();\n        \n        // Test rendering performance\n        results.rendering = await this.testRenderingPerformance();\n        \n        return this.generateReport(results);\n    }\n    \n    async testSearchPerformance() {\n        const queries = ['javascript', 'tag:tutorial', '\"exact phrase\"', 'author:admin'];\n        const times = [];\n        \n        for (const query of queries) {\n            const start = performance.now();\n            await this.performSearch(query);\n            const duration = performance.now() - start;\n            times.push({ query, duration });\n        }\n        \n        return {\n            averageTime: times.reduce((sum, t) => sum + t.duration, 0) / times.length,\n            slowestQuery: times.reduce((max, t) => t.duration > max.duration ? t : max),\n            allTimes: times\n        };\n    }\n    \n    async testMemoryUsage() {\n        const initialMemory = performance.memory?.usedJSHeapSize || 0;\n        \n        // Perform memory-intensive operations\n        await this.loadLargeNotesSet();\n        await this.performMultipleSearches();\n        \n        const finalMemory = performance.memory?.usedJSHeapSize || 0;\n        \n        return {\n            initialMemory,\n            finalMemory,\n            memoryIncrease: finalMemory - initialMemory,\n            memoryEfficiency: finalMemory < initialMemory  1.5 ? 'Good' : 'Needs optimization'\n        };\n    }\n}\n\n\nAutomated Performance Monitoring\nbash\n#!/bin/bash\nperformance-monitor.sh\n\necho \"Notes Wiki Performance Monitor\"\necho \"=============================\"\n\nCheck file sizes\necho \"Index file size:\"\nls -lh notes-index.json\n\necho -e \"\\nNote collection size:\"\nfind notes/ -name \".md\" | wc -l\n\necho -e \"\\nTotal notes directory size:\"\ndu -sh notes/\n\nCheck for large files\necho -e \"\\nLarge files (>1MB):\"\nfind notes/ -size +1M -type f\n\nMemory usage simulation\necho -e \"\\nBrowser performance test:\"\nnode -e \"\nconst fs = require('fs');\nconst start = process.memoryUsage();\nconst index = JSON.parse(fs.readFileSync('notes-index.json'));\nconst end = process.memoryUsage();\nconsole.log('Index entries:', index.length);\nconsole.log('Memory used:', Math.round((end.heapUsed - start.heapUsed) / 1024 / 1024), 'MB');\n\"\n\n\n\ud83d\udcc8 Optimization Roadmap\n\nProgressive Enhancement Strategy\n\nPhase 1: Basic Optimization (Immediate)\nbash\n\u2705 Rebuild search index\n\u2705 Clear browser cache\n\u2705 Update to performance-optimized theme\n\u2705 Reduce tab limit to 5\n\u2705 Enable focus mode for reading\n\n\nPhase 2: Content Optimization (Week 1)\nbash\n\u25a1 Archive notes older than 1 year\n\u25a1 Compress large images\n\u25a1 Remove duplicate content\n\u25a1 Optimize note titles for search\n\u25a1 Implement consistent tagging\n\n\nPhase 3: Advanced Optimization (Week 2-4)\nbash\n\u25a1 Implement custom build script\n\u25a1 Set up incremental indexing\n\u25a1 Configure performance monitoring\n\u25a1 Optimize CSS for speed\n\u25a1 Implement lazy loading\n\n\nPhase 4: Expert Level (Ongoing)\nbash\n\u25a1 Custom search implementation\n\u25a1 Virtual scrolling for large sets\n\u25a1 Advanced caching strategies\n\u25a1 Performance analytics dashboard\n\u25a1 Automated optimization scripts\n\n\nSuccess Metrics Targets\n\nPerformance Goals\njavascript\nconst performanceTargets = {\n    // Loading Performance\n    initialLoad: '<2 seconds',\n    noteSwitch: '<100ms',\n    searchResponse: '<200ms',\n    \n    // Resource Usage\n    memoryUsage: '<100MB',\n    indexSize: '<5MB',\n    cacheSize: '<25MB',\n    \n    // User Experience\n    scrollFPS: '>50fps',\n    inputLag: '<50ms',\n    animationSmooth: true,\n    \n    // Scalability\n    maxNotes: '1000+',\n    searchAccuracy: '>95%',\n    uptime: '>99%'\n};\n\n\n---\n\n\ud83d\udd27 Quick Performance Checklist\n\nDaily Maintenance (2 minutes)\n- [ ] Check if search is responsive\n- [ ] Close unused tabs\n- [ ] Clear browser cache if sluggish\n\nWeekly Optimization (10 minutes)\n- [ ] Rebuild search index: npm run build\n- [ ] Review and archive old notes\n- [ ] Check memory usage in dev tools\n- [ ] Update recent files limit if needed\n\nMonthly Deep Optimization (30 minutes)\n- [ ] Run performance test suite\n- [ ] Archive completed projects\n- [ ] Optimize large images\n- [ ] Review and consolidate tags\n- [ ] Backup and cleanup cache files\n\nQuarterly Performance Review (60 minutes)\n- [ ] Comprehensive performance audit\n- [ ] Update optimization strategies\n- [ ] Plan content reorganization\n- [ ] Evaluate new performance features\n- [ ] Document performance improvements\n\nRemember: Performance optimization is an ongoing process. Start with the basics and progressively enhance based on your specific usage patterns and needs! \u26a1  // Benchmark your current performance\nconst metrics = {\n  initialLoadTime: '<2 seconds',      // First page load\n  searchResponseTime: '<100ms',       // Search query to results\n  tabSwitchTime: '<50ms',            // Tab switching speed\n  scrollPerformance: '60fps',         // Smooth scrolling\n  memoryUsage: '<100MB',             // Browser memory consumption\n}; // Performance monitoring in console\nconsole.time('search-performance');\n// Perform search\nconsole.timeEnd('search-performance');\n\n// Memory usage check\nconsole.log('Memory usage:', performance.memory);\n\n// Monitor long tasks\nnew PerformanceObserver((list) => {\n  for (const entry of list.getEntries()) {\n    console.log('Long task:', entry.duration);\n  }\n}).observe({entryTypes: ['longtask']}); // Enable debug mode for performance insights\nlocalStorage.setItem('wiki-debug', 'true');\nlocalStorage.setItem('wiki-performance', 'true');\n// Reload page to see performance logs # Performance guidelines by collection size\nSmall (1-100 notes):     No optimization needed\nMedium (100-500 notes):  Basic optimization recommended\nLarge (500-1000 notes):  Moderate optimization required\nHuge (1000+ notes):      Aggressive optimization essential # Optimized structure for large collections\nnotes/\n\u251c\u2500\u2500 active/           # Current working notes (< 50 notes)\n\u251c\u2500\u2500 reference/        # Frequently accessed (< 100 notes)\n\u251c\u2500\u2500 archive/          # Older content (organized by year/quarter)\n\u2514\u2500\u2500 projects/         # Project-specific notes (organized by status) # Check current index size\nls -lh notes-index.json\n# Target: < 5MB for optimal performance\n\n# Analyze index contents\npython3 -c \"\nimport json\nwith open('notes-index.json') as f:\n    data = json.load(f)\n    print(f'Total entries: {len(data)}')\n    total_size = sum(len(str(item)) for item in data)\n    print(f'Total content size: {total_size:,} characters')\n    avg_size = total_size / len(data)\n    print(f'Average note size: {avg_size:.0f} characters')\n\" # build-optimized.py - Custom optimized build script\nimport json\nimport os\nfrom pathlib import Path\n\ndef build_optimized_index():\n    notes = []\n    notes_dir = Path(\"notes\")\n    \n    for md_file in notes_dir.rglob(\"*.md\"):\n        # Skip archived or draft content\n        if 'archive' in str(md_file) or 'draft' in str(md_file):\n            continue\n            \n        with open(md_file, 'r', encoding='utf-8') as f:\n            content = f.read()\n            \n            # Extract frontmatter and content\n            if content.startswith('---'):\n                parts = content.split('---', 2)\n                if len(parts) >= 3:\n                    frontmatter = parts[1]\n                    body = parts[2]\n                    \n                    # Optimize content size\n                    # Keep only first 1000 characters for search\n                    optimized_content = body[:1000]\n                    \n                    # Build minimal index entry\n                    entry = {\n                        'id': str(md_file.relative_to(notes_dir).with_suffix('')),\n                        'title': extract_title(frontmatter),\n                        'content': optimized_content.strip(),\n                        'tags': extract_tags(frontmatter),\n                        'path': str(md_file)\n                    }\n                    notes.append(entry)\n    \n    # Write compressed index\n    with open('notes-index.json', 'w', encoding='utf-8') as f:\n        json.dump(notes, f, separators=(',', ':'), ensure_ascii=False)\n    \n    print(f\"Optimized index built with {len(notes)} entries\")\n\nif __name__ == \"__main__\":\n    build_optimized_index() # incremental-build.py - Only rebuild changed files\nimport os\nimport json\nimport hashlib\nfrom pathlib import Path\n\ndef get_file_hash(filepath):\n    with open(filepath, 'rb') as f:\n        return hashlib.md5(f.read()).hexdigest()\n\ndef incremental_build():\n    # Load existing index and hashes\n    try:\n        with open('notes-index.json') as f:\n            existing_index = json.load(f)\n        with open('.index-hashes.json') as f:\n            existing_hashes = json.load(f)\n    except FileNotFoundError:\n        existing_index = []\n        existing_hashes = {}\n    \n    notes_dir = Path(\"notes\")\n    updated_notes = []\n    current_hashes = {}\n    \n    # Check each markdown file\n    for md_file in notes_dir.rglob(\"*.md\"):\n        file_path = str(md_file)\n        current_hash = get_file_hash(md_file)\n        current_hashes[file_path] = current_hash\n        \n        # If file changed or is new\n        if existing_hashes.get(file_path) != current_hash:\n            # Process the changed file\n            entry = process_note_file(md_file)\n            updated_notes.append(entry)\n            print(f\"Updated: {file_path}\")\n    \n    # Merge with existing index\n    # ... (merge logic here)\n    \n    # Save updated index and hashes\n    with open('notes-index.json', 'w') as f:\n        json.dump(final_index, f)\n    with open('.index-hashes.json', 'w') as f:\n        json.dump(current_hashes, f) <!-- Before: Verbose and repetitive -->\n# Meeting Notes from the Weekly Team Meeting on January 19, 2025\n\nToday we had our weekly team meeting. In this meeting, we discussed several important topics including project updates, budget considerations, and timeline adjustments for the current quarter.\n\n## Project Updates\nDuring the meeting, John provided updates on Project Alpha. He mentioned that the project is progressing well and is currently on track to meet the deadline...\n\n<!-- After: Concise and structured -->\n# Team Meeting - 2025-01-19\n\n## Key Updates\n- **Project Alpha** (John): On track, Q1 delivery confirmed\n- **Budget Review** (Sarah): 15% under budget, reallocate to tools\n- **Timeline** (Mike): Sprint 3 extended by 1 week\n\n## Decisions\n1. Approved additional tool licenses\n2. Extended current sprint deadline\n3. Next review scheduled for 2025-01-26\n\n## Action Items\n- [ ] John: Complete Alpha testing by Jan 25\n- [ ] Sarah: Submit budget reallocation request\n- [ ] Mike: Update project timeline in tracker # Compress large images\nfind notes/ -name \"*.jpg\" -size +500k -exec echo \"Large image: {}\" \\;\nfind notes/ -name \"*.png\" -size +500k -exec echo \"Large image: {}\" \\;\n\n# Use image optimization tools\n# ImageOptim, TinyPNG, or CLI tools like:\nmogrify -resize 800x600 -quality 85 notes/**/*.jpg # Move old content to archive\nfind notes/ -name \"*.md\" -mtime +365 -path \"*/archive/*\" -prune -o -print | \nwhile read file; do\n    year=$(date -r \"$file\" +%Y)\n    mkdir -p \"notes/archive/$year\"\n    mv \"$file\" \"notes/archive/$year/\"\ndone\n\n# Update index after archiving\npython3 build.py // Optimized settings for performance\nconst performanceSettings = {\n    // Reduce memory usage\n    recentFilesLimit: 10,         // Default: 20\n    searchHistoryLimit: 25,       // Default: 50\n    maxTabsOpen: 5,              // Default: 10\n    \n    // Optimize rendering\n    enableVirtualScrolling: true,\n    lazyLoadImages: true,\n    debounceSearch: 300,         // ms delay for search\n    \n    // Reduce visual effects\n    animationSpeed: 'fast',       // or 'none' for maximum speed\n    transitionsEnabled: false,    // Disable for performance\n    \n    // Memory cleanup\n    autoCleanupInterval: 300000,  // 5 minutes\n    maxCacheSize: 50,            // Number of cached notes\n};\n\n// Apply settings\nlocalStorage.setItem('wiki-settings', JSON.stringify(performanceSettings)); // Manual memory cleanup function\nfunction performanceCleanup() {\n    // Clear unused cached data\n    const cache = JSON.parse(localStorage.getItem('wiki-cache') || '{}');\n    const now = Date.now();\n    const maxAge = 30 * 60 * 1000; // 30 minutes\n    \n    Object.keys(cache).forEach(key => {\n        if (cache[key].timestamp < now - maxAge) {\n            delete cache[key];\n        }\n    });\n    \n    localStorage.setItem('wiki-cache', JSON.stringify(cache));\n    \n    // Force garbage collection (if available)\n    if (window.gc) {\n        window.gc();\n    }\n    \n    console.log('Performance cleanup completed');\n}\n\n// Run cleanup every 10 minutes\nsetInterval(performanceCleanup, 600000); // Fastest-loading themes (minimal CSS)\nconst fastThemes = [\n    'light',           // Minimal styling\n    'dark',            // Basic dark theme\n    'zenburn',         // Simple, low contrast\n    'vim',             // Lightweight terminal style\n];\n\n// Avoid heavy themes for large collections\nconst heavyThemes = [\n    'cyberpunk',       // Complex animations\n    'vaporwave',       // Gradient-heavy\n    'holographic',     // Effects-intensive\n    'digital-rain',    // Animation-heavy\n]; /* Custom CSS for performance */\n/* Add to Settings \u2192 Appearance \u2192 Custom CSS */\n\n/* Disable animations for performance */\n*, *::before, *::after {\n    animation-duration: 0s !important;\n    animation-delay: 0s !important;\n    transition-duration: 0s !important;\n    transition-delay: 0s !important;\n}\n\n/* Optimize font rendering */\nbody {\n    font-display: swap;\n    text-rendering: optimizeSpeed;\n}\n\n/* Reduce visual complexity */\n.content-area {\n    box-shadow: none;\n    border-radius: 0;\n}\n\n/* Optimize scrolling */\n.note-content {\n    contain: layout style paint;\n    will-change: scroll-position;\n} // Optimize search for large collections\nconst searchConfig = {\n    // Debounce settings\n    searchDelay: 200,              // Wait 200ms before searching\n    minQueryLength: 2,             // Don't search single characters\n    \n    // Result optimization\n    maxResults: 20,                // Limit initial results\n    resultsPagination: true,       // Enable pagination\n    \n    // Indexing optimization\n    indexChunkSize: 100,          // Process index in chunks\n    searchWorker: true,           // Use web worker for search\n    \n    // Cache settings\n    cacheSearchResults: true,     // Cache recent searches\n    maxCacheEntries: 50,         // Limit cache size\n}; // Optimized search with web worker\nclass OptimizedSearch {\n    constructor() {\n        this.searchWorker = new Worker('search-worker.js');\n        this.resultCache = new Map();\n        this.maxCacheSize = 50;\n    }\n    \n    async search(query) {\n        // Check cache first\n        if (this.resultCache.has(query)) {\n            return this.resultCache.get(query);\n        }\n        \n        // Use web worker for search\n        const results = await new Promise((resolve) => {\n            this.searchWorker.postMessage({ query, index: this.searchIndex });\n            this.searchWorker.onmessage = (e) => resolve(e.data);\n        });\n        \n        // Cache results\n        if (this.resultCache.size >= this.maxCacheSize) {\n            const firstKey = this.resultCache.keys().next().value;\n            this.resultCache.delete(firstKey);\n        }\n        this.resultCache.set(query, results);\n        \n        return results;\n    }\n} // Efficient search patterns\nconst searchTips = {\n    // Fast searches\n    tagSearch: 'tag:javascript',           // Pre-indexed field\n    authorSearch: 'author:admin',          // Pre-indexed field\n    exactPhrase: '\"specific phrase\"',      // Single exact match\n    \n    // Slower searches (use sparingly)\n    wildcardSearch: 'java*',              // Pattern matching\n    fuzzySearch: 'javascrpt~',            // Fuzzy matching\n    complexQuery: 'tag:js AND author:admin AND \"tutorial\"',\n    \n    // Optimization strategies\n    useFilters: 'Use tag: and author: filters before free text',\n    beSpecific: 'Specific terms faster than general ones',\n    useExact: 'Use \"quotes\" for exact phrases',\n    limitScope: 'Search within specific folders when possible'\n}; // Implement progressive note loading\nclass LazyNoteLoader {\n    constructor() {\n        this.observer = new IntersectionObserver(\n            this.handleIntersection.bind(this),\n            { threshold: 0.1 }\n        );\n        this.loadedNotes = new Set();\n    }\n    \n    handleIntersection(entries) {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                this.loadNote(entry.target.dataset.noteId);\n            }\n        });\n    }\n    \n    async loadNote(noteId) {\n        if (this.loadedNotes.has(noteId)) return;\n        \n        // Load note content asynchronously\n        const content = await this.fetchNoteContent(noteId);\n        this.renderNote(noteId, content);\n        this.loadedNotes.add(noteId);\n    }\n} // Virtual scrolling for large result sets\nclass VirtualScrollResults {\n    constructor(container, itemHeight = 60) {\n        this.container = container;\n        this.itemHeight = itemHeight;\n        this.visibleItems = Math.ceil(container.clientHeight / itemHeight) + 2;\n        this.scrollTop = 0;\n        this.data = [];\n        \n        this.setupScrollListener();\n    }\n    \n    setData(data) {\n        this.data = data;\n        this.render();\n    }\n    \n    render() {\n        const startIndex = Math.floor(this.scrollTop / this.itemHeight);\n        const endIndex = Math.min(startIndex + this.visibleItems, this.data.length);\n        \n        // Only render visible items\n        const visibleData = this.data.slice(startIndex, endIndex);\n        this.renderItems(visibleData, startIndex);\n    }\n    \n    setupScrollListener() {\n        this.container.addEventListener('scroll', () => {\n            this.scrollTop = this.container.scrollTop;\n            this.render();\n        });\n    }\n} # create-optimized-index.py\nimport json\nfrom collections import defaultdict\n\ndef create_multi_index(notes):\n    \"\"\"Create multiple optimized indexes for fast lookup\"\"\"\n    \n    # Main content index\n    content_index = []\n    \n    # Specialized indexes\n    tag_index = defaultdict(list)\n    author_index = defaultdict(list)\n    date_index = defaultdict(list)\n    title_index = {}\n    \n    for i, note in enumerate(notes):\n        # Content index (existing)\n        content_index.append(note)\n        \n        # Tag index\n        for tag in note.get('tags', []):\n            tag_index[tag].append(i)\n        \n        # Author index\n        if note.get('author'):\n            author_index[note['author']].append(i)\n        \n        # Date index\n        if note.get('created'):\n            date_key = note['created'][:7]  # YYYY-MM\n            date_index[date_key].append(i)\n        \n        # Title index for exact matches\n        if note.get('title'):\n            title_index[note['title'].lower()] = i\n    \n    return {\n        'content': content_index,\n        'tags': dict(tag_index),\n        'authors': dict(author_index),\n        'dates': dict(date_index),\n        'titles': title_index\n    }\n\ndef save_optimized_indexes(indexes):\n    \"\"\"Save indexes as separate files for faster loading\"\"\"\n    \n    # Main index (always loaded)\n    with open('notes-index.json', 'w') as f:\n        json.dump(indexes['content'], f, separators=(',', ':'))\n    \n    # Specialized indexes (loaded on demand)\n    for index_name, index_data in indexes.items():\n        if index_name != 'content':\n            with open(f'index-{index_name}.json', 'w') as f:\n                json.dump(index_data, f, separators=(',', ':')) // Performance monitoring system\nclass PerformanceMonitor {\n    constructor() {\n        this.metrics = {\n            searchTimes: [],\n            loadTimes: [],\n            memoryUsage: [],\n            renderTimes: []\n        };\n        this.startTime = performance.now();\n    }\n    \n    recordSearchTime(duration) {\n        this.metrics.searchTimes.push(duration);\n        this.logSlowOperation('search', duration, 100);\n    }\n    \n    recordLoadTime(duration) {\n        this.metrics.loadTimes.push(duration);\n        this.logSlowOperation('load', duration, 500);\n    }\n    \n    logSlowOperation(operation, duration, threshold) {\n        if (duration > threshold) {\n            console.warn(`Slow ${operation}: ${duration}ms (threshold: ${threshold}ms)`);\n            this.suggestOptimizations(operation, duration);\n        }\n    }\n    \n    suggestOptimizations(operation, duration) {\n        const suggestions = {\n            search: [\n                'Consider using tag: or author: filters',\n                'Use more specific search terms',\n                'Check if search index needs rebuilding'\n            ],\n            load: [\n                'Reduce note collection size',\n                'Archive old notes',\n                'Optimize images and media'\n            ]\n        };\n        \n        console.log(`Optimization suggestions for ${operation}:`, suggestions[operation]);\n    }\n    \n    generateReport() {\n        const report = {\n            averageSearchTime: this.average(this.metrics.searchTimes),\n            averageLoadTime: this.average(this.metrics.loadTimes),\n            peakMemoryUsage: Math.max(...this.metrics.memoryUsage),\n            slowOperations: this.metrics.searchTimes.filter(t => t > 200).length\n        };\n        \n        console.table(report);\n        return report;\n    }\n    \n    average(arr) {\n        return arr.length ? arr.reduce((a, b) => a + b) / arr.length : 0;\n    }\n}\n\n// Initialize monitoring\nconst perfMonitor = new PerformanceMonitor(); /* Optimize touch interactions */\n.touch-optimized {\n    touch-action: manipulation;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n}\n\n/* Optimize scrolling on mobile */\n.scroll-container {\n    -webkit-overflow-scrolling: touch;\n    scroll-behavior: smooth;\n}\n\n/* Reduce mobile rendering load */\n@media (max-width: 768px) {\n    .complex-animations {\n        animation: none !important;\n    }\n    \n    .heavy-shadows {\n        box-shadow: none !important;\n    }\n} // Detect mobile and adjust performance settings\nconst isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\nif (isMobile) {\n    // Reduce features for mobile performance\n    const mobileSettings = {\n        animationsEnabled: false,\n        maxTabsOpen: 3,\n        searchResultsLimit: 10,\n        imageLoadingStrategy: 'lazy',\n        cacheSize: 25\n    };\n    \n    // Apply mobile optimizations\n    applyMobileOptimizations(mobileSettings);\n} // Comprehensive performance test\nclass PerformanceTestSuite {\n    async runAllTests() {\n        const results = {};\n        \n        // Test search performance\n        results.search = await this.testSearchPerformance();\n        \n        // Test memory usage\n        results.memory = await this.testMemoryUsage();\n        \n        // Test load times\n        results.loading = await this.testLoadTimes();\n        \n        // Test rendering performance\n        results.rendering = await this.testRenderingPerformance();\n        \n        return this.generateReport(results);\n    }\n    \n    async testSearchPerformance() {\n        const queries = ['javascript', 'tag:tutorial', '\"exact phrase\"', 'author:admin'];\n        const times = [];\n        \n        for (const query of queries) {\n            const start = performance.now();\n            await this.performSearch(query);\n            const duration = performance.now() - start;\n            times.push({ query, duration });\n        }\n        \n        return {\n            averageTime: times.reduce((sum, t) => sum + t.duration, 0) / times.length,\n            slowestQuery: times.reduce((max, t) => t.duration > max.duration ? t : max),\n            allTimes: times\n        };\n    }\n    \n    async testMemoryUsage() {\n        const initialMemory = performance.memory?.usedJSHeapSize || 0;\n        \n        // Perform memory-intensive operations\n        await this.loadLargeNotesSet();\n        await this.performMultipleSearches();\n        \n        const finalMemory = performance.memory?.usedJSHeapSize || 0;\n        \n        return {\n            initialMemory,\n            finalMemory,\n            memoryIncrease: finalMemory - initialMemory,\n            memoryEfficiency: finalMemory < initialMemory * 1.5 ? 'Good' : 'Needs optimization'\n        };\n    }\n} #!/bin/bash\n# performance-monitor.sh\n\necho \"Notes Wiki Performance Monitor\"\necho \"=============================\"\n\n# Check file sizes\necho \"Index file size:\"\nls -lh notes-index.json\n\necho -e \"\\nNote collection size:\"\nfind notes/ -name \"*.md\" | wc -l\n\necho -e \"\\nTotal notes directory size:\"\ndu -sh notes/\n\n# Check for large files\necho -e \"\\nLarge files (>1MB):\"\nfind notes/ -size +1M -type f\n\n# Memory usage simulation\necho -e \"\\nBrowser performance test:\"\nnode -e \"\nconst fs = require('fs');\nconst start = process.memoryUsage();\nconst index = JSON.parse(fs.readFileSync('notes-index.json'));\nconst end = process.memoryUsage();\nconsole.log('Index entries:', index.length);\nconsole.log('Memory used:', Math.round((end.heapUsed - start.heapUsed) / 1024 / 1024), 'MB');\n\" \u2705 Rebuild search index\n\u2705 Clear browser cache\n\u2705 Update to performance-optimized theme\n\u2705 Reduce tab limit to 5\n\u2705 Enable focus mode for reading \u25a1 Archive notes older than 1 year\n\u25a1 Compress large images\n\u25a1 Remove duplicate content\n\u25a1 Optimize note titles for search\n\u25a1 Implement consistent tagging \u25a1 Implement custom build script\n\u25a1 Set up incremental indexing\n\u25a1 Configure performance monitoring\n\u25a1 Optimize CSS for speed\n\u25a1 Implement lazy loading \u25a1 Custom search implementation\n\u25a1 Virtual scrolling for large sets\n\u25a1 Advanced caching strategies\n\u25a1 Performance analytics dashboard\n\u25a1 Automated optimization scripts const performanceTargets = {\n    // Loading Performance\n    initialLoad: '<2 seconds',\n    noteSwitch: '<100ms',\n    searchResponse: '<200ms',\n    \n    // Resource Usage\n    memoryUsage: '<100MB',\n    indexSize: '<5MB',\n    cacheSize: '<25MB',\n    \n    // User Experience\n    scrollFPS: '>50fps',\n    inputLag: '<50ms',\n    animationSmooth: true,\n    \n    // Scalability\n    maxNotes: '1000+',\n    searchAccuracy: '>95%',\n    uptime: '>99%'\n};",
      "code_blocks_count": 31
    },
    {
      "path": "/notes/tutorials/getting-started/best-practices.md",
      "context": "tutorials",
      "metadata": {
        "title": "Best Practices Guide",
        "tags": [
          "best-practices",
          "organization",
          "workflow",
          "productivity",
          "note-taking"
        ],
        "created": "2025-01-19",
        "author": "Wiki Team",
        "description": "Comprehensive guide to effective note-taking, organization, and productivity with Notes Wiki",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Master the art of effective knowledge management with Notes Wiki. This guide covers proven strategies for organizing your notes, optimizing your workflow, and building a sustainable personal knowledge...",
      "searchable_content": "\nBest Practices Guide\n\nMaster the art of effective knowledge management with Notes Wiki. This guide covers proven strategies for organizing your notes, optimizing your workflow, and building a sustainable personal knowledge system.\n\n\ud83c\udfaf Core Principles\n\n1. Start Simple, Evolve Gradually\n- Begin with basics - Don't over-organize initially\n- Develop patterns - Let natural categories emerge\n- Iterate and improve - Refine your system over time\n- Stay flexible - Adapt to changing needs\n\n2. Consistency is Key\n- Naming conventions - Use predictable file and tag patterns\n- Frontmatter structure - Standardize metadata fields\n- Writing style - Develop your personal voice\n- Regular maintenance - Schedule periodic reviews\n\n3. Make it Searchable\n- Descriptive titles - Clear, specific note names\n- Rich metadata - Use tags, authors, and descriptions\n- Cross-linking - Connect related concepts\n- Full-text content - Write naturally for search\n\n\ud83d\udcdd Note-Taking Strategies\n\nEffective Note Structure\n\nThe PARA Method\nOrganize notes into four categories:\n- Projects - Things with deadlines and outcomes\n- Areas - Ongoing responsibilities to maintain\n- Resources - Future reference materials\n- Archive - Inactive items from the above\n\n\nnotes/\n\u251c\u2500\u2500 projects/\n\u2502   \u251c\u2500\u2500 website-redesign/\n\u2502   \u2514\u2500\u2500 quarterly-report/\n\u251c\u2500\u2500 areas/\n\u2502   \u251c\u2500\u2500 health-fitness/\n\u2502   \u2514\u2500\u2500 professional-development/\n\u251c\u2500\u2500 resources/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 reference-materials/\n\u2514\u2500\u2500 archive/\n    \u2514\u2500\u2500 completed-projects/\n\n\nThe Zettelkasten Method\nCreate atomic, interconnected notes:\n- One idea per note - Keep notes focused\n- Unique identifiers - Use consistent naming\n- Link everything - Build a network of knowledge\n- Regular review - Revisit and connect ideas\n\nmarkdown\n---\ntitle: \"202501191045 - Compound Interest Concept\"\ntags: [finance, mathematics, zettelkasten]\ncreated: 2025-01-19\nlinks: [202501191030-time-value-money, 202501191050-investment-strategies]\n---\n\nCompound Interest Concept\n\nCompound interest is interest calculated on both the principal amount and previously earned interest.\n\nKey Formula\nA = P(1 + r/n)^(nt)\n\nRelated Concepts\n- [[202501191030-time-value-money]] - Foundational principle\n- [[202501191050-investment-strategies]] - Practical applications\n\n\nContent Guidelines\n\nWrite for Your Future Self\nmarkdown\n<!-- Good: Context-rich -->\nDocker Container Debugging - Project Alpha Issue\n\nContext: Production deployment failing on Project Alpha\nDate: 2025-01-19\nEnvironment: AWS ECS, Docker 20.10\n\nProblem\nContainer exits with code 137 during peak traffic...\n\n<!-- Bad: Too minimal -->\nDocker Issue\nContainer broken, need to fix.\n\n\nUse Progressive Disclosure\nmarkdown\nMachine Learning Model Training\n\nQuick Summary\nLinear regression model for sales prediction. \nAccuracy: 87%. Ready for production.\n\nDetailed Process\nData Preparation\n[Detailed steps...]\n\nModel Selection\n[Comprehensive analysis...]\n\nResults and Validation\n[Full metrics and evaluation...]\n\n\n\ud83c\udfd7\ufe0f Organization Strategies\n\nFolder Structure Best Practices\n\nBy Context/Domain\n\nnotes/\n\u251c\u2500\u2500 work/\n\u2502   \u251c\u2500\u2500 meetings/\n\u2502   \u251c\u2500\u2500 projects/\n\u2502   \u2514\u2500\u2500 training/\n\u251c\u2500\u2500 personal/\n\u2502   \u251c\u2500\u2500 journal/\n\u2502   \u251c\u2500\u2500 goals/\n\u2502   \u2514\u2500\u2500 hobbies/\n\u251c\u2500\u2500 learning/\n\u2502   \u251c\u2500\u2500 courses/\n\u2502   \u251c\u2500\u2500 books/\n\u2502   \u2514\u2500\u2500 tutorials/\n\u2514\u2500\u2500 reference/\n    \u251c\u2500\u2500 cheat-sheets/\n    \u251c\u2500\u2500 templates/\n    \u2514\u2500\u2500 quick-lookup/\n\n\nBy Project/Timeline\n\nnotes/\n\u251c\u2500\u2500 2025/\n\u2502   \u251c\u2500\u2500 Q1-goals/\n\u2502   \u251c\u2500\u2500 january/\n\u2502   \u2514\u2500\u2500 weekly-reviews/\n\u251c\u2500\u2500 ongoing-projects/\n\u2502   \u251c\u2500\u2500 website-rebuild/\n\u2502   \u2514\u2500\u2500 skill-development/\n\u2514\u2500\u2500 evergreen/\n    \u251c\u2500\u2500 principles/\n    \u251c\u2500\u2500 workflows/\n    \u2514\u2500\u2500 reference/\n\n\nHybrid Approach (Recommended)\n\nnotes/\n\u251c\u2500\u2500 daily/              # Daily notes and journals\n\u251c\u2500\u2500 projects/           # Active projects with deadlines\n\u251c\u2500\u2500 areas/              # Ongoing areas of responsibility\n\u251c\u2500\u2500 resources/          # Reference materials and templates\n\u251c\u2500\u2500 archive/            # Completed or inactive content\n\u2514\u2500\u2500 inbox/              # Temporary holding for unprocessed notes\n\n\nTagging Strategy\n\nHierarchical Tags\nyaml\ntags: [programming, programming/python, programming/python/django]\n\n\nMulti-Dimensional Tagging\nyaml\nCombine different tag types\ntags: [\n  # Content type\n  tutorial, reference, meeting-notes,\n  # Topic\n  javascript, react, frontend,\n  # Status\n  draft, complete, needs-review,\n  # Project\n  project-alpha, client-beta,\n  # Priority\n  urgent, important, someday\n]\n\n\nTag Conventions\nyaml\nStatus tags\nstatus/draft\nstatus/review\nstatus/complete\nstatus/archived\n\nContent types\ntype/tutorial\ntype/reference\ntype/meeting\ntype/idea\n\nAreas of focus\narea/work\narea/personal\narea/learning\n\nTime-based\nyear/2025\nquarter/q1\nsprint/sprint-10\n\n\n\ud83d\udccb Workflow Optimization\n\nDaily Note-Taking Routine\n\nMorning Setup (5 minutes)\nmarkdown\nDaily Note - 2025-01-19\n\nToday's Focus\n- [ ] Complete project proposal\n- [ ] Review team feedback\n- [ ] Update documentation\n\nQuick Captures\n<!-- Use this section throughout the day -->\n\nEnd of Day Review\n<!-- Fill this out before closing -->\n\n\nCapture Everything\n- Inbox approach - One place for all quick captures\n- Process regularly - Daily or weekly inbox reviews\n- Move to permanent locations - Organize processed items\n- Delete ruthlessly - Remove outdated or irrelevant notes\n\nWeekly Review Process\nmarkdown\nWeekly Review - Week of 2025-01-13\n\nAccomplishments\n- [x] Completed project milestone\n- [x] Published blog post\n- [x] Updated documentation\n\nLessons Learned\n- Team communication improved with daily standups\n- Automation saved 3 hours this week\n\nNext Week's Priorities\n- [ ] Start new project phase\n- [ ] Prepare presentation\n- [ ] Schedule team retrospective\n\nNotes to Review\n- [[project-feedback-notes]]\n- [[new-technology-research]]\n\n\nInformation Processing\n\nThe Cornell Note-Taking System\nmarkdown\n---\ntitle: \"Team Meeting - Product Planning\"\ntags: [meeting, product, planning]\ncreated: 2025-01-19\n---\n\nTeam Meeting - Product Planning\n\nMain Notes                    | Cues & Questions\n-------------------------------|------------------\n- New feature roadmap          | What's the priority?\n- User feedback integration    | How to implement?\n- Resource allocation          | Who's responsible?\n- Timeline: Q1 delivery        | Realistic deadline?\n\nSummary\nKey decisions: Feature X prioritized, Sarah leads implementation, \ndeadline set for March 15. Need user research by Feb 1.\n\nAction Items\n- [ ] Sarah: Create technical spec (Due: Jan 25)\n- [ ] Mike: Conduct user interviews (Due: Feb 1)\n- [ ] Team: Review and feedback (Due: Feb 5)\n\n\nThe Feynman Technique for Learning\nmarkdown\n---\ntitle: \"Understanding Blockchain - Feynman Method\"\ntags: [learning, blockchain, technology]\ncreated: 2025-01-19\n---\n\nUnderstanding Blockchain\n\nSimple Explanation (As if teaching a child)\nA blockchain is like a digital notebook that many people share. \nWhen someone writes in it, everyone else can see what they wrote, \nand no one can erase or change what's already written.\n\nTechnical Details\n[Detailed technical explanations...]\n\nAnalogies and Examples\n- Like a public ledger that everyone can read but no one can alter\n- Similar to a chain where each link contains information\n\nQuestions I Still Have\n- How does consensus work in practice?\n- What are the energy implications?\n\nRelated Concepts to Explore\n- [[cryptocurrency-basics]]\n- [[distributed-systems]]\n\n\n\ud83d\udd0d Search and Discovery\n\nMaking Notes Findable\n\nDescriptive Titles\nmarkdown\n<!-- Good -->\ntitle: \"Docker Multi-Stage Build Optimization for Node.js Apps\"\ntitle: \"Weekly Team Retrospective - Sprint 15 - Key Insights\"\ntitle: \"Python Data Visualization - Matplotlib vs Seaborn Comparison\"\n\n<!-- Less effective -->\ntitle: \"Docker Notes\"\ntitle: \"Meeting Notes\"\ntitle: \"Python Stuff\"\n\n\nRich Descriptions\nyaml\ndescription: \"Step-by-step guide to optimizing Docker builds for Node.js applications using multi-stage builds, including before/after performance metrics and common pitfalls to avoid\"\n\n\nStrategic Keyword Usage\nmarkdown\nReact Performance Optimization Techniques\n\nKeywords for search: React, performance, optimization, rendering, \nhooks, memoization, virtual DOM, bundle size, code splitting\n\nComponent Memoization\nUsing React.memo(), useMemo(), and useCallback() to prevent \nunnecessary re-renders and improve application performance...\n\n\nCross-Linking Strategies\n\nCreate Note Clusters\nmarkdown\nJavaScript Fundamentals Hub\n\nThis note serves as a central hub for JavaScript learning materials.\n\nCore Concepts\n- [[variables-and-data-types]]\n- [[functions-and-scope]]\n- [[objects-and-arrays]]\n- [[promises-and-async-await]]\n\nAdvanced Topics\n- [[closures-and-lexical-scope]]\n- [[prototype-inheritance]]\n- [[event-loop-and-concurrency]]\n\nPractical Applications\n- [[dom-manipulation-techniques]]\n- [[api-integration-patterns]]\n- [[error-handling-strategies]]\n\n\nBuild Knowledge Maps\nmarkdown\nLearning Path: Full-Stack Development\n\nFrontend Track\n1. [[html-css-fundamentals]] \u2192 \n2. [[javascript-basics]] \u2192 \n3. [[react-introduction]] \u2192 \n4. [[state-management]] \u2192 \n5. [[advanced-react-patterns]]\n\nBackend Track\n1. [[node-js-fundamentals]] \u2192 \n2. [[express-framework]] \u2192 \n3. [[database-design]] \u2192 \n4. [[api-development]] \u2192 \n5. [[authentication-security]]\n\nDevOps Integration\n- [[version-control-git]]\n- [[deployment-strategies]]\n- [[monitoring-logging]]\n\n\n\ud83c\udfa8 Customization and Personalization\n\nTheme and Display Optimization\n\nChoose Themes for Purpose\njavascript\n// For long reading sessions\nrecommendedThemes: [\n  'github-light',      // High contrast, easy on eyes\n  'solarized-light',   // Scientifically designed\n  'bear',              // Warm, paper-like\n]\n\n// For coding and technical content\ncodeOptimizedThemes: [\n  'vscode-dark-plus',  // Familiar to developers\n  'monokai',           // Excellent syntax highlighting\n  'nord',              // Clean, minimal\n]\n\n// For focus and minimal distraction\nfocusThemes: [\n  'zenburn',           // Low contrast, gentle\n  'gruvbox-dark',      // Warm, retro feel\n  'material-palenight' // Balanced colors\n]\n\n\nSettings Configuration\njavascript\n// Optimized settings for different use cases\nreadingOptimized: {\n  contentWidth: 'normal',     // Comfortable line length\n  showLineNumbers: false,     // Less visual clutter\n  focusMode: true,           // Minimal interface\n  recentLimit: 10            // Keep sidebar clean\n}\n\nwritingOptimized: {\n  contentWidth: 'wide',      // More space for content\n  showLineNumbers: true,     // For technical writing\n  focusMode: false,          // Access to full interface\n  quickNotesEnabled: true    // For quick captures\n}\n\n\nKeyboard Shortcuts Mastery\n\nEssential Shortcuts to Learn First\n\n1. Ctrl+K (Search) - Most important for navigation\n2. Alt+T (New Tab) - Multi-document workflow\n3. F (Focus Mode) - Distraction-free reading\n4. Ctrl+, (Settings) - Quick customization\n5. ? (Show Shortcuts) - Learn more shortcuts\n\n\nAdvanced Workflow Shortcuts\n\n1. Alt+W (Close Tab) - Clean workspace management\n2. Alt+P (Pin Tab) - Keep important notes accessible\n3. Ctrl+/ (Split View) - Side-by-side comparison\n4. Ctrl+Shift+S (Quick Notes) - Rapid capture\n5. Alt+1-9 (Tab Numbers) - Direct tab access\n\n\n\ud83d\udcc8 Productivity Patterns\n\nTime Management Integration\n\nPomodoro Technique Integration\nmarkdown\nDeep Work Session - Algorithm Study\n\nPomodoro 1 (25 min): Read chapter on binary trees\n- Key insights: [capture here]\n- Questions: [note here]\n\nBreak (5 min): Walk, hydrate\n\nPomodoro 2 (25 min): Practice coding problems\n- Problems solved: [list here]\n- Patterns noticed: [document here]\n\nBreak (5 min): Quick stretch\n\nPomodoro 3 (25 min): Create summary notes\n- Main concepts: [synthesize here]\n- Next actions: [plan here]\n\n\nTime-Blocking with Notes\nmarkdown\nDaily Schedule - 2025-01-19\n\n9:00-10:30 AM: Deep Work Block\nFocus: [[project-alpha-documentation]]\nGoal: Complete API specification\n\n10:30-11:00 AM: Email & Communications\nNotes: [[communication-inbox]]\n\n11:00-12:00 PM: Team Meeting\nAgenda: [[weekly-planning-meeting]]\nPrep: Review [[last-week-action-items]]\n\n2:00-3:30 PM: Learning Block\nTopic: [[react-performance-optimization]]\nMethod: Tutorial + practice project\n\n\nKnowledge Review Cycles\n\nSpaced Repetition for Notes\nmarkdown\nNote Review Schedule\n\nDaily (Every Day)\n- Today's meeting notes\n- Active project documentation\n- Current learning materials\n\nWeekly (Every Sunday)\n- Past week's daily notes\n- Ongoing project status\n- Learning progress review\n\nMonthly (First of Month)\n- Previous month's key insights\n- Project retrospectives\n- Knowledge gap analysis\n\nQuarterly (Every 3 Months)\n- Major themes and patterns\n- System organization review\n- Archive completed projects\n\n\nProgressive Summarization\nmarkdown\nLayer 1: Original Content\n[Full detailed notes from meeting/reading/etc.]\n\nLayer 2: Important Points (Bold)\n[Bold the most important sentences and phrases]\n\nLayer 3: Key Insights (Highlighted)\n[Highlight the most crucial insights]\n\nLayer 4: Executive Summary\n[Create a brief summary of key takeaways]\n\nLayer 5: Personal Commentary\n[Add your own thoughts, connections, and action items]\n\n\n\ud83e\uddf9 Maintenance and Hygiene\n\nRegular Cleanup Routines\n\nWeekly Maintenance (15 minutes)\nbash\n1. Rebuild search index\nnpm run build\n\n2. Review and organize inbox notes\nMove from notes/inbox/ to proper locations\n\n3. Update project status\nMark completed tasks, update progress\n\n4. Clean up desktop downloads\nFile any documents that should become notes\n\n\nMonthly Deep Clean (30 minutes)\nbash\n1. Archive completed projects\nmv notes/projects/completed-project notes/archive/\n\n2. Review and update tag structure\nConsolidate similar tags, remove unused ones\n\n3. Update note templates\nRefine based on what's working\n\n4. Backup critical notes\ncp -r notes/ backup/notes-$(date +%Y%m%d)/\n\n\nQuarterly System Review (60 minutes)\nmarkdown\nQuarterly Review - Q1 2025\n\nWhat's Working Well?\n- Tag system is effective for finding notes\n- Daily note routine is consistent\n- Cross-linking helping with discovery\n\nWhat Needs Improvement?\n- Too many unprocessed inbox items\n- Some project notes are getting stale\n- Need better template for meeting notes\n\nSystem Adjustments\n- [ ] Create weekly inbox processing time\n- [ ] Archive projects older than 6 months\n- [ ] Update meeting note template\n\nGoals for Next Quarter\n- [ ] Improve note processing speed\n- [ ] Build stronger knowledge connections\n- [ ] Reduce note duplication\n\n\nQuality Control\n\nNote Quality Checklist\nmarkdown\nBefore archiving or sharing a note, check:\n\nContent Quality\n- [ ] Title is descriptive and specific\n- [ ] Has proper frontmatter with tags\n- [ ] Content is clear and well-structured\n- [ ] Key points are highlighted or emphasized\n- [ ] Contains actionable information\n\nDiscoverability\n- [ ] Uses relevant tags consistently\n- [ ] Has cross-links to related notes\n- [ ] Includes search-friendly keywords\n- [ ] Has a helpful description field\n\nMaintenance\n- [ ] Date information is accurate\n- [ ] Status reflects current state\n- [ ] No outdated information\n- [ ] Proper grammar and spelling\n\n\n\ud83d\ude80 Advanced Strategies\n\nBuilding a Personal Knowledge Graph\n\nCreate Index Pages\nmarkdown\nKnowledge Areas Index\n\nTechnology\n- [[programming-languages-overview]]\n- [[devops-tools-comparison]]\n- [[architecture-patterns-guide]]\n\nBusiness\n- [[product-management-frameworks]]\n- [[marketing-strategies-collection]]\n- [[leadership-principles-notes]]\n\nPersonal Development\n- [[learning-methodologies]]\n- [[productivity-systems]]\n- [[goal-setting-frameworks]]\n\n\nUse MOCs (Maps of Content)\nmarkdown\nReact Development MOC\n\nLearning Path\n1. Fundamentals \u2192 [[react-basics]]\n2. Components \u2192 [[component-patterns]]\n3. State Management \u2192 [[state-management-options]]\n4. Routing \u2192 [[react-router-guide]]\n5. Testing \u2192 [[react-testing-strategies]]\n\nReference Materials\n- [[react-hooks-cheatsheet]]\n- [[performance-optimization-tips]]\n- [[common-patterns-library]]\n\nProject Applications\n- [[todo-app-react-tutorial]]\n- [[e-commerce-site-case-study]]\n- [[dashboard-component-library]]\n\nCommunity & Resources\n- [[react-community-resources]]\n- [[recommended-react-blogs]]\n- [[useful-react-tools]]\n\n\nAutomation and Efficiency\n\nTemplate System\nmarkdown\n<!-- Daily Note Template -->\n---\ntitle: \"Daily Note - {{date}}\"\ntags: [daily, journal]\ncreated: {{date}}\n---\n\nDaily Note - {{date}}\n\nToday's Priorities\n- [ ] \n- [ ] \n- [ ] \n\nMeetings & Events\n- \n\nQuick Captures\n<!-- Brain dump throughout day -->\n\nReflections\n<!-- End of day review -->\n\nTomorrow's Setup\n- [ ] \n- [ ] \n\n\nAutomated Workflows\nbash\n#!/bin/bash\ndaily-note-setup.sh\n\nDATE=$(date +%Y-%m-%d)\nNOTESDIR=\"notes/daily\"\nTEMPLATE=\"templates/daily-note-template.md\"\n\nCreate today's note from template\nsed \"s/{{date}}/$DATE/g\" $TEMPLATE > \"$NOTESDIR/$DATE-daily.md\"\n\nRebuild search index\npython3 build.py\n\necho \"Daily note created: $NOTESDIR/$DATE-daily.md\"\n\n\n\ud83c\udf89 Success Metrics\n\nTrack Your Progress\n\nQuantitative Metrics\nmarkdown\nMonthly Knowledge Base Stats\n\nContent Growth\n- Total notes: 247 (+15 from last month)\n- New tags created: 8\n- Notes updated: 23\n- Links added: 45\n\nUsage Patterns\n- Search queries: 156\n- Most accessed notes: [list top 5]\n- Most used tags: [list top 10]\n- Average note length: 450 words\n\nQuality Indicators\n- Notes with cross-links: 89%\n- Notes with proper tags: 95%\n- Notes updated in last 30 days: 35%\n\n\nQualitative Assessment\nmarkdown\nQuarterly Knowledge System Review\n\nLearning Velocity\n- How quickly can I find information? \u2b50\u2b50\u2b50\u2b50\u2b50\n- How often do I rediscover forgotten knowledge? \u2b50\u2b50\u2b50\u2b50\n- How well do I make connections between ideas? \u2b50\u2b50\u2b50\u2b50\n\nKnowledge Application\n- How often do I reference my notes for decisions? \u2b50\u2b50\u2b50\u2b50\u2b50\n- How much has my expertise grown? \u2b50\u2b50\u2b50\u2b50\n- How effectively do I share knowledge with others? \u2b50\u2b50\u2b50\n\nSystem Satisfaction\n- How much do I enjoy using the system? \u2b50\u2b50\u2b50\u2b50\u2b50\n- How confident am I in finding information? \u2b50\u2b50\u2b50\u2b50\u2b50\n- How well does it fit my workflow? \u2b50\u2b50\u2b50\u2b50\n\n\n---\n\n\ud83d\udcda Quick Reference\n\nEssential Practices Summary\n1. Start simple - Basic structure, evolve over time\n2. Be consistent - Naming, tagging, formatting\n3. Link everything - Build connections between ideas\n4. Review regularly - Weekly maintenance, quarterly audits\n5. Make it searchable - Descriptive titles, rich content\n6. Optimize for speed - Learn shortcuts, use templates\n7. Keep it current - Regular updates and cleanup\n\nCommon Pitfalls to Avoid\n- \u274c Over-organizing initially\n- \u274c Inconsistent naming conventions\n- \u274c Creating orphaned notes (no links)\n- \u274c Neglecting regular maintenance\n- \u274c Making titles too generic\n- \u274c Ignoring the search index\n- \u274c Creating overly complex structures\n\nRemember: The best knowledge management system is the one you actually use consistently. Start with these basics and adapt them to your unique needs and workflow! \ud83d\ude80  notes/\n\u251c\u2500\u2500 projects/\n\u2502   \u251c\u2500\u2500 website-redesign/\n\u2502   \u2514\u2500\u2500 quarterly-report/\n\u251c\u2500\u2500 areas/\n\u2502   \u251c\u2500\u2500 health-fitness/\n\u2502   \u2514\u2500\u2500 professional-development/\n\u251c\u2500\u2500 resources/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 reference-materials/\n\u2514\u2500\u2500 archive/\n    \u2514\u2500\u2500 completed-projects/ ---\ntitle: \"202501191045 - Compound Interest Concept\"\ntags: [finance, mathematics, zettelkasten]\ncreated: 2025-01-19\nlinks: [202501191030-time-value-money, 202501191050-investment-strategies]\n---\n\n# Compound Interest Concept\n\nCompound interest is interest calculated on both the principal amount and previously earned interest.\n\n## Key Formula\nA = P(1 + r/n)^(nt)\n\n## Related Concepts\n- [[202501191030-time-value-money]] - Foundational principle\n- [[202501191050-investment-strategies]] - Practical applications <!-- Good: Context-rich -->\n# Docker Container Debugging - Project Alpha Issue\n\n**Context**: Production deployment failing on Project Alpha\n**Date**: 2025-01-19\n**Environment**: AWS ECS, Docker 20.10\n\n## Problem\nContainer exits with code 137 during peak traffic...\n\n<!-- Bad: Too minimal -->\n# Docker Issue\nContainer broken, need to fix. # Machine Learning Model Training\n\n## Quick Summary\nLinear regression model for sales prediction. \nAccuracy: 87%. Ready for production.\n\n## Detailed Process\n### Data Preparation\n[Detailed steps...]\n\n### Model Selection\n[Comprehensive analysis...]\n\n### Results and Validation\n[Full metrics and evaluation...] notes/\n\u251c\u2500\u2500 work/\n\u2502   \u251c\u2500\u2500 meetings/\n\u2502   \u251c\u2500\u2500 projects/\n\u2502   \u2514\u2500\u2500 training/\n\u251c\u2500\u2500 personal/\n\u2502   \u251c\u2500\u2500 journal/\n\u2502   \u251c\u2500\u2500 goals/\n\u2502   \u2514\u2500\u2500 hobbies/\n\u251c\u2500\u2500 learning/\n\u2502   \u251c\u2500\u2500 courses/\n\u2502   \u251c\u2500\u2500 books/\n\u2502   \u2514\u2500\u2500 tutorials/\n\u2514\u2500\u2500 reference/\n    \u251c\u2500\u2500 cheat-sheets/\n    \u251c\u2500\u2500 templates/\n    \u2514\u2500\u2500 quick-lookup/ notes/\n\u251c\u2500\u2500 2025/\n\u2502   \u251c\u2500\u2500 Q1-goals/\n\u2502   \u251c\u2500\u2500 january/\n\u2502   \u2514\u2500\u2500 weekly-reviews/\n\u251c\u2500\u2500 ongoing-projects/\n\u2502   \u251c\u2500\u2500 website-rebuild/\n\u2502   \u2514\u2500\u2500 skill-development/\n\u2514\u2500\u2500 evergreen/\n    \u251c\u2500\u2500 principles/\n    \u251c\u2500\u2500 workflows/\n    \u2514\u2500\u2500 reference/ notes/\n\u251c\u2500\u2500 daily/              # Daily notes and journals\n\u251c\u2500\u2500 projects/           # Active projects with deadlines\n\u251c\u2500\u2500 areas/              # Ongoing areas of responsibility\n\u251c\u2500\u2500 resources/          # Reference materials and templates\n\u251c\u2500\u2500 archive/            # Completed or inactive content\n\u2514\u2500\u2500 inbox/              # Temporary holding for unprocessed notes tags: [programming, programming/python, programming/python/django] # Combine different tag types\ntags: [\n  # Content type\n  tutorial, reference, meeting-notes,\n  # Topic\n  javascript, react, frontend,\n  # Status\n  draft, complete, needs-review,\n  # Project\n  project-alpha, client-beta,\n  # Priority\n  urgent, important, someday\n] # Status tags\nstatus/draft\nstatus/review\nstatus/complete\nstatus/archived\n\n# Content types\ntype/tutorial\ntype/reference\ntype/meeting\ntype/idea\n\n# Areas of focus\narea/work\narea/personal\narea/learning\n\n# Time-based\nyear/2025\nquarter/q1\nsprint/sprint-10 # Daily Note - 2025-01-19\n\n## Today's Focus\n- [ ] Complete project proposal\n- [ ] Review team feedback\n- [ ] Update documentation\n\n## Quick Captures\n<!-- Use this section throughout the day -->\n\n## End of Day Review\n<!-- Fill this out before closing --> # Weekly Review - Week of 2025-01-13\n\n## Accomplishments\n- [x] Completed project milestone\n- [x] Published blog post\n- [x] Updated documentation\n\n## Lessons Learned\n- Team communication improved with daily standups\n- Automation saved 3 hours this week\n\n## Next Week's Priorities\n- [ ] Start new project phase\n- [ ] Prepare presentation\n- [ ] Schedule team retrospective\n\n## Notes to Review\n- [[project-feedback-notes]]\n- [[new-technology-research]] ---\ntitle: \"Team Meeting - Product Planning\"\ntags: [meeting, product, planning]\ncreated: 2025-01-19\n---\n\n# Team Meeting - Product Planning\n\n## Main Notes                    | Cues & Questions\n-------------------------------|------------------\n- New feature roadmap          | What's the priority?\n- User feedback integration    | How to implement?\n- Resource allocation          | Who's responsible?\n- Timeline: Q1 delivery        | Realistic deadline?\n\n## Summary\nKey decisions: Feature X prioritized, Sarah leads implementation, \ndeadline set for March 15. Need user research by Feb 1.\n\n## Action Items\n- [ ] Sarah: Create technical spec (Due: Jan 25)\n- [ ] Mike: Conduct user interviews (Due: Feb 1)\n- [ ] Team: Review and feedback (Due: Feb 5) ---\ntitle: \"Understanding Blockchain - Feynman Method\"\ntags: [learning, blockchain, technology]\ncreated: 2025-01-19\n---\n\n# Understanding Blockchain\n\n## Simple Explanation (As if teaching a child)\nA blockchain is like a digital notebook that many people share. \nWhen someone writes in it, everyone else can see what they wrote, \nand no one can erase or change what's already written.\n\n## Technical Details\n[Detailed technical explanations...]\n\n## Analogies and Examples\n- Like a public ledger that everyone can read but no one can alter\n- Similar to a chain where each link contains information\n\n## Questions I Still Have\n- How does consensus work in practice?\n- What are the energy implications?\n\n## Related Concepts to Explore\n- [[cryptocurrency-basics]]\n- [[distributed-systems]] <!-- Good -->\ntitle: \"Docker Multi-Stage Build Optimization for Node.js Apps\"\ntitle: \"Weekly Team Retrospective - Sprint 15 - Key Insights\"\ntitle: \"Python Data Visualization - Matplotlib vs Seaborn Comparison\"\n\n<!-- Less effective -->\ntitle: \"Docker Notes\"\ntitle: \"Meeting Notes\"\ntitle: \"Python Stuff\" description: \"Step-by-step guide to optimizing Docker builds for Node.js applications using multi-stage builds, including before/after performance metrics and common pitfalls to avoid\" # React Performance Optimization Techniques\n\nKeywords for search: React, performance, optimization, rendering, \nhooks, memoization, virtual DOM, bundle size, code splitting\n\n## Component Memoization\nUsing React.memo(), useMemo(), and useCallback() to prevent \nunnecessary re-renders and improve application performance... # JavaScript Fundamentals Hub\n\nThis note serves as a central hub for JavaScript learning materials.\n\n## Core Concepts\n- [[variables-and-data-types]]\n- [[functions-and-scope]]\n- [[objects-and-arrays]]\n- [[promises-and-async-await]]\n\n## Advanced Topics\n- [[closures-and-lexical-scope]]\n- [[prototype-inheritance]]\n- [[event-loop-and-concurrency]]\n\n## Practical Applications\n- [[dom-manipulation-techniques]]\n- [[api-integration-patterns]]\n- [[error-handling-strategies]] # Learning Path: Full-Stack Development\n\n## Frontend Track\n1. [[html-css-fundamentals]] \u2192 \n2. [[javascript-basics]] \u2192 \n3. [[react-introduction]] \u2192 \n4. [[state-management]] \u2192 \n5. [[advanced-react-patterns]]\n\n## Backend Track\n1. [[node-js-fundamentals]] \u2192 \n2. [[express-framework]] \u2192 \n3. [[database-design]] \u2192 \n4. [[api-development]] \u2192 \n5. [[authentication-security]]\n\n## DevOps Integration\n- [[version-control-git]]\n- [[deployment-strategies]]\n- [[monitoring-logging]] // For long reading sessions\nrecommendedThemes: [\n  'github-light',      // High contrast, easy on eyes\n  'solarized-light',   // Scientifically designed\n  'bear',              // Warm, paper-like\n]\n\n// For coding and technical content\ncodeOptimizedThemes: [\n  'vscode-dark-plus',  // Familiar to developers\n  'monokai',           // Excellent syntax highlighting\n  'nord',              // Clean, minimal\n]\n\n// For focus and minimal distraction\nfocusThemes: [\n  'zenburn',           // Low contrast, gentle\n  'gruvbox-dark',      // Warm, retro feel\n  'material-palenight' // Balanced colors\n] // Optimized settings for different use cases\nreadingOptimized: {\n  contentWidth: 'normal',     // Comfortable line length\n  showLineNumbers: false,     // Less visual clutter\n  focusMode: true,           // Minimal interface\n  recentLimit: 10            // Keep sidebar clean\n}\n\nwritingOptimized: {\n  contentWidth: 'wide',      // More space for content\n  showLineNumbers: true,     // For technical writing\n  focusMode: false,          // Access to full interface\n  quickNotesEnabled: true    // For quick captures\n} 1. Ctrl+K (Search) - Most important for navigation\n2. Alt+T (New Tab) - Multi-document workflow\n3. F (Focus Mode) - Distraction-free reading\n4. Ctrl+, (Settings) - Quick customization\n5. ? (Show Shortcuts) - Learn more shortcuts 1. Alt+W (Close Tab) - Clean workspace management\n2. Alt+P (Pin Tab) - Keep important notes accessible\n3. Ctrl+/ (Split View) - Side-by-side comparison\n4. Ctrl+Shift+S (Quick Notes) - Rapid capture\n5. Alt+1-9 (Tab Numbers) - Direct tab access # Deep Work Session - Algorithm Study\n\n**Pomodoro 1** (25 min): Read chapter on binary trees\n- Key insights: [capture here]\n- Questions: [note here]\n\n**Break** (5 min): Walk, hydrate\n\n**Pomodoro 2** (25 min): Practice coding problems\n- Problems solved: [list here]\n- Patterns noticed: [document here]\n\n**Break** (5 min): Quick stretch\n\n**Pomodoro 3** (25 min): Create summary notes\n- Main concepts: [synthesize here]\n- Next actions: [plan here] # Daily Schedule - 2025-01-19\n\n## 9:00-10:30 AM: Deep Work Block\n**Focus**: [[project-alpha-documentation]]\n**Goal**: Complete API specification\n\n## 10:30-11:00 AM: Email & Communications\n**Notes**: [[communication-inbox]]\n\n## 11:00-12:00 PM: Team Meeting\n**Agenda**: [[weekly-planning-meeting]]\n**Prep**: Review [[last-week-action-items]]\n\n## 2:00-3:30 PM: Learning Block\n**Topic**: [[react-performance-optimization]]\n**Method**: Tutorial + practice project # Note Review Schedule\n\n## Daily (Every Day)\n- Today's meeting notes\n- Active project documentation\n- Current learning materials\n\n## Weekly (Every Sunday)\n- Past week's daily notes\n- Ongoing project status\n- Learning progress review\n\n## Monthly (First of Month)\n- Previous month's key insights\n- Project retrospectives\n- Knowledge gap analysis\n\n## Quarterly (Every 3 Months)\n- Major themes and patterns\n- System organization review\n- Archive completed projects # Layer 1: Original Content\n[Full detailed notes from meeting/reading/etc.]\n\n# Layer 2: Important Points (Bold)\n[Bold the most important sentences and phrases]\n\n# Layer 3: Key Insights (Highlighted)\n[Highlight the most crucial insights]\n\n# Layer 4: Executive Summary\n[Create a brief summary of key takeaways]\n\n# Layer 5: Personal Commentary\n[Add your own thoughts, connections, and action items] # 1. Rebuild search index\nnpm run build\n\n# 2. Review and organize inbox notes\n# Move from notes/inbox/ to proper locations\n\n# 3. Update project status\n# Mark completed tasks, update progress\n\n# 4. Clean up desktop downloads\n# File any documents that should become notes # 1. Archive completed projects\nmv notes/projects/completed-project notes/archive/\n\n# 2. Review and update tag structure\n# Consolidate similar tags, remove unused ones\n\n# 3. Update note templates\n# Refine based on what's working\n\n# 4. Backup critical notes\ncp -r notes/ backup/notes-$(date +%Y%m%d)/ # Quarterly Review - Q1 2025\n\n## What's Working Well?\n- Tag system is effective for finding notes\n- Daily note routine is consistent\n- Cross-linking helping with discovery\n\n## What Needs Improvement?\n- Too many unprocessed inbox items\n- Some project notes are getting stale\n- Need better template for meeting notes\n\n## System Adjustments\n- [ ] Create weekly inbox processing time\n- [ ] Archive projects older than 6 months\n- [ ] Update meeting note template\n\n## Goals for Next Quarter\n- [ ] Improve note processing speed\n- [ ] Build stronger knowledge connections\n- [ ] Reduce note duplication Before archiving or sharing a note, check:\n\n## Content Quality\n- [ ] Title is descriptive and specific\n- [ ] Has proper frontmatter with tags\n- [ ] Content is clear and well-structured\n- [ ] Key points are highlighted or emphasized\n- [ ] Contains actionable information\n\n## Discoverability\n- [ ] Uses relevant tags consistently\n- [ ] Has cross-links to related notes\n- [ ] Includes search-friendly keywords\n- [ ] Has a helpful description field\n\n## Maintenance\n- [ ] Date information is accurate\n- [ ] Status reflects current state\n- [ ] No outdated information\n- [ ] Proper grammar and spelling # Knowledge Areas Index\n\n## Technology\n- [[programming-languages-overview]]\n- [[devops-tools-comparison]]\n- [[architecture-patterns-guide]]\n\n## Business\n- [[product-management-frameworks]]\n- [[marketing-strategies-collection]]\n- [[leadership-principles-notes]]\n\n## Personal Development\n- [[learning-methodologies]]\n- [[productivity-systems]]\n- [[goal-setting-frameworks]] # React Development MOC\n\n## Learning Path\n1. Fundamentals \u2192 [[react-basics]]\n2. Components \u2192 [[component-patterns]]\n3. State Management \u2192 [[state-management-options]]\n4. Routing \u2192 [[react-router-guide]]\n5. Testing \u2192 [[react-testing-strategies]]\n\n## Reference Materials\n- [[react-hooks-cheatsheet]]\n- [[performance-optimization-tips]]\n- [[common-patterns-library]]\n\n## Project Applications\n- [[todo-app-react-tutorial]]\n- [[e-commerce-site-case-study]]\n- [[dashboard-component-library]]\n\n## Community & Resources\n- [[react-community-resources]]\n- [[recommended-react-blogs]]\n- [[useful-react-tools]] <!-- Daily Note Template -->\n---\ntitle: \"Daily Note - {{date}}\"\ntags: [daily, journal]\ncreated: {{date}}\n---\n\n# Daily Note - {{date}}\n\n## Today's Priorities\n- [ ] \n- [ ] \n- [ ] \n\n## Meetings & Events\n- \n\n## Quick Captures\n<!-- Brain dump throughout day -->\n\n## Reflections\n<!-- End of day review -->\n\n## Tomorrow's Setup\n- [ ] \n- [ ] #!/bin/bash\n# daily-note-setup.sh\n\nDATE=$(date +%Y-%m-%d)\nNOTES_DIR=\"notes/daily\"\nTEMPLATE=\"templates/daily-note-template.md\"\n\n# Create today's note from template\nsed \"s/{{date}}/$DATE/g\" $TEMPLATE > \"$NOTES_DIR/$DATE-daily.md\"\n\n# Rebuild search index\npython3 build.py\n\necho \"Daily note created: $NOTES_DIR/$DATE-daily.md\" # Monthly Knowledge Base Stats\n\n## Content Growth\n- Total notes: 247 (+15 from last month)\n- New tags created: 8\n- Notes updated: 23\n- Links added: 45\n\n## Usage Patterns\n- Search queries: 156\n- Most accessed notes: [list top 5]\n- Most used tags: [list top 10]\n- Average note length: 450 words\n\n## Quality Indicators\n- Notes with cross-links: 89%\n- Notes with proper tags: 95%\n- Notes updated in last 30 days: 35% # Quarterly Knowledge System Review\n\n## Learning Velocity\n- How quickly can I find information? \u2b50\u2b50\u2b50\u2b50\u2b50\n- How often do I rediscover forgotten knowledge? \u2b50\u2b50\u2b50\u2b50\n- How well do I make connections between ideas? \u2b50\u2b50\u2b50\u2b50\n\n## Knowledge Application\n- How often do I reference my notes for decisions? \u2b50\u2b50\u2b50\u2b50\u2b50\n- How much has my expertise grown? \u2b50\u2b50\u2b50\u2b50\n- How effectively do I share knowledge with others? \u2b50\u2b50\u2b50\n\n## System Satisfaction\n- How much do I enjoy using the system? \u2b50\u2b50\u2b50\u2b50\u2b50\n- How confident am I in finding information? \u2b50\u2b50\u2b50\u2b50\u2b50\n- How well does it fit my workflow? \u2b50\u2b50\u2b50\u2b50",
      "code_blocks_count": 37
    },
    {
      "path": "/notes/tutorials/getting-started/installation-setup.md",
      "context": "tutorials",
      "metadata": {
        "title": "Installation and Setup Guide",
        "tags": [
          "installation",
          "setup",
          "deployment",
          "getting-started",
          "github-pages"
        ],
        "created": "2025-01-19",
        "author": "Wiki Team",
        "description": "Complete guide to installing and setting up Notes Wiki across different platforms",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Get Notes Wiki up and running on your preferred platform with this comprehensive setup guide. Choose from multiple deployment options and follow step-by-step instructions for a smooth installation exp...",
      "searchable_content": "\nInstallation and Setup Guide\n\nGet Notes Wiki up and running on your preferred platform with this comprehensive setup guide. Choose from multiple deployment options and follow step-by-step instructions for a smooth installation experience.\n\n\ud83d\ude80 Quick Overview\n\nNotes Wiki can be deployed in several ways:\n- GitHub Pages (recommended for beginners)\n- Local development (for testing and customization)\n- GitLab Pages (alternative to GitHub)\n- Static hosting (Netlify, Vercel, etc.)\n- Self-hosted (your own server)\n\n\ud83d\udccb Prerequisites\n\nSystem Requirements\n- Web browser - Modern browser (Chrome, Firefox, Safari, Edge)\n- Git - For version control and deployment\n- Python 3.x - For building search indexes\n- Node.js (optional) - For development scripts\n\nTechnical Knowledge\n- Basic Git - Cloning repositories, making commits\n- Command line - Running simple terminal commands\n- Markdown - For writing notes (easy to learn!)\n\n\ud83c\udf10 GitHub Pages Deployment (Recommended)\n\nWhy GitHub Pages?\n- \u2705 Free hosting - No cost for public repositories\n- \u2705 Automatic updates - Changes deploy automatically\n- \u2705 Custom domains - Use your own domain name\n- \u2705 SSL included - Secure HTTPS by default\n- \u2705 Easy setup - Minimal configuration required\n\nStep-by-Step Setup\n\n1. Fork the Repository\nbash\nVisit: https://github.com/Real-Fruit-Snacks/Wiki\nClick \"Fork\" button to create your copy\n\n\n2. Configure GitHub Pages\n1. Go to your forked repository\n2. Click Settings \u2192 Pages\n3. Source: GitHub Actions\n4. Save the settings\n\n3. Enable Actions (if needed)\n1. Go to Actions tab in your repository\n2. Click \"I understand my workflows, go ahead and enable them\"\n3. Wait for the initial deployment to complete\n\n4. Access Your Wiki\n\nYour wiki will be available at:\nhttps://[your-username].github.io/Wiki/\n\n\n5. Customize Your Content\nbash\nClone your fork locally\ngit clone https://github.com/[your-username]/Wiki.git\ncd Wiki\n\nAdd your notes to the notes/ directory\nCommit and push changes\ngit add .\ngit commit -m \"Add my notes\"\ngit push origin main\n\n\n\ud83d\udcbb Local Development Setup\n\nQuick Start\nbash\nClone the repository\ngit clone https://github.com/Real-Fruit-Snacks/Wiki.git\ncd Wiki\n\nStart local server\npython3 -m http.server 8000\n\nOpen in browser\nopen http://localhost:8000\n\n\nFull Development Setup\nbash\nInstall Node.js dependencies (optional)\nnpm install\n\nBuild search index\nnpm run build\nor\npython3 build.py\n\nStart development server\nnpm run serve\nor\npython3 -m http.server 8000\n\n\nDevelopment Commands\nbash\nValidate JavaScript\nnpm run validate\n\nValidate themes\nnpm run validate-themes\n\nRun all validations\nnpm run validate-all\n\nCreate release package\nnpm run package\n\n\n\ud83e\udd8a GitLab Pages Setup\n\nGitLab Configuration\n1. Fork the repository to GitLab\n2. Copy .gitlab-ci.yml from gitlab-files/ to root\n3. Enable GitLab Pages in project settings\n4. Your site will be at: https://[username].gitlab.io/Wiki/\n\nGitLab CI/CD Pipeline\nyaml\n.gitlab-ci.yml\npages:\n  script:\n    - python3 build.py\n    - cp -r . public/\n  artifacts:\n    paths:\n      - public\n  only:\n    - main\n\n\n\u2601\ufe0f Static Hosting Platforms\n\nNetlify Setup\n1. Connect your Git repository to Netlify\n2. Build command: python3 build.py\n3. Publish directory: /\n4. Deploy automatically on git push\n\nVercel Setup\njson\n{\n  \"buildCommand\": \"python3 build.py\",\n  \"outputDirectory\": \".\",\n  \"installCommand\": \"echo 'No install needed'\"\n}\n\n\nOther Platforms\nNotes Wiki works with any static hosting service:\n- Firebase Hosting\n- AWS S3 + CloudFront\n- DigitalOcean App Platform\n- Surge.sh\n\n\ud83c\udfe0 Self-Hosted Setup\n\nBasic Web Server\nnginx\nNginx configuration\nserver {\n    listen 80;\n    servername your-domain.com;\n    root /path/to/Wiki;\n    index index.html;\n    \n    location / {\n        tryfiles $uri $uri/ /index.html;\n    }\n}\n\n\nDocker Setup\ndockerfile\nFROM nginx:alpine\nCOPY . /usr/share/nginx/html\nEXPOSE 80\n\n\nbash\nBuild and run Docker container\ndocker build -t notes-wiki .\ndocker run -p 8080:80 notes-wiki\n\n\n\u2699\ufe0f Initial Configuration\n\n1. Update Site Information\nEdit config.yml:\nyaml\ntitle: \"My Knowledge Base\"\ndescription: \"Personal notes and documentation\"\nurl: \"https://yourdomain.com\"\n\n\n2. Customize Settings\n1. Open your wiki in browser\n2. Press Ctrl+, to open settings\n3. Configure:\n   - Theme - Choose from 74 themes\n   - Display - Content width, line numbers\n   - Navigation - Tab limits, recent files\n   - Productivity - Timer, quick notes\n\n3. Add Your First Notes\nbash\nCreate a new note\ntouch notes/my-first-note.md\n\n\nmarkdown\n---\ntitle: My First Note\ntags: [personal, getting-started]\nauthor: Your Name\ncreated: 2025-01-19\n---\n\nMy First Note\n\nWelcome to my knowledge base! This is where I'll collect my thoughts, ideas, and important information.\n\nGetting Started\n\n- [ ] Explore the interface\n- [ ] Try different themes\n- [ ] Learn keyboard shortcuts\n- [ ] Organize my notes\n\n\n4. Build Search Index\nbash\nAfter adding notes, rebuild the search index\npython3 build.py\n\nOr use npm script\nnpm run build\n\n\n\ud83d\udd27 Advanced Configuration\n\nCustom CSS Styling\ncss\n/ Add to Settings \u2192 Appearance \u2192 Custom CSS /\n.content-area {\n    max-width: 1200px;\n    font-size: 16px;\n}\n\n.note-content h1 {\n    color: #2563eb;\n}\n\n\nEnvironment Variables\nbash\nFor deployment automation\nexport WIKITITLE=\"My Knowledge Base\"\nexport WIKIAUTHOR=\"Your Name\"\nexport WIKIURL=\"https://yourdomain.com\"\n\n\nGitHub Actions Customization\nyaml\n.github/workflows/pages.yml\nname: Deploy to GitHub Pages\non:\n  push:\n    branches: [ main ]\n    paths: \n      - 'notes/'\n      - 'themes/'\n      - '.js'\n      - '.css'\n      - '.html'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Build search index\n        run: python3 build.py\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          githubtoken: ${{ secrets.GITHUBTOKEN }}\n          publishdir: ./\n\n\n\ud83d\udea8 Troubleshooting\n\nCommon Issues\n\n1. GitHub Pages Not Building\nProblem: No workflow runs in Actions tab\nSolution:\nbash\nCheck if Actions are enabled\nGo to repository Settings \u2192 Actions \u2192 General\nEnable \"Allow all actions and reusable workflows\"\n\n\n2. Search Not Working\nProblem: Search returns no results\nSolution:\nbash\nRebuild search index\npython3 build.py\n\nCheck if notes-index.json exists and has content\nls -la notes-index.json\n\n\n3. Custom Domain Issues\nProblem: Custom domain not working\nSolution:\nbash\nAdd CNAME file to repository root\necho \"yourdomain.com\" > CNAME\ngit add CNAME\ngit commit -m \"Add custom domain\"\ngit push\n\n\n4. Python Build Errors\nProblem: Build script fails\nSolution:\nbash\nCheck Python version\npython3 --version\n\nInstall required packages if needed\npip3 install pyyaml\n\nRun with verbose output\npython3 build.py --verbose\n\n\n\ud83d\udcf1 Mobile Setup\n\nProgressive Web App\nNotes Wiki works as a PWA:\n1. Open in mobile browser\n2. Add to home screen\n3. Works offline after first load\n4. Full mobile optimization\n\nMobile Deployment Tips\n- Use responsive themes\n- Enable touch gestures\n- Test on different screen sizes\n- Optimize image sizes\n\n\ud83d\udd10 Security Considerations\n\nPublic vs Private Repositories\n- Public repos: Anyone can see your notes\n- Private repos: Requires GitHub Pro for Pages\n- Self-hosted: Full control over access\n\nSensitive Information\nmarkdown\n<!-- DON'T include in notes -->\n- Passwords or API keys\n- Personal identifying information\n- Confidential business data\n\n<!-- DO include -->\n- Learning notes\n- Public documentation\n- Open source information\n\n\nAccess Control\nbash\nFor private wikis, consider:\n- HTTP basic authentication\n- VPN access\n- Server-side authentication\n\n\n\ud83d\udcc8 Performance Optimization\n\nLarge Note Collections\nbash\nOptimize performance for 1000+ notes\n1. Enable pagination in search\n2. Use tag filtering\n3. Regular index rebuilds\n4. Optimize images\n\n\nBuild Optimization\npython\nCustom build.py modifications\n- Exclude draft notes\n- Compress JSON output\n- Generate sitemap\n- Optimize images\n\n\n\ud83c\udf89 Next Steps\n\nAfter successful installation:\n\n1. Explore tutorials - Learn features step by step\n2. Customize appearance - Find your perfect theme\n3. Import existing notes - Migrate from other systems\n4. Set up workflows - Develop note-taking habits\n5. Join community - Get help and share tips\n\n\ud83d\udcda Additional Resources\n\n- Welcome Tutorial - Basic usage guide\n- Creating Notes - Note structure and organization\n- Keyboard Shortcuts - Speed up your workflow\n- Theme Guide - Customize your appearance\n- Search Guide - Master advanced search\n\n---\n\nCongratulations! \ud83c\udf89 You now have Notes Wiki installed and configured. Start creating your knowledge base and enjoy your new note-taking system!  # Visit: https://github.com/Real-Fruit-Snacks/Wiki\n# Click \"Fork\" button to create your copy Your wiki will be available at:\nhttps://[your-username].github.io/Wiki/ # Clone your fork locally\ngit clone https://github.com/[your-username]/Wiki.git\ncd Wiki\n\n# Add your notes to the notes/ directory\n# Commit and push changes\ngit add .\ngit commit -m \"Add my notes\"\ngit push origin main # Clone the repository\ngit clone https://github.com/Real-Fruit-Snacks/Wiki.git\ncd Wiki\n\n# Start local server\npython3 -m http.server 8000\n\n# Open in browser\nopen http://localhost:8000 # Install Node.js dependencies (optional)\nnpm install\n\n# Build search index\nnpm run build\n# or\npython3 build.py\n\n# Start development server\nnpm run serve\n# or\npython3 -m http.server 8000 # Validate JavaScript\nnpm run validate\n\n# Validate themes\nnpm run validate-themes\n\n# Run all validations\nnpm run validate-all\n\n# Create release package\nnpm run package # .gitlab-ci.yml\npages:\n  script:\n    - python3 build.py\n    - cp -r . public/\n  artifacts:\n    paths:\n      - public\n  only:\n    - main {\n  \"buildCommand\": \"python3 build.py\",\n  \"outputDirectory\": \".\",\n  \"installCommand\": \"echo 'No install needed'\"\n} # Nginx configuration\nserver {\n    listen 80;\n    server_name your-domain.com;\n    root /path/to/Wiki;\n    index index.html;\n    \n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n} FROM nginx:alpine\nCOPY . /usr/share/nginx/html\nEXPOSE 80 # Build and run Docker container\ndocker build -t notes-wiki .\ndocker run -p 8080:80 notes-wiki title: \"My Knowledge Base\"\ndescription: \"Personal notes and documentation\"\nurl: \"https://yourdomain.com\" # Create a new note\ntouch notes/my-first-note.md ---\ntitle: My First Note\ntags: [personal, getting-started]\nauthor: Your Name\ncreated: 2025-01-19\n---\n\n# My First Note\n\nWelcome to my knowledge base! This is where I'll collect my thoughts, ideas, and important information.\n\n## Getting Started\n\n- [ ] Explore the interface\n- [ ] Try different themes\n- [ ] Learn keyboard shortcuts\n- [ ] Organize my notes # After adding notes, rebuild the search index\npython3 build.py\n\n# Or use npm script\nnpm run build /* Add to Settings \u2192 Appearance \u2192 Custom CSS */\n.content-area {\n    max-width: 1200px;\n    font-size: 16px;\n}\n\n.note-content h1 {\n    color: #2563eb;\n} # For deployment automation\nexport WIKI_TITLE=\"My Knowledge Base\"\nexport WIKI_AUTHOR=\"Your Name\"\nexport WIKI_URL=\"https://yourdomain.com\" # .github/workflows/pages.yml\nname: Deploy to GitHub Pages\non:\n  push:\n    branches: [ main ]\n    paths: \n      - 'notes/**'\n      - 'themes/**'\n      - '*.js'\n      - '*.css'\n      - '*.html'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Build search index\n        run: python3 build.py\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./ # Check if Actions are enabled\n# Go to repository Settings \u2192 Actions \u2192 General\n# Enable \"Allow all actions and reusable workflows\" # Rebuild search index\npython3 build.py\n\n# Check if notes-index.json exists and has content\nls -la notes-index.json # Add CNAME file to repository root\necho \"yourdomain.com\" > CNAME\ngit add CNAME\ngit commit -m \"Add custom domain\"\ngit push # Check Python version\npython3 --version\n\n# Install required packages if needed\npip3 install pyyaml\n\n# Run with verbose output\npython3 build.py --verbose <!-- DON'T include in notes -->\n- Passwords or API keys\n- Personal identifying information\n- Confidential business data\n\n<!-- DO include -->\n- Learning notes\n- Public documentation\n- Open source information # For private wikis, consider:\n# - HTTP basic authentication\n# - VPN access\n# - Server-side authentication # Optimize performance for 1000+ notes\n# 1. Enable pagination in search\n# 2. Use tag filtering\n# 3. Regular index rebuilds\n# 4. Optimize images # Custom build.py modifications\n# - Exclude draft notes\n# - Compress JSON output\n# - Generate sitemap\n# - Optimize images",
      "code_blocks_count": 26
    },
    {
      "path": "/notes/tutorials/getting-started/troubleshooting.md",
      "context": "tutorials",
      "metadata": {
        "title": "Troubleshooting Guide",
        "tags": [
          "troubleshooting",
          "help",
          "debugging",
          "common-issues",
          "support"
        ],
        "created": "2025-01-19",
        "author": "Wiki Team",
        "description": "Comprehensive guide to diagnosing and fixing common Notes Wiki issues",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Having issues with Notes Wiki? This comprehensive guide covers common problems and their solutions, helping you get back to productive note-taking quickly.\n\n\n\nBefore diving into specific issues, run t...",
      "searchable_content": "\nTroubleshooting Guide\n\nHaving issues with Notes Wiki? This comprehensive guide covers common problems and their solutions, helping you get back to productive note-taking quickly.\n\n\ud83d\udd0d Quick Diagnostic Checklist\n\nBefore diving into specific issues, run through this quick checklist:\n\nbash\n\u2705 Browser Compatibility Check\n- Modern browser (Chrome 90+, Firefox 88+, Safari 14+, Edge 90+)\n- JavaScript enabled\n- Local storage available\n\n\u2705 File Access Check\n- Can access index.html?\n- Are notes/ directory and files readable?\n- Is notes-index.json present and valid?\n\n\u2705 Network Check (for hosted versions)\n- Internet connection stable?\n- Can access GitHub Pages/hosting platform?\n- No firewall blocking static content?\n\n\n\ud83d\udea8 Common Issues & Solutions\n\n1. Search Not Working\n\nProblem: No search results appear\nSymptoms:\n- Search box works but returns empty results\n- All searches show \"No notes found\"\n- Search seems to hang or load indefinitely\n\nSolutions:\n\nCheck Search Index:\nbash\nVerify index file exists and has content\nls -la notes-index.json\nShould show file size > 1KB\n\nValidate JSON structure\npython3 -c \"import json; json.load(open('notes-index.json'))\"\nShould complete without errors\n\n\nRebuild Search Index:\nbash\nMethod 1: Using npm\nnpm run build\n\nMethod 2: Direct Python\npython3 build.py\n\nMethod 3: Force rebuild\nrm notes-index.json\npython3 build.py\n\n\nCheck for Malformed Notes:\nbash\nFind notes with invalid frontmatter\ngrep -l \"^---\" notes//.md | xargs -I {} sh -c 'echo \"Checking: {}\"; head -20 \"{}\"'\n\nCommon frontmatter issues:\n- Missing closing ---\n- Invalid YAML syntax\n- Unquoted strings with special characters\n\n\nProblem: Search results are incomplete\nSymptoms:\n- Some notes don't appear in search\n- Recently added notes missing\n- Partial search results\n\nSolutions:\nbash\nCheck file permissions\nfind notes/ -name \".md\" ! -readable\nShould return no results\n\nVerify note structure\nhead -10 path/to/missing-note.md\nShould have valid YAML frontmatter\n\nForce complete rebuild\nrm notes-index.json\npython3 build.py --force\n\n\n2. GitHub Pages Deployment Issues\n\nProblem: GitHub Pages not deploying\nSymptoms:\n- No site appears at github.io URL\n- \"404 - File not found\" error\n- Actions tab shows no workflows\n\nSolutions:\n\nEnable GitHub Actions:\n1. Go to repository Settings \u2192 Actions \u2192 General\n2. Select \"Allow all actions and reusable workflows\"\n3. Save changes\n\nCheck Pages Configuration:\n1. Go to Settings \u2192 Pages\n2. Source should be \"GitHub Actions\"\n3. If using \"Deploy from a branch\", change to \"GitHub Actions\"\n\nVerify Workflow File:\nbash\nCheck if workflow file exists\nls .github/workflows/\nShould contain pages.yml or similar\n\nValidate workflow syntax\ncat .github/workflows/pages.yml\nCheck for proper YAML indentation\n\n\nManual Workflow Trigger:\n1. Go to Actions tab\n2. Select the Pages workflow\n3. Click \"Run workflow\"\n4. Wait for completion\n\nProblem: GitHub Pages builds but shows errors\nSymptoms:\n- Workflow runs but deployment fails\n- Site loads but missing content\n- 404 errors for specific files\n\nSolutions:\nbash\nCheck build logs in Actions tab\nLook for Python or build errors\n\nCommon fixes:\necho \"include: ['config.yml']\" > .nojekyll\ngit add .nojekyll\ngit commit -m \"Add .nojekyll file\"\ngit push\n\n\n3. Local Development Issues\n\nProblem: Python build script fails\nSymptoms:\n- python3 build.py throws errors\n- Missing dependencies\n- Permission errors\n\nSolutions:\n\nCheck Python Version:\nbash\npython3 --version\nShould be 3.6 or higher\n\nInstall on different systems:\nUbuntu/Debian: sudo apt install python3 python3-pip\nmacOS: brew install python3\nWindows: Download from python.org\n\n\nInstall Required Packages:\nbash\npip3 install pyyaml\nor\npip3 install -r requirements.txt  # if available\n\n\nPermission Issues:\nbash\nLinux/Mac: Fix file permissions\nchmod +x build.py\nsudo chown -R $USER:$USER notes/\n\nWindows: Run as administrator or check file properties\n\n\nProblem: Local server won't start\nSymptoms:\n- \"Port already in use\" error\n- \"Permission denied\" on port 8000\n- Server starts but can't access in browser\n\nSolutions:\nbash\nUse different port\npython3 -m http.server 8080\nTry ports: 3000, 8080, 9000\n\nCheck what's using port 8000\nLinux/Mac:\nlsof -i :8000\nWindows:\nnetstat -ano | findstr :8000\n\nKill process using port (if safe)\nLinux/Mac:\nkill -9 $(lsof -ti:8000)\nWindows:\ntaskkill /PID <processid> /F\n\n\n4. Browser Compatibility Issues\n\nProblem: Features not working in browser\nSymptoms:\n- Keyboard shortcuts don't work\n- UI elements missing or broken\n- JavaScript errors in console\n\nSolutions:\n\nCheck Browser Console:\njavascript\n// Open Developer Tools (F12)\n// Look for JavaScript errors in Console tab\n// Common issues:\n// - localStorage blocked (private browsing)\n// - JavaScript disabled\n// - Browser too old\n\n\nEnable Required Features:\nbash\nCheck browser settings:\n- Enable JavaScript\n- Allow localStorage\n- Disable privacy extensions temporarily\n- Try incognito/private mode\n\n\nBrowser-Specific Issues:\njavascript\n// Safari: Enable Developer menu\n// Safari \u2192 Preferences \u2192 Advanced \u2192 Show Develop menu\n\n// Firefox: Check about:config\n// dom.storage.enabled = true\n// javascript.enabled = true\n\n// Chrome: Check chrome://settings/content\n// JavaScript: Allowed\n// Cookies: Allow all\n\n\n5. Theme and Display Issues\n\nProblem: Themes not loading or broken appearance\nSymptoms:\n- Stuck on default theme\n- CSS not loading properly\n- Broken layout or missing styles\n\nSolutions:\n\nClear Browser Cache:\nbash\nHard refresh:\nChrome/Firefox: Ctrl+F5 or Ctrl+Shift+R\nSafari: Cmd+Shift+R\nEdge: Ctrl+F5\n\nClear all cache:\nChrome: Settings \u2192 Privacy \u2192 Clear browsing data\nFirefox: Settings \u2192 Privacy \u2192 Clear Data\n\n\nCheck Theme Files:\nbash\nVerify theme files exist\nls themes/\nShould show all .css files\n\nCheck specific theme\ncat themes/your-theme.css | head -10\nShould contain valid CSS\n\n\nReset to Default:\njavascript\n// Open browser console (F12)\n// Reset theme settings\nlocalStorage.removeItem('wiki-settings');\nlocation.reload();\n\n\n6. Mobile and Responsive Issues\n\nProblem: Poor mobile experience\nSymptoms:\n- Text too small on mobile\n- Interface elements overlap\n- Touch gestures don't work\n\nSolutions:\nhtml\n<!-- Verify meta viewport tag in index.html -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n<!-- Check CSS media queries -->\n@media (max-width: 768px) {\n    / Mobile styles should be present /\n}\n\n\nMobile-Specific Settings:\n1. Use responsive themes (most themes are responsive)\n2. Enable mobile-friendly features in settings\n3. Test with browser dev tools device simulation\n\n7. Performance Issues\n\nProblem: Slow loading or freezing\nSymptoms:\n- App takes long time to load\n- Searches are very slow\n- Browser becomes unresponsive\n\nSolutions:\n\nOptimize Large Note Collections:\nbash\nCheck notes-index.json size\nls -lh notes-index.json\nIf > 10MB, consider:\n- Reducing note count\n- Splitting into multiple wikis\n- Optimizing note content\n\n\nBrowser Performance:\njavascript\n// Check memory usage in dev tools\n// Performance tab \u2192 Memory\n// Look for memory leaks or high usage\n\n// Clear browser data\n// Disable browser extensions\n// Close other tabs\n\n\nOptimize Content:\nbash\nReduce image sizes\nfind notes/ -name \".jpg\" -o -name \".png\" | xargs ls -lh\nConsider compressing large images\n\nRemove unused files\nfind notes/ -name \".tmp\" -o -name \".backup\" -delete\n\n\n\ud83d\udee0\ufe0f Advanced Debugging\n\nEnable Debug Mode\n\nJavaScript Debugging:\njavascript\n// Open browser console (F12)\n// Enable verbose logging\nlocalStorage.setItem('wiki-debug', 'true');\nlocation.reload();\n\n// Check for detailed error messages\n// Look for specific function failures\n\n\nPython Build Debugging:\nbash\nRun build with verbose output\npython3 build.py --verbose\n\nCheck for specific errors\npython3 -c \"\nimport traceback\ntry:\n    exec(open('build.py').read())\nexcept Exception as e:\n    traceback.printexc()\n\"\n\n\nNetwork Issues\n\nCheck Network Requests:\njavascript\n// Browser Dev Tools \u2192 Network tab\n// Reload page and check:\n// - Failed requests (red)\n// - Slow requests (>1s)\n// - 404 errors\n// - CORS issues\n\n\nCDN and External Resources:\nbash\nTest external dependencies\ncurl -I https://cdn.jsdelivr.net/npm/marked/marked.min.js\nShould return 200 OK\n\nCheck if offline mode works\nDisconnect internet and test basic functionality\n\n\nFile System Issues\n\nCheck File Encoding:\nbash\nVerify UTF-8 encoding\nfile -i notes//.md\nShould show: text/plain; charset=utf-8\n\nFix encoding if needed\niconv -f iso-8859-1 -t utf-8 problem-file.md > fixed-file.md\n\n\nValidate Markdown Structure:\nbash\nCheck for markdown parsing issues\npython3 -c \"\nimport markdown\nwith open('notes/problematic-note.md', 'r') as f:\n    content = f.read()\n    try:\n        html = markdown.markdown(content)\n        print('Markdown parses successfully')\n    except Exception as e:\n        print(f'Markdown error: {e}')\n\"\n\n\n\ud83d\udcde Getting Additional Help\n\nSelf-Diagnosis Tools\n\nBrowser Information:\njavascript\n// Run in browser console to get system info\nconsole.log({\n    userAgent: navigator.userAgent,\n    localStorage: typeof(Storage) !== \"undefined\",\n    cookiesEnabled: navigator.cookieEnabled,\n    online: navigator.onLine,\n    language: navigator.language\n});\n\n\nSystem Information:\nbash\nGather system details for support\necho \"OS: $(uname -a)\"\necho \"Python: $(python3 --version)\"\necho \"Node: $(node --version 2>/dev/null || echo 'Not installed')\"\necho \"Git: $(git --version)\"\n\n\nCommunity Support\n\nBefore Asking for Help:\n1. \u2705 Check this troubleshooting guide\n2. \u2705 Search existing GitHub issues\n3. \u2705 Try basic solutions (restart, clear cache)\n4. \u2705 Gather error messages and system info\n\nWhere to Get Help:\n- GitHub Issues: Report bugs and get technical support\n- Documentation: Check other tutorial files\n- Community Forums: Share tips with other users\n\nCreating a Good Support Request:\nmarkdown\nProblem Description\nBrief description of the issue\n\nSteps to Reproduce\n1. Step one\n2. Step two\n3. Expected vs actual result\n\nSystem Information\n- OS: [Windows 10/macOS/Linux]\n- Browser: [Chrome 95.0/Firefox 94.0/etc]\n- Notes Wiki Version: [4.1.0]\n- Hosting: [GitHub Pages/Local/Other]\n\nError Messages\n\nAny console errors or build failures\n\n\nAdditional Context\nScreenshots, logs, or other relevant information\n\n\n\ud83c\udfaf Prevention Tips\n\nRegular Maintenance\n\nWeekly Tasks:\nbash\nRebuild search index\nnpm run build\n\nCheck for broken links\nValidate note structure\nReview recent changes\n\n\nMonthly Tasks:\nbash\nUpdate dependencies (if using Node.js)\nnpm update\n\nBackup notes and settings\ncp -r notes/ backup/notes-$(date +%Y%m%d)\ncp notes-index.json backup/\n\nReview and organize notes\n\n\nBest Practices\n\nAvoid Common Issues:\n- \u2705 Use consistent frontmatter structure\n- \u2705 Avoid special characters in filenames\n- \u2705 Keep individual notes under 100KB\n- \u2705 Regularly commit changes to Git\n- \u2705 Test changes locally before pushing\n\nFile Organization:\nbash\nGood structure\nnotes/\n\u251c\u2500\u2500 personal/\n\u2502   \u2514\u2500\u2500 2025-01-19-daily-notes.md\n\u251c\u2500\u2500 work/\n\u2502   \u2514\u2500\u2500 project-meeting-notes.md\n\u2514\u2500\u2500 reference/\n    \u2514\u2500\u2500 git-commands-cheatsheet.md\n\nAvoid\nnotes/\n\u251c\u2500\u2500 My Notes (spaces).md          # Use hyphens\n\u251c\u2500\u2500 \ud83d\ude80 emoji-file.md              # Avoid emoji in filenames\n\u2514\u2500\u2500 very-very-very-long-filename-that-is-hard-to-manage.md  # Keep shorter\n\n\n---\n\n\ud83d\udccb Quick Reference\n\nEssential Commands\nbash\nRebuild search index\npython3 build.py\n\nStart local server\npython3 -m http.server 8000\n\nCheck for issues\nnpm run validate-all\n\nClear browser cache\nCtrl+Shift+Delete (or Cmd+Shift+Delete on Mac)\n\n\nEmergency Recovery\nbash\nReset to working state\ngit checkout main\ngit pull origin main\nrm notes-index.json\npython3 build.py\n\nClear all local data\nOpen browser console:\nlocalStorage.clear();\nsessionStorage.clear();\nlocation.reload();\n\n\nRemember: Most issues can be resolved with a simple restart, cache clear, or index rebuild. Don't hesitate to try the simple solutions first! \ud83d\ude80  \u2705 Browser Compatibility Check\n- Modern browser (Chrome 90+, Firefox 88+, Safari 14+, Edge 90+)\n- JavaScript enabled\n- Local storage available\n\n\u2705 File Access Check\n- Can access index.html?\n- Are notes/ directory and files readable?\n- Is notes-index.json present and valid?\n\n\u2705 Network Check (for hosted versions)\n- Internet connection stable?\n- Can access GitHub Pages/hosting platform?\n- No firewall blocking static content? # Verify index file exists and has content\nls -la notes-index.json\n# Should show file size > 1KB\n\n# Validate JSON structure\npython3 -c \"import json; json.load(open('notes-index.json'))\"\n# Should complete without errors # Method 1: Using npm\nnpm run build\n\n# Method 2: Direct Python\npython3 build.py\n\n# Method 3: Force rebuild\nrm notes-index.json\npython3 build.py # Find notes with invalid frontmatter\ngrep -l \"^---\" notes/**/*.md | xargs -I {} sh -c 'echo \"Checking: {}\"; head -20 \"{}\"'\n\n# Common frontmatter issues:\n# - Missing closing ---\n# - Invalid YAML syntax\n# - Unquoted strings with special characters # Check file permissions\nfind notes/ -name \"*.md\" ! -readable\n# Should return no results\n\n# Verify note structure\nhead -10 path/to/missing-note.md\n# Should have valid YAML frontmatter\n\n# Force complete rebuild\nrm notes-index.json\npython3 build.py --force # Check if workflow file exists\nls .github/workflows/\n# Should contain pages.yml or similar\n\n# Validate workflow syntax\ncat .github/workflows/pages.yml\n# Check for proper YAML indentation # Check build logs in Actions tab\n# Look for Python or build errors\n\n# Common fixes:\necho \"include: ['_config.yml']\" > .nojekyll\ngit add .nojekyll\ngit commit -m \"Add .nojekyll file\"\ngit push python3 --version\n# Should be 3.6 or higher\n\n# Install on different systems:\n# Ubuntu/Debian: sudo apt install python3 python3-pip\n# macOS: brew install python3\n# Windows: Download from python.org pip3 install pyyaml\n# or\npip3 install -r requirements.txt  # if available # Linux/Mac: Fix file permissions\nchmod +x build.py\nsudo chown -R $USER:$USER notes/\n\n# Windows: Run as administrator or check file properties # Use different port\npython3 -m http.server 8080\n# Try ports: 3000, 8080, 9000\n\n# Check what's using port 8000\n# Linux/Mac:\nlsof -i :8000\n# Windows:\nnetstat -ano | findstr :8000\n\n# Kill process using port (if safe)\n# Linux/Mac:\nkill -9 $(lsof -ti:8000)\n# Windows:\ntaskkill /PID <process_id> /F // Open Developer Tools (F12)\n// Look for JavaScript errors in Console tab\n// Common issues:\n// - localStorage blocked (private browsing)\n// - JavaScript disabled\n// - Browser too old # Check browser settings:\n# - Enable JavaScript\n# - Allow localStorage\n# - Disable privacy extensions temporarily\n# - Try incognito/private mode // Safari: Enable Developer menu\n// Safari \u2192 Preferences \u2192 Advanced \u2192 Show Develop menu\n\n// Firefox: Check about:config\n// dom.storage.enabled = true\n// javascript.enabled = true\n\n// Chrome: Check chrome://settings/content\n// JavaScript: Allowed\n// Cookies: Allow all # Hard refresh:\n# Chrome/Firefox: Ctrl+F5 or Ctrl+Shift+R\n# Safari: Cmd+Shift+R\n# Edge: Ctrl+F5\n\n# Clear all cache:\n# Chrome: Settings \u2192 Privacy \u2192 Clear browsing data\n# Firefox: Settings \u2192 Privacy \u2192 Clear Data # Verify theme files exist\nls themes/\n# Should show all .css files\n\n# Check specific theme\ncat themes/your-theme.css | head -10\n# Should contain valid CSS // Open browser console (F12)\n// Reset theme settings\nlocalStorage.removeItem('wiki-settings');\nlocation.reload(); <!-- Verify meta viewport tag in index.html -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n<!-- Check CSS media queries -->\n@media (max-width: 768px) {\n    /* Mobile styles should be present */\n} # Check notes-index.json size\nls -lh notes-index.json\n# If > 10MB, consider:\n# - Reducing note count\n# - Splitting into multiple wikis\n# - Optimizing note content // Check memory usage in dev tools\n// Performance tab \u2192 Memory\n// Look for memory leaks or high usage\n\n// Clear browser data\n// Disable browser extensions\n// Close other tabs # Reduce image sizes\nfind notes/ -name \"*.jpg\" -o -name \"*.png\" | xargs ls -lh\n# Consider compressing large images\n\n# Remove unused files\nfind notes/ -name \"*.tmp\" -o -name \"*.backup\" -delete // Open browser console (F12)\n// Enable verbose logging\nlocalStorage.setItem('wiki-debug', 'true');\nlocation.reload();\n\n// Check for detailed error messages\n// Look for specific function failures # Run build with verbose output\npython3 build.py --verbose\n\n# Check for specific errors\npython3 -c \"\nimport traceback\ntry:\n    exec(open('build.py').read())\nexcept Exception as e:\n    traceback.print_exc()\n\" // Browser Dev Tools \u2192 Network tab\n// Reload page and check:\n// - Failed requests (red)\n// - Slow requests (>1s)\n// - 404 errors\n// - CORS issues # Test external dependencies\ncurl -I https://cdn.jsdelivr.net/npm/marked/marked.min.js\n# Should return 200 OK\n\n# Check if offline mode works\n# Disconnect internet and test basic functionality # Verify UTF-8 encoding\nfile -i notes/**/*.md\n# Should show: text/plain; charset=utf-8\n\n# Fix encoding if needed\niconv -f iso-8859-1 -t utf-8 problem-file.md > fixed-file.md # Check for markdown parsing issues\npython3 -c \"\nimport markdown\nwith open('notes/problematic-note.md', 'r') as f:\n    content = f.read()\n    try:\n        html = markdown.markdown(content)\n        print('Markdown parses successfully')\n    except Exception as e:\n        print(f'Markdown error: {e}')\n\" // Run in browser console to get system info\nconsole.log({\n    userAgent: navigator.userAgent,\n    localStorage: typeof(Storage) !== \"undefined\",\n    cookiesEnabled: navigator.cookieEnabled,\n    online: navigator.onLine,\n    language: navigator.language\n}); # Gather system details for support\necho \"OS: $(uname -a)\"\necho \"Python: $(python3 --version)\"\necho \"Node: $(node --version 2>/dev/null || echo 'Not installed')\"\necho \"Git: $(git --version)\" ## Problem Description\nBrief description of the issue\n\n## Steps to Reproduce\n1. Step one\n2. Step two\n3. Expected vs actual result\n\n## System Information\n- OS: [Windows 10/macOS/Linux]\n- Browser: [Chrome 95.0/Firefox 94.0/etc]\n- Notes Wiki Version: [4.1.0]\n- Hosting: [GitHub Pages/Local/Other]\n\n## Error Messages ## Additional Context\nScreenshots, logs, or other relevant information # Rebuild search index\nnpm run build\n\n# Check for broken links\n# Validate note structure\n# Review recent changes # Update dependencies (if using Node.js)\nnpm update\n\n# Backup notes and settings\ncp -r notes/ backup/notes-$(date +%Y%m%d)\ncp notes-index.json backup/\n\n# Review and organize notes # Good structure\nnotes/\n\u251c\u2500\u2500 personal/\n\u2502   \u2514\u2500\u2500 2025-01-19-daily-notes.md\n\u251c\u2500\u2500 work/\n\u2502   \u2514\u2500\u2500 project-meeting-notes.md\n\u2514\u2500\u2500 reference/\n    \u2514\u2500\u2500 git-commands-cheatsheet.md\n\n# Avoid\nnotes/\n\u251c\u2500\u2500 My Notes (spaces).md          # Use hyphens\n\u251c\u2500\u2500 \ud83d\ude80 emoji-file.md              # Avoid emoji in filenames\n\u2514\u2500\u2500 very-very-very-long-filename-that-is-hard-to-manage.md  # Keep shorter # Rebuild search index\npython3 build.py\n\n# Start local server\npython3 -m http.server 8000\n\n# Check for issues\nnpm run validate-all\n\n# Clear browser cache\nCtrl+Shift+Delete (or Cmd+Shift+Delete on Mac) # Reset to working state\ngit checkout main\ngit pull origin main\nrm notes-index.json\npython3 build.py\n\n# Clear all local data\n# Open browser console:\nlocalStorage.clear();\nsessionStorage.clear();\nlocation.reload();",
      "code_blocks_count": 36
    },
    {
      "path": "/notes/tutorials/getting-started/yaml-frontmatter-template.md",
      "context": "tutorials",
      "metadata": {
        "title": "Complete YAML Frontmatter Template and Guide",
        "tags": [
          "template",
          "yaml",
          "frontmatter",
          "guide",
          "reference"
        ],
        "created": "2025-01-19",
        "author": "Wiki Team",
        "description": "Comprehensive template showing all possible YAML frontmatter fields with detailed explanations and usage examples",
        "updated": "2025-01-19",
        "category": "templates",
        "status": "complete",
        "aliases": [],
        "related": [
          "creating-notes",
          "best-practices",
          "search-guide"
        ],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "This note serves as both a template and a comprehensive reference for all possible YAML frontmatter fields you can use in Notes Wiki. Copy the frontmatter section above and customize it for your needs...",
      "searchable_content": "\nComplete YAML Frontmatter Template and Guide\n\nThis note serves as both a template and a comprehensive reference for all possible YAML frontmatter fields you can use in Notes Wiki. Copy the frontmatter section above and customize it for your needs.\n\n\ud83c\udfaf Quick Start Templates\n\nBasic Note Template\nyaml\n---\ntitle: \"Your Note Title\"\ntags: [main-topic, content-type]\nauthor: \"Your Name\"\ncreated: 2025-01-19\ndescription: \"Brief description of your note\"\n---\n\n\nMeeting Notes Template\nyaml\n---\ntitle: \"Team Meeting - 2025-01-19\"\ntags: [meeting, team, project-name]\nauthor: \"Your Name\"\ncreated: 2025-01-19\ntype: \"meeting\"\nmeetingdate: \"2025-01-19\"\nattendees: [\"Alice\", \"Bob\", \"Charlie\"]\nstatus: \"complete\"\n---\n\n\nTutorial Template\nyaml\n---\ntitle: \"How to Master JavaScript Promises\"\ntags: [tutorial, javascript, programming, async]\nauthor: \"Your Name\"\ncreated: 2025-01-19\ntype: \"tutorial\"\ndifficulty: \"intermediate\"\nduration: \"20 minutes\"\nseries: \"javascript-fundamentals\"\nseriesorder: 5\nstatus: \"complete\"\n---\n\n\nProject Documentation Template\nyaml\n---\ntitle: \"Project Alpha - Technical Specification\"\ntags: [project, documentation, technical, project-alpha]\nauthor: \"Development Team\"\ncreated: 2025-01-19\nupdated: 2025-01-19\ntype: \"documentation\"\nproject: \"project-alpha\"\nstatus: \"review\"\npriority: \"high\"\ndeadline: \"2025-03-15\"\nreviewers: [\"Tech Lead\", \"Product Manager\"]\n---\n\n\nResearch Notes Template\nyaml\n---\ntitle: \"Machine Learning in Healthcare - Research Summary\"\ntags: [research, machine-learning, healthcare, summary]\nauthor: \"Your Name\"\ncreated: 2025-01-19\ntype: \"research\"\nstatus: \"draft\"\nsources: \n  - \"https://example.com/ml-healthcare-study\"\n  - \"Journal of Medical AI, Vol 15\"\nrelated: [\"ai-ethics\", \"healthcare-trends\"]\n---\n\n\n\ud83d\udccb Field Categories\n\nRequired for All Notes\n- title - Clear, descriptive title\n- tags - At least 2-3 relevant tags\n\nHighly Recommended\n- author - Who created it\n- created - When it was made\n- description - Search-friendly summary\n\nOrganization Helpers\n- category, context, project - Grouping\n- type - Content classification\n- status - Current state\n\nWorkflow Management\n- priority - Importance level\n- deadline - Due dates\n- progress - Completion tracking\n\nContent Enhancement\n- difficulty - Skill level required\n- duration - Time investment\n- series - Part of sequence\n\nCollaboration\n- contributors - Multiple authors\n- reviewers - Who approved it\n- sources - Reference materials\n\n\ud83d\udca1 Best Practices\n\nConsistency is Key\nyaml\nGood: Consistent formatting\ntags: [javascript, tutorial, beginner]\ncreated: 2025-01-19\nstatus: \"draft\"\n\nAvoid: Mixed formats\ntags: [\"JavaScript\", tutorial, BEGINNER]\ncreated: \"January 19, 2025\"\nstatus: Draft\n\n\nUse Quotes When Needed\nyaml\nRequired for titles with colons\ntitle: \"React Hooks: Complete Guide\"\n\nRequired for values with special characters\ndescription: \"Learn React's useState & useEffect\"\n\nOptional for simple values\nauthor: \"John Doe\"  # or just: author: John Doe\n\n\nTag Strategy\nyaml\nHierarchical tags for better organization\ntags: [programming, programming/javascript, programming/javascript/react]\n\nMulti-dimensional tagging\ntags: [\n  # Content type\n  tutorial,\n  # Technology\n  react, javascript,\n  # Difficulty\n  intermediate,\n  # Status\n  complete\n]\n\n\nDate Formats\nyaml\nPreferred: ISO 8601 format\ncreated: 2025-01-19\nupdated: 2025-01-19\n\nWith time (24-hour format)\nupdated: 2025-01-19 14:30\n\nAvoid these formats\ncreated: \"Jan 19, 2025\"    # Hard to sort\ncreated: \"19/01/2025\"      # Ambiguous\n\n\n\ud83d\udd0d How Fields Affect Search\n\nSearchable Fields\n- title - Primary search target\n- description - Appears in results\n- tags - Use tag:name to filter\n- author - Use author:name to filter\n- content - Full-text search\n\nSearch Examples\n\ntag:tutorial author:john         # Find John's tutorials\n\"complete guide\"                 # Exact phrase in title/content\nstatus:draft -tag:archived       # Draft notes, not archived\ndifficulty:beginner tag:javascript # Beginner JS content\n\n\n\u2699\ufe0f Advanced Usage\n\nConditional Fields\nOnly use fields that make sense for your content:\n\nyaml\nFor meeting notes\nmeetingdate: \"2025-01-19\"\nattendees: [\"Alice\", \"Bob\"]\n\nFor project work\nproject: \"website-redesign\"\ndeadline: \"2025-03-15\"\nbudget: \"$10,000\"\n\nFor tutorials\ndifficulty: \"intermediate\"\nduration: \"30 minutes\"\nprerequisites: [\"html-basics\", \"css-fundamentals\"]\n\n\nCustom Fields\nCreate your own fields for specific needs:\n\nyaml\nCustom tracking\nmood: \"productive\"           # For journal entries\nweather: \"sunny\"             # For daily notes\nenergylevel: 8              # Personal tracking\ncoffeeconsumed: 3           # Whatever matters to you!\n\n\n\ud83d\udea8 Common Mistakes\n\nYAML Syntax Errors\nyaml\nWrong: Missing quotes around title with colon\ntitle: React: Complete Guide\n\nRight: Quotes protect special characters\ntitle: \"React: Complete Guide\"\n\nWrong: Inconsistent array format\ntags: [javascript, \"react hooks\", vue.js]\n\nRight: Consistent formatting\ntags: [\"javascript\", \"react-hooks\", \"vue-js\"]\n\n\nField Naming\nyaml\nWrong: Spaces in field names\ncreation date: 2025-01-19\n\nRight: Use underscores or camelCase\ncreationdate: 2025-01-19\nor\ncreationDate: 2025-01-19\n\n\n---\n\n\ud83d\udcda Related Resources\n\n- Creating Notes Guide - Basic note structure\n- Best Practices Guide - Organization strategies  \n- Search Guide - Finding your content\n- Tag Filtering Guide - Advanced filtering\n\nRemember: Start simple with just title, tags, author, and created date. Add more fields as your needs grow and your system evolves! \ud83d\ude80  ---\ntitle: \"Your Note Title\"\ntags: [main-topic, content-type]\nauthor: \"Your Name\"\ncreated: 2025-01-19\ndescription: \"Brief description of your note\"\n--- ---\ntitle: \"Team Meeting - 2025-01-19\"\ntags: [meeting, team, project-name]\nauthor: \"Your Name\"\ncreated: 2025-01-19\ntype: \"meeting\"\nmeeting_date: \"2025-01-19\"\nattendees: [\"Alice\", \"Bob\", \"Charlie\"]\nstatus: \"complete\"\n--- ---\ntitle: \"How to Master JavaScript Promises\"\ntags: [tutorial, javascript, programming, async]\nauthor: \"Your Name\"\ncreated: 2025-01-19\ntype: \"tutorial\"\ndifficulty: \"intermediate\"\nduration: \"20 minutes\"\nseries: \"javascript-fundamentals\"\nseries_order: 5\nstatus: \"complete\"\n--- ---\ntitle: \"Project Alpha - Technical Specification\"\ntags: [project, documentation, technical, project-alpha]\nauthor: \"Development Team\"\ncreated: 2025-01-19\nupdated: 2025-01-19\ntype: \"documentation\"\nproject: \"project-alpha\"\nstatus: \"review\"\npriority: \"high\"\ndeadline: \"2025-03-15\"\nreviewers: [\"Tech Lead\", \"Product Manager\"]\n--- ---\ntitle: \"Machine Learning in Healthcare - Research Summary\"\ntags: [research, machine-learning, healthcare, summary]\nauthor: \"Your Name\"\ncreated: 2025-01-19\ntype: \"research\"\nstatus: \"draft\"\nsources: \n  - \"https://example.com/ml-healthcare-study\"\n  - \"Journal of Medical AI, Vol 15\"\nrelated: [\"ai-ethics\", \"healthcare-trends\"]\n--- # Good: Consistent formatting\ntags: [javascript, tutorial, beginner]\ncreated: 2025-01-19\nstatus: \"draft\"\n\n# Avoid: Mixed formats\ntags: [\"JavaScript\", tutorial, BEGINNER]\ncreated: \"January 19, 2025\"\nstatus: Draft # Required for titles with colons\ntitle: \"React Hooks: Complete Guide\"\n\n# Required for values with special characters\ndescription: \"Learn React's useState & useEffect\"\n\n# Optional for simple values\nauthor: \"John Doe\"  # or just: author: John Doe # Hierarchical tags for better organization\ntags: [programming, programming/javascript, programming/javascript/react]\n\n# Multi-dimensional tagging\ntags: [\n  # Content type\n  tutorial,\n  # Technology\n  react, javascript,\n  # Difficulty\n  intermediate,\n  # Status\n  complete\n] # Preferred: ISO 8601 format\ncreated: 2025-01-19\nupdated: 2025-01-19\n\n# With time (24-hour format)\nupdated: 2025-01-19 14:30\n\n# Avoid these formats\ncreated: \"Jan 19, 2025\"    # Hard to sort\ncreated: \"19/01/2025\"      # Ambiguous tag:tutorial author:john         # Find John's tutorials\n\"complete guide\"                 # Exact phrase in title/content\nstatus:draft -tag:archived       # Draft notes, not archived\ndifficulty:beginner tag:javascript # Beginner JS content # For meeting notes\nmeeting_date: \"2025-01-19\"\nattendees: [\"Alice\", \"Bob\"]\n\n# For project work\nproject: \"website-redesign\"\ndeadline: \"2025-03-15\"\nbudget: \"$10,000\"\n\n# For tutorials\ndifficulty: \"intermediate\"\nduration: \"30 minutes\"\nprerequisites: [\"html-basics\", \"css-fundamentals\"] # Custom tracking\nmood: \"productive\"           # For journal entries\nweather: \"sunny\"             # For daily notes\nenergy_level: 8              # Personal tracking\ncoffee_consumed: 3           # Whatever matters to you! # Wrong: Missing quotes around title with colon\ntitle: React: Complete Guide\n\n# Right: Quotes protect special characters\ntitle: \"React: Complete Guide\"\n\n# Wrong: Inconsistent array format\ntags: [javascript, \"react hooks\", vue.js]\n\n# Right: Consistent formatting\ntags: [\"javascript\", \"react-hooks\", \"vue-js\"] # Wrong: Spaces in field names\ncreation date: 2025-01-19\n\n# Right: Use underscores or camelCase\ncreation_date: 2025-01-19\n# or\ncreationDate: 2025-01-19",
      "code_blocks_count": 14
    },
    {
      "path": "/notes/index.md",
      "context": null,
      "metadata": {
        "title": "Notes Wiki - Home",
        "tags": [
          "home",
          "index",
          "documentation"
        ],
        "created": "2025-01-18",
        "author": "Wiki Team",
        "description": "Your personal knowledge management system - start here!",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Your powerful, offline-first personal knowledge management system. Everything you need to organize, search, and access your notes efficiently.\n\n\n\nNew to Notes Wiki? Start here:\n1. [[tutorials/getting-...",
      "searchable_content": "\nWelcome to Notes Wiki \ud83c\udf89\n\nYour powerful, offline-first personal knowledge management system. Everything you need to organize, search, and access your notes efficiently.\n\n\ud83d\ude80 Quick Start\n\nNew to Notes Wiki? Start here:\n1. [[tutorials/getting-started/welcome|Welcome Guide]] - 5-minute introduction\n2. [[tutorials/getting-started/creating-notes|Creating Notes]] - Learn note structure and organization\n3. [[tutorials/features/search-guide|Search Guide]] - Master the powerful search system\n4. [[tutorials/features/keyboard-shortcuts|Keyboard Shortcuts]] - Speed up your workflow\n\n\ud83d\udcda Feature Tutorials\n\n\ud83d\udcdd Core Features\n- [[tutorials/features/tab-management|Tab Management]] - Multi-tab browsing system\n- [[tutorials/features/search-guide|Advanced Search]] - Powerful search with operators\n- [[tutorials/features/themes|Themes Gallery]] - 70 beautiful themes\n- [[tutorials/features/settings-customization|Settings & Customization]] - Make it yours\n\n\ud83e\udded Navigation & Organization  \n- [[tutorials/features/table-of-contents|Table of Contents]] - Auto-generated navigation\n- [[tutorials/features/wiki-links|Wiki-Style Links]] - Connect your notes\n- [[tutorials/features/bookmarks|Bookmarks]] - Save favorite notes\n- [[tutorials/features/recent-files-bookmarks|Recent Files & Pinning]] - Quick access to files\n- [[tutorials/features/context-filtering|Context Filtering]] - Organize by categories\n\n\ud83d\udcd6 Reading Experience\n- [[tutorials/features/focus-mode|Focus Mode]] - Distraction-free reading\n- [[tutorials/features/reading-progress|Reading Progress]] - Track your position\n- [[tutorials/features/in-note-search|In-Note Search]] - Find text within notes\n\n\ud83d\udcbb Content Creation\n- [[tutorials/features/code-blocks|Code Blocks]] - Syntax highlighting & features\n- [[tutorials/features/markdown-callouts|Markdown Callouts]] - Highlight important info\n- [[tutorials/features/images-media|Images & Media]] - Embed visual content\n\n\ud83d\udee0\ufe0f Productivity Tools\n- [[tutorials/features/pomodoro-timer|Pomodoro Timer]] - Built-in focus timer\n- [[tutorials/features/split-view|Split View]] - Work with multiple notes side-by-side\n- [[tutorials/features/sticky-notes|Sticky Notes]] - Floating mini-notes for quick thoughts\n- [[tutorials/features/keyboard-shortcuts|Keyboard Shortcuts]] - Complete shortcut guide\n\n\ud83d\ude80 Advanced Features\n\n- [[tutorials/advanced/combined-code-blocks|Combined Code Blocks]] - Auto-aggregate code from notes\n\n\ud83c\udfaf Common Workflows\n\n\ud83d\udcda Knowledge Management\n1. Create structured notes with frontmatter\n2. Organize with folders and tags\n3. Link related notes with wiki-links\n4. Search and filter as needed\n\n\ud83d\udc68\u200d\ud83d\udcbb Technical Documentation\n1. Use code blocks with syntax highlighting\n2. Create tutorials with combined code blocks\n3. Add callouts for important information\n4. Organize by project or technology\n\n\ud83d\udcdd Personal Notes\n1. Create daily journal entries\n2. Tag for easy retrieval\n3. Use bookmarks for frequent access\n4. Track reading progress on long notes\n\n\ud83d\udd27 Technical Information\n\nSystem Requirements\n- \u2705 Any modern web browser\n- \u2705 No installation required\n- \u2705 Works offline after first load\n- \u2705 No server dependencies\n\nBrowser Compatibility\n- Chrome 57+\n- Firefox 52+\n- Safari 10.1+\n- Edge 16+\n\nKey Technologies\n- Vanilla JavaScript (no framework dependencies)\n- Markdown rendering with marked.js\n- Syntax highlighting with Prism.js\n- Pure CSS themes\n\n\ud83d\udcca Feature Overview\n\n| Category | Features |\n|----------|----------|\n| Navigation | Tabs, Search, TOC, Wiki Links, Bookmarks |\n| Editing | Markdown, Code Blocks, Callouts, Frontmatter |\n| Customization | 50+ Themes, Settings, Keyboard Shortcuts |\n| Productivity | Focus Mode, Timer, Recent Files, Progress Tracking |\n| Organization | Tags, Contexts, Folders, Search Operators |\n\n\ud83c\udd98 Need Help?\n\n- Keyboard Help: Press ? anytime to see all shortcuts\n- Search Tips: Use \"quotes\" for exact phrases\n- Navigation: Ctrl+K for quick search\n- Settings: Ctrl+, to customize\n\n\ud83c\udf89 Tips for Success\n\n1. Start Simple: Create a few notes to get familiar\n2. Use Tags: They make finding notes much easier\n3. Link Notes: Build connections with wiki-links\n4. Customize: Find a theme and settings you love\n5. Keyboard Shortcuts: Learn a few to speed up\n\n---\n\nReady to start? Create your first note or explore the tutorials above. Welcome to your new knowledge management system!",
      "code_blocks_count": 0
    },
    {
      "path": "/notes/tutorials/advanced/combined-code-blocks.md",
      "context": "tutorials",
      "metadata": {
        "title": "Combined Code Blocks - Automatic Code Aggregation",
        "tags": [
          "tutorial",
          "code",
          "advanced",
          "automation"
        ],
        "created": "2025-01-18",
        "author": "Wiki Team",
        "description": "Automatically combine all code blocks from a page into a single, copyable block",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Transform your tutorials and documentation by automatically combining all code blocks into a single, complete code file at the end of your note.\n\n\n\nThe combined code blocks feature:\n- Collects all cod...",
      "searchable_content": "\nCombined Code Blocks - Automatic Code Aggregation\n\nTransform your tutorials and documentation by automatically combining all code blocks into a single, complete code file at the end of your note.\n\n\ud83c\udfaf What It Does\n\nThe combined code blocks feature:\n- Collects all code blocks from your note\n- Filters based on your criteria\n- Combines them into one copyable block\n- Adds section markers and comments\n- Appears automatically at the note's end\n\n\u2699\ufe0f Basic Configuration\n\nAdd this to your note's frontmatter:\n\nyaml title:\"Basic Setup\"\n---\ntitle: My Tutorial\ncombineCodeBlocks: true\ncombinedBlockLanguage: javascript\n---\n\n\nThis will combine all code blocks into a JavaScript code block at the bottom.\n\n\ud83d\udee0\ufe0f Advanced Configuration\n\nFull Options Example\n\nyaml title:\"Advanced Configuration\"\n---\ntitle: React Tutorial\ncombineCodeBlocks: true\ncombinedBlockLanguage: javascript\ncombinedBlockTitle: \"Complete React App\"\ncombinedBlockOptions:\n  includeBlockTitles: true      # Add section comments\n  includeOnlyLanguage: javascript  # Only JavaScript blocks\n  skipEmptyBlocks: true         # Ignore empty blocks\n  separator: \"\\n// ---\\n\"       # Between sections\n  excludePatterns: [\"test\", \"example\"]  # Skip these\n---\n\n\nConfiguration Options Explained\n\n| Option | Description | Default |\n|--------|-------------|---------|\n| combineCodeBlocks | Enable/disable feature | false |\n| combinedBlockLanguage | Language for syntax highlighting | text |\n| combinedBlockTitle | Custom title for combined block | Auto-generated |\n| includeBlockTitles | Add titles as comments | true |\n| includeOnlyLanguage | Filter by language | null (all) |\n| skipEmptyBlocks | Skip empty code blocks | true |\n| separator | Text between blocks | \\n// ---\\n |\n| excludePatterns | Title patterns to exclude | [] |\n\n\ud83d\udccb Real-World Examples\n\nTutorial Pattern\nPerfect for step-by-step tutorials:\n\n1. Setup section with imports\n2. Implementation with main code  \n3. Usage examples\n4. Combined complete code at the end\n\nAPI Documentation\n\nyaml title:\"API Documentation Config\"\n---\ncombineCodeBlocks: true\ncombinedBlockLanguage: python\ncombinedBlockTitle: \"Complete API Client\"\ncombinedBlockOptions:\n  includeOnlyLanguage: python\n  excludePatterns: [\"output\", \"response\"]\n---\n\n\n\ud83c\udfa8 Smart Features\n\nLanguage-Aware Comments\nThe system knows comment syntax for 30+ languages:\n- JavaScript/Java: // Comment\n- Python/Ruby: # Comment\n- HTML/XML: <!-- Comment -->\n- CSS: / Comment /\n- SQL: -- Comment\n\nFiltering Examples\n\nInclude Only JavaScript:\nyaml\ncombinedBlockOptions:\n  includeOnlyLanguage: javascript\n\n\nExclude Test Code:\nyaml\ncombinedBlockOptions:\n  excludePatterns: [\"test\", \"mock\", \"example\"]\n\n\nCustom Separators:\nyaml\ncombinedBlockOptions:\n  separator: \"\\n\\n/ ==================== /\\n\\n\"\n\n\n\ud83d\udca1 Best Practices\n\nUse Clear Titles\nGive your code blocks descriptive titles:\njavascript title:\"Database Connection\"\nconst db = await connect(config);\n\n\nOrganize by Purpose\nStructure your tutorial logically:\n1. Configuration\n2. Core functions\n3. Utilities\n4. Main execution\n\nLanguage Consistency\nWhen combining code:\n- Keep the same language throughout\n- Or use includeOnlyLanguage to filter\n- Set appropriate combinedBlockLanguage\n\n\ud83c\udfaf Use Cases\n\nComplete Applications\nBuild tutorials that result in a working app:\n- Show pieces step-by-step\n- Explain each section\n- Provide complete code at end\n\nConfiguration Files\nCombine multiple config snippets:\n- Environment variables\n- Database settings  \n- API configurations\n- Complete config file at end\n\nLearning Paths\nProgressive examples that build:\n- Basic concepts first\n- Advanced features next\n- Full implementation at end\n\n\ud83d\udd0d Visual Indicators\n\nThe combined code block has:\n- Distinctive Border: Dashed line separator\n- Special Styling: Stands out from regular blocks\n- Clear Title: Shows number of blocks combined\n- Full Features: Copy button, syntax highlighting, line numbers\n\n\u26a1 Workflow Tips\n\n1. Plan Your Structure: Organize code blocks logically\n2. Use Exclusions: Filter out example/test code\n3. Test the Output: Ensure combined code works\n4. Document Dependencies: Note requirements in text\n\n\ud83d\udd27 Troubleshooting\n\nNot Seeing Combined Block?\n- Check combineCodeBlocks: true in frontmatter\n- Ensure you have code blocks in the note\n- Verify no syntax errors in YAML\n\nWrong Blocks Included?\n- Check your filter settings\n- Use excludePatterns for unwanted blocks\n- Verify language specifications\n\n---\n\nNote: This very page has combined code blocks enabled! Check the bottom to see all the YAML configurations combined into one block. yaml Basic Setup ---\ntitle: My Tutorial\ncombineCodeBlocks: true\ncombinedBlockLanguage: javascript\n--- yaml Advanced Configuration ---\ntitle: React Tutorial\ncombineCodeBlocks: true\ncombinedBlockLanguage: javascript\ncombinedBlockTitle: \"Complete React App\"\ncombinedBlockOptions:\n  includeBlockTitles: true      # Add section comments\n  includeOnlyLanguage: javascript  # Only JavaScript blocks\n  skipEmptyBlocks: true         # Ignore empty blocks\n  separator: \"\\n// ---\\n\"       # Between sections\n  excludePatterns: [\"test\", \"example\"]  # Skip these\n--- yaml API Documentation Config ---\ncombineCodeBlocks: true\ncombinedBlockLanguage: python\ncombinedBlockTitle: \"Complete API Client\"\ncombinedBlockOptions:\n  includeOnlyLanguage: python\n  excludePatterns: [\"output\", \"response\"]\n--- combinedBlockOptions:\n  includeOnlyLanguage: javascript combinedBlockOptions:\n  excludePatterns: [\"test\", \"mock\", \"example\"] combinedBlockOptions:\n  separator: \"\\n\\n/* ==================== */\\n\\n\" javascript Database Connection const db = await connect(config);",
      "code_blocks_count": 7
    },
    {
      "path": "/notes/tutorials/features/bookmarks.md",
      "context": "tutorials",
      "metadata": {
        "title": "Bookmarks - Save Your Favorite Notes",
        "tags": [
          "tutorial",
          "bookmarks",
          "organization",
          "navigation"
        ],
        "created": "2025-01-18",
        "author": "Wiki Team",
        "description": "Learn how to bookmark important notes for quick access",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Keep your most important notes at your fingertips with the bookmarking system. Save, organize, and quickly access your favorite content.\n\n\n\n\nWhile viewing any note:\n1. Click the star icon (\u2606) in the n...",
      "searchable_content": "\nBookmarks - Save Your Favorite Notes\n\nKeep your most important notes at your fingertips with the bookmarking system. Save, organize, and quickly access your favorite content.\n\n\u2b50 Creating Bookmarks\n\nQuick Bookmark\nWhile viewing any note:\n1. Click the star icon (\u2606) in the note header\n2. The star fills (\u2605) indicating it's bookmarked\n3. Note is instantly added to your bookmarks\n\nKeyboard Shortcut\nPress Ctrl+D to toggle bookmark for current note\n\nVisual Feedback\n- Empty star (\u2606): Not bookmarked\n- Filled star (\u2605): Bookmarked\n- Animation: Smooth transition when toggling\n\n\ud83d\udcda Accessing Bookmarks\n\nFrom the Header\n1. Click the Bookmarks button in the header\n2. Dropdown shows all bookmarked notes\n3. Click any bookmark to open it\n\nQuick Access\n- Recent bookmarks appear at the top\n- Shows note title and description\n- Hover for full path tooltip\n\n\ud83d\uddc2\ufe0f Managing Bookmarks\n\nRemove Bookmarks\nSeveral ways to remove:\n1. Toggle: Click the star icon again on bookmarked note\n2. From List: Click the \u2715 next to bookmark in dropdown\n3. Keyboard: Press Ctrl+D on bookmarked note\n\nBookmark Limit\n- Default: 50 bookmarks maximum\n- Oldest bookmarks auto-removed when limit reached\n- Prevents bookmark overload\n\n\ud83c\udfaf Smart Features\n\nBookmark Persistence\n- Saved in browser's local storage\n- Survives page refreshes\n- Syncs across tabs instantly\n- No account needed\n\nBookmark Information\nEach bookmark stores:\n- Note title - For display\n- File path - For navigation\n- Description - Quick preview\n- Bookmark date - For sorting\n\nVisual Indicators\n- In File Tree: Bookmarked notes show star icon\n- In Search Results: Bookmarks highlighted\n- In Tabs: Tab shows bookmark indicator\n\n\ud83d\udca1 Use Cases\n\nQuick Reference\nBookmark these types of notes:\n- \ud83d\udccb Daily templates\n- \ud83d\udd27 Configuration guides\n- \ud83d\udcda Index/overview pages\n- \ud83c\udfaf Current projects\n- \ud83d\udcdd Frequently edited notes\n\nWorkflow Integration\n1. Project Work: Bookmark all project-related notes\n2. Learning Path: Bookmark tutorial sequence\n3. Daily Routine: Bookmark daily/weekly notes\n4. Reference: Bookmark cheat sheets and guides\n\n\u26a1 Pro Tips\n\nBookmark Organization\n1. Use descriptive titles - Easy to identify in list\n2. Add descriptions - Help future you remember why\n3. Regular cleanup - Remove outdated bookmarks\n4. Project grouping - Bookmark related notes together\n\nKeyboard Workflow\n1. Open note: Ctrl+K \u2192 search \u2192 Enter\n2. Bookmark it: Ctrl+D\n3. Access bookmarks: Click header dropdown\n4. Quick switching between bookmarked notes\n\n\ud83d\udd27 Troubleshooting\n\nBookmarks Not Saving?\n- Check browser's local storage isn't full\n- Ensure cookies/storage enabled\n- Try different browser if issues persist\n\nLost Bookmarks?\n- Bookmarks are browser-specific\n- Clear browser data removes bookmarks\n- Use same browser for consistency\n\nCan't Bookmark?\n- Ensure you're viewing a note\n- Check if bookmark limit reached\n- Try refreshing the page\n\n\ud83c\udfa8 Visual Design\n\nTheme Integration\n- Star color matches theme accent\n- Dropdown styled consistently\n- Smooth animations throughout\n- High contrast for accessibility\n\nMobile Experience\n- Touch-friendly bookmark button\n- Responsive dropdown menu\n- Same features as desktop\n- Swipe gestures supported\n\n\ud83d\udd0d Related Features\n\nComplements These Tools\n- Recent Files: Auto-tracked history\n- Search: Find any note quickly\n- Tags: Organize by topics\n- Wiki Links: Connect related notes\n\nBookmark vs Recent Files\n| Feature | Bookmarks | Recent Files |\n|---------|-----------|--------------|\n| Manual | \u2713 Yes | \u2717 Auto |\n| Persistent | \u2713 Forever |  Limited |\n| Limit | 50 notes | 20 notes |\n| Purpose | Favorites | History |\n\n\ud83d\udcbe Data Management\n\nExport Bookmarks\nCurrently bookmarks are browser-only. Future features may include:\n- Export to JSON\n- Sync across devices\n- Backup/restore options\n\nPrivacy\n- All bookmarks stored locally\n- No server communication\n- No tracking or analytics\n- Complete user control\n\n---\n\nStart bookmarking your important notes now! Click the star icon on this tutorial to try it out.",
      "code_blocks_count": 0
    },
    {
      "path": "/notes/tutorials/features/code-blocks.md",
      "context": "tutorials",
      "metadata": {
        "title": "Code Blocks & Syntax Highlighting",
        "tags": [
          "tutorial",
          "code",
          "markdown",
          "syntax-highlighting"
        ],
        "created": "2025-01-18",
        "author": "Wiki Team",
        "description": "Master code blocks with syntax highlighting, line numbers, and advanced features",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Display code beautifully with syntax highlighting for 100+ programming languages, line numbers, custom titles, and more.\n\n\n\n\nWrap code in triple backticks:\n\nmarkdown\n\nfunction hello() {\n    console.lo...",
      "searchable_content": "\nCode Blocks & Syntax Highlighting\n\nDisplay code beautifully with syntax highlighting for 100+ programming languages, line numbers, custom titles, and more.\n\n\ud83d\udcdd Basic Code Blocks\n\nSimple Code Block\nWrap code in triple backticks:\n\nmarkdown\n\nfunction hello() {\n    console.log(\"Hello, World!\");\n}\n\n\n\nWith Language Specification\nAdd the language for syntax highlighting:\n\nmarkdown\njavascript\nfunction hello() {\n    console.log(\"Hello, World!\");\n}\n\n\n\n\ud83c\udfa8 Syntax Highlighting\n\nSupported Languages\nThe wiki supports 100+ languages including:\n- Web: HTML, CSS, JavaScript, TypeScript\n- Backend: Python, Java, Go, Rust, C++\n- Data: SQL, JSON, YAML, XML\n- Scripting: Bash, PowerShell, Ruby\n- And many more!\n\nExamples\n\npython\nPython example\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\n\nsql\n-- SQL example\nSELECT users.name, COUNT(orders.id) as ordercount\nFROM users\nLEFT JOIN orders ON users.id = orders.userid\nGROUP BY users.id\nHAVING ordercount > 5;\n\n\n\ud83c\udff7\ufe0f Advanced Features\n\nCustom Titles\nAdd descriptive titles to code blocks:\n\nmarkdown\njavascript title:\"API Configuration\"\nconst config = {\n    apiUrl: 'https://api.example.com',\n    timeout: 5000\n};\n\n\n\nResult:\njavascript title:\"API Configuration\"\nconst config = {\n    apiUrl: 'https://api.example.com',\n    timeout: 5000\n};\n\n\nCollapsible Code Blocks\nMake long code blocks collapsible:\n\nmarkdown\npython title:\"Long Example\" collapse:true\nThis code block starts collapsed\ndef longfunction():\n    # ... lots of code ...\n    pass\n\n\n\n\ud83d\udd22 Line Numbers\n\nEnable Globally\n1. Open Settings (Ctrl+,)\n2. Toggle \"Show line numbers\"\n3. All code blocks now display line numbers\n\nBenefits\n- Easy reference to specific lines\n- Better for tutorials and documentation\n- Maintains alignment with word wrap\n\n\ud83d\udd27 Code Block Actions\n\nAction Buttons\nEvery code block has built-in action buttons:\n\n| Button | Function | Description |\n|--------|----------|-------------|\n| \ud83d\udccb Copy | Copy code to clipboard | Preserves formatting and newlines |\n| \u22ef More Options | Open dropdown menu | Access all code block actions |\n| \u25bc/\u25b2 Toggle | Expand/collapse code | For collapsible blocks only |\n\nDropdown Menu (\u22ef Button)\nClick the three dots (\u22ef) for these actions:\n\n- Copy Code - Copy to clipboard with preserved formatting\n- Select All Code - Select entire code block for manual copying\n- Language Info - Shows the programming language\n- Download as File - Save as structured markdown file\n- Wrap/Unwrap Lines - Toggle line wrapping for long lines\n\nRight-Click Context Menu\nRight-click anywhere on a code block for quick access to the same dropdown options.\n\nEnhanced Download Feature\nDownload as File creates a structured markdown file with:\n- Note title as main heading\n- Code block title as subheading (if present)\n- Metadata (language, source note, export date)\n- Code wrapped in proper markdown fences\n- Smart filename based on code block title and date\n\nLine Wrapping Control\nWrap/Unwrap Lines feature:\n- Enable wrapping - Long lines wrap to fit container\n- Disable wrapping - Horizontal scroll for long lines\n- Per-block control - Each code block can have different settings\n- Visual feedback - Toast notification confirms the change\n\n\ud83d\udca1 Best Practices\n\nChoose the Right Language\nAlways specify the language for better highlighting:\n- \u2705  javascript\n- \u274c  js (might work but less reliable)\n- \u274c  text (no highlighting)\n\nUse Descriptive Titles\nHelp readers understand the code's purpose:\nbash title:\"Install Dependencies\"\nnpm install express mongoose dotenv\n\n\nOrganize Long Code\nFor lengthy examples:\n1. Use collapsible blocks\n2. Break into multiple blocks with explanations\n3. Add titles to each section\n\n\ud83c\udfaf Special Features\n\nFile Names in Titles\nShow file paths in titles:\njavascript title:\"src/components/Header.jsx\"\nexport function Header() {\n    return <h1>My App</h1>;\n}\n\n\nTerminal Output\nUse bash or shell for command line:\nbash\n$ npm run build\nBuilding project...\n\u2713 Build complete!\n\n\nDiff Highlighting\nShow code changes:\ndiff\n- const old = \"red\";\n+ const new = \"green\";\n\n\n\u2699\ufe0f Settings & Customization\n\nLine Numbers Toggle\n- Global setting affects all code blocks\n- Applies immediately without refresh\n- CSS-based implementation (no JavaScript overhead)\n\nTheme Integration\n- Syntax colors adapt to your chosen theme\n- Dark themes have appropriate contrast\n- Light themes remain readable\n\n\ud83d\ude80 Pro Tips\n\n1. Language Aliases: Both yml and yaml work\n2. No Language: Use  text for plain text\n3. JSON Formatting: JSON is automatically pretty-printed\n4. Copy Preserves Format: Copied code maintains proper indentation\n\n\ud83d\udd0d Troubleshooting\n\nNo Syntax Highlighting?\n- Check if language is specified correctly\n- Some languages have multiple names (e.g., c++, cpp)\n- Use  text if language isn't supported\n\nLine Numbers Not Showing?\n- Verify setting is enabled\n- Refresh the page if needed\n- Check if theme supports line numbers\n\n---\n\nCode blocks are essential for technical documentation. Master these features to create beautiful, readable code examples!     # Python example\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2) -- SQL example\nSELECT users.name, COUNT(orders.id) as order_count\nFROM users\nLEFT JOIN orders ON users.id = orders.user_id\nGROUP BY users.id\nHAVING order_count > 5;   javascript API Configuration const config = {\n    apiUrl: 'https://api.example.com',\n    timeout: 5000\n};   bash Install Dependencies npm install express mongoose dotenv javascript src/components/Header.jsx export function Header() {\n    return <h1>My App</h1>;\n} $ npm run build\nBuilding project...\n\u2713 Build complete! - const old = \"red\";\n+ const new = \"green\";",
      "code_blocks_count": 15
    },
    {
      "path": "/notes/tutorials/features/split-view.md",
      "context": "tutorials",
      "metadata": {
        "title": "Split View",
        "tags": [
          "interface",
          "productivity",
          "tabs"
        ],
        "created": "2025-01-18",
        "author": "Wiki Admin",
        "description": "Work with multiple notes side-by-side using split view functionality",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Split view allows you to view and edit multiple notes side-by-side, dramatically improving your productivity when working with related content.\n\n\n\nThere are several ways to enable split view:\n\n\nClick ...",
      "searchable_content": "\nSplit View\n\nSplit view allows you to view and edit multiple notes side-by-side, dramatically improving your productivity when working with related content.\n\nActivating Split View\n\nThere are several ways to enable split view:\n\n\ud83d\uddb1\ufe0f Button Click\nClick the split view icon (two rectangles) in the header navigation bar.\n\n\u2328\ufe0f Keyboard Shortcut\nPress Ctrl+/ (Mac: \u2318+/) to toggle split view on and off.\n\nHow Split View Works\n\nWhen split view is enabled:\n\n1. Two Panes: Your workspace is divided into left and right panes\n2. Active Pane: One pane is \"active\" (highlighted with a colored border)\n3. Independent Content: Each pane can display different notes\n4. Resizable: Drag the divider to adjust pane sizes\n\nUsing Split View\n\n\ud83d\udccb Opening Notes\n- Click any note to open it in the active pane\n- Drag and drop notes from sidebar directly into any pane\n- Click a pane to make it active\n- Visual feedback: Panes highlight when dragging notes over them\n\n\ud83d\udccf Resizing Panes\n- Drag the divider between panes to adjust widths\n- Minimum width: 300px per pane\n- Visual feedback: Divider changes color on hover\n\n\ud83c\udfaf Active Pane\n- The active pane has a colored border\n- New notes open in the active pane\n- Click any pane to make it active\n\n\ud83d\uddb1\ufe0f Drag & Drop\n- Drag notes from the sidebar file tree into any pane\n- Visual feedback: Notes show grab cursor when draggable\n- Drop zones: Panes highlight with colored border during drag\n- Auto-activate: Dropping a note automatically makes that pane active\n\nUse Cases\n\n\ud83d\udcda Research & Writing\n- Open reference material in one pane\n- Write notes in the other pane\n\n\ud83d\udd17 Cross-Referencing\n- Compare different versions of documents\n- View related notes simultaneously\n\n\ud83d\udcd6 Learning\n- Tutorial in one pane\n- Practice notes in the other\n\n\ud83d\udee0\ufe0f Development\n- Documentation in one pane\n- Code examples in the other\n\nMobile Experience\n\nOn mobile devices:\n- Split view automatically becomes single pane\n- Only the active pane is shown\n- Tap to switch between panes\n\nTips & Tricks\n\n\u26a1 Efficiency Tips\n1. Bookmark frequently compared notes for quick access\n2. Use wiki links to jump between related content\n3. Resize panes based on content importance\n4. Focus mode works in split view too\n\n\ud83c\udfa8 Visual Organization\n- Different themes help distinguish panes\n- Use the table of contents in longer documents\n- Search within notes works in both panes\n\nDisabling Split View\n\nTo return to single-pane view:\n1. Click the split view button again\n2. The interface returns to normal layout\n3. Your current note remains active\n\nTechnical Notes\n\n\ud83e\udde0 Memory Management\n- Split view uses minimal additional memory\n- Each pane maintains its own scroll position\n- Tab system works independently in each pane\n\n\ud83d\udcbe Settings Persistence\n- Split view state is saved automatically\n- Pane sizes are remembered between sessions\n- Preferences sync across tabs\n\nSplit view transforms your note-taking workflow, making it easy to work with multiple documents efficiently!",
      "code_blocks_count": 0
    },
    {
      "path": "/notes/tutorials/getting-started/creating-notes.md",
      "context": "tutorials",
      "metadata": {
        "title": "Creating and Organizing Notes",
        "tags": [
          "tutorial",
          "getting-started",
          "markdown",
          "frontmatter"
        ],
        "created": "2025-01-18",
        "author": "Wiki Team",
        "description": "Learn how to create, structure, and organize your notes effectively",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Learn how to create well-structured notes with proper metadata, organize them effectively, and make them searchable.\n\n\n\n\nEvery note consists of two parts:\n1. Frontmatter: Metadata in YAML format\n2. Co...",
      "searchable_content": "\nCreating and Organizing Notes\n\nLearn how to create well-structured notes with proper metadata, organize them effectively, and make them searchable.\n\n\ud83d\udcdd Note Structure\n\nBasic Anatomy\nEvery note consists of two parts:\n1. Frontmatter: Metadata in YAML format\n2. Content: Your actual note in Markdown\n\nExample Note\n\nmarkdown\n---\ntitle: My First Note\ntags: [personal, ideas]\nauthor: Your Name\ncreated: 2025-01-18\ndescription: A brief description for search results\n---\n\nMy First Note\n\nYour content starts here...\n\n\n\ud83d\udccb Frontmatter Explained\n\nRequired Fields\n\nTitle\nThe display name for your note:\nyaml\ntitle: JavaScript Array Methods\n\n\nRecommended Fields\n\nTags\nCategorize your notes for easy filtering:\nyaml\ntags: [javascript, programming, tutorial]\n\n\nAuthor\nTrack who created the note:\nyaml\nauthor: John Doe\n\n\nCreated Date\nWhen the note was first written:\nyaml\ncreated: 2025-01-18\n\n\nDescription\nBrief summary for search results:\nyaml\ndescription: Complete guide to JavaScript array methods with examples\n\n\nOptional Fields\n\nUpdated Date\nTrack last modification:\nyaml\nupdated: 2025-01-19\n\n\nCategory\nAdditional organization:\nyaml\ncategory: tutorials\n\n\nStatus\nTrack note completion:\nyaml\nstatus: draft  # or 'complete', 'review'\n\n\n\ud83d\udcc1 File Organization\n\nDirectory Structure\nOrganize notes in logical folders:\n\nnotes/\n\u251c\u2500\u2500 personal/\n\u2502   \u251c\u2500\u2500 journal/\n\u2502   \u2514\u2500\u2500 ideas/\n\u251c\u2500\u2500 work/\n\u2502   \u251c\u2500\u2500 projects/\n\u2502   \u2514\u2500\u2500 meetings/\n\u251c\u2500\u2500 learning/\n\u2502   \u251c\u2500\u2500 courses/\n\u2502   \u2514\u2500\u2500 books/\n\u2514\u2500\u2500 reference/\n    \u251c\u2500\u2500 code-snippets/\n    \u2514\u2500\u2500 cheatsheets/\n\n\nNaming Conventions\n\nFile Names\n- Use descriptive names: docker-deployment-guide.md\n- Avoid spaces: use hyphens or underscores\n- Keep lowercase for consistency\n- Include dates for time-sensitive notes: 2025-01-18-meeting-notes.md\n\nFolder Names\n- Short and descriptive\n- Use singular or plural consistently\n- Group related content logically\n\n\ud83c\udff7\ufe0f Effective Tagging\n\nTag Strategy\n\nHierarchical Tags\nCreate tag hierarchies:\nyaml\ntags: [programming, programming/javascript, programming/javascript/react]\n\n\nConsistent Naming\n- Choose singular or plural: book vs books\n- Use consistent separators: machine-learning vs machinelearning\n- Document your conventions\n\nCommon Tag Categories\n- Topic: javascript, docker, react\n- Type: tutorial, reference, journal\n- Status: draft, complete, needs-review\n- Project: project-x, client-y\n\n\ud83c\udfa8 Content Best Practices\n\nUse Markdown Features\n\nHeadings for Structure\nmarkdown\nMain Title\nSection\nSubsection\n\n\nLists for Organization\nmarkdown\n- Bullet points for unordered items\n1. Numbered lists for sequences\n   - Nested items with indentation\n\n\nCode Blocks with Language\nmarkdown\njavascript\nconst example = \"Always specify the language\";\n\n\n\nLinks and References\nmarkdown\nExternal Link\n[[Internal Wiki Link]]\n\n\n\ud83d\udd0d Making Notes Searchable\n\nOptimize for Search\n\nUse Descriptive Titles\n- \u2705 \"Docker Compose Multi-Container Setup\"\n- \u274c \"Docker Notes\"\n\nInclude Keywords\nAdd relevant terms in your content naturally\n\nWrite Clear Descriptions\nThe description field appears in search results\n\nTag Thoroughly\nMore tags = easier to find\n\n\ud83d\udca1 Organization Tips\n\nPersonal Knowledge Management\n\nDaily Notes\nyaml\ntitle: Daily Note - 2025-01-18\ntags: [journal, daily]\n\n\nProject Documentation\nyaml\ntitle: Project X - Architecture Overview\ntags: [project-x, architecture, documentation]\n\n\nLearning Notes\nyaml\ntitle: React Hooks - Study Notes\ntags: [learning, react, javascript, frontend]\n\n\nContext-Based Organization\n\nUse Contexts\nTop-level folders as contexts:\n- personal/ - Private notes\n- work/ - Professional content\n- reference/ - Quick lookup materials\n- learning/ - Educational content\n\n\ud83d\ude80 Workflow Examples\n\nMeeting Notes Template\nmarkdown\n---\ntitle: Team Meeting - 2025-01-18\ntags: [meeting, team, project-x]\nauthor: Your Name\ncreated: 2025-01-18\n---\n\nTeam Meeting - 2025-01-18\n\nAttendees\n- John Doe\n- Jane Smith\n\nAgenda\n1. Project updates\n2. Blockers\n3. Next steps\n\nNotes\n...\n\nAction Items\n- [ ] Task 1 - @John\n- [ ] Task 2 - @Jane\n\n\nTechnical Documentation\nmarkdown\n---\ntitle: API Authentication Guide\ntags: [api, authentication, documentation]\nauthor: Tech Team\ncreated: 2025-01-18\nupdated: 2025-01-19\nstatus: complete\n---\n\nAPI Authentication Guide\n\nOverview\n...\n\nImplementation\n...\n\n\n\ud83d\udd27 Building the Index\n\nAfter creating or modifying notes:\nbash\nnpm run build\n\n\nThis updates the search index with your new content.\n\n---\n\nWell-organized notes are the foundation of an effective knowledge management system. Start with good structure, and your future self will thank you! ---\ntitle: My First Note\ntags: [personal, ideas]\nauthor: Your Name\ncreated: 2025-01-18\ndescription: A brief description for search results\n---\n\n# My First Note\n\nYour content starts here... title: JavaScript Array Methods tags: [javascript, programming, tutorial] author: John Doe created: 2025-01-18 description: Complete guide to JavaScript array methods with examples updated: 2025-01-19 category: tutorials status: draft  # or 'complete', 'review' notes/\n\u251c\u2500\u2500 personal/\n\u2502   \u251c\u2500\u2500 journal/\n\u2502   \u2514\u2500\u2500 ideas/\n\u251c\u2500\u2500 work/\n\u2502   \u251c\u2500\u2500 projects/\n\u2502   \u2514\u2500\u2500 meetings/\n\u251c\u2500\u2500 learning/\n\u2502   \u251c\u2500\u2500 courses/\n\u2502   \u2514\u2500\u2500 books/\n\u2514\u2500\u2500 reference/\n    \u251c\u2500\u2500 code-snippets/\n    \u2514\u2500\u2500 cheatsheets/ tags: [programming, programming/javascript, programming/javascript/react] # Main Title\n## Section\n### Subsection - Bullet points for unordered items\n1. Numbered lists for sequences\n   - Nested items with indentation   [External Link](https://example.com)\n[[Internal Wiki Link]] title: Daily Note - 2025-01-18\ntags: [journal, daily] title: Project X - Architecture Overview\ntags: [project-x, architecture, documentation] title: React Hooks - Study Notes\ntags: [learning, react, javascript, frontend] ---\ntitle: Team Meeting - 2025-01-18\ntags: [meeting, team, project-x]\nauthor: Your Name\ncreated: 2025-01-18\n---\n\n# Team Meeting - 2025-01-18\n\n## Attendees\n- John Doe\n- Jane Smith\n\n## Agenda\n1. Project updates\n2. Blockers\n3. Next steps\n\n## Notes\n...\n\n## Action Items\n- [ ] Task 1 - @John\n- [ ] Task 2 - @Jane ---\ntitle: API Authentication Guide\ntags: [api, authentication, documentation]\nauthor: Tech Team\ncreated: 2025-01-18\nupdated: 2025-01-19\nstatus: complete\n---\n\n# API Authentication Guide\n\n## Overview\n...\n\n## Implementation\n... npm run build",
      "code_blocks_count": 22
    },
    {
      "path": "/notes/tutorials/getting-started/welcome.md",
      "context": "tutorials",
      "metadata": {
        "title": "Welcome to Notes Wiki",
        "tags": [
          "tutorial",
          "getting-started"
        ],
        "created": "2025-01-18",
        "author": "Wiki Team",
        "description": "Your comprehensive guide to getting started with Notes Wiki",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Welcome to your personal knowledge management system! This guide will help you get started with Notes Wiki in just a few minutes.\n\n\n\n\n\n1. Navigate Notes: Click on any note in the sidebar to open it\n2....",
      "searchable_content": "\nWelcome to Notes Wiki\n\nWelcome to your personal knowledge management system! This guide will help you get started with Notes Wiki in just a few minutes.\n\n\ud83d\ude80 Quick Start\n\nFirst Steps\n\n1. Navigate Notes: Click on any note in the sidebar to open it\n2. Search Everything: Press Ctrl+K or / to search across all notes\n3. Open Multiple Tabs: Middle-click or Ctrl+click notes to open in new tabs\n4. Switch Themes: Press Ctrl+, to open settings and choose from 74 themes\n\nEssential Features at a Glance\n\n- \ud83d\udcd1 Multi-tab browsing - Work with multiple notes simultaneously\n- \ud83d\udd0d Powerful search - Find anything instantly with advanced operators\n- \ud83c\udfa8 70 themes - Customize your reading experience\n- \ud83d\udcf1 Fully responsive - Works on desktop, tablet, and mobile\n- \ud83d\udd12 Privacy-first - Everything runs locally in your browser\n\n\ud83d\udcc2 Understanding the Interface\n\nSidebar Navigation\n- Contexts: Top-level folders that organize your notes (Personal, Technical, etc.)\n- File Tree: Expandable folders showing your note structure\n- Recent Files: Quick access to recently viewed notes\n- Filter by Tags: Click tags to filter the file tree\n\nMain Content Area\n- Tabs: Each open note appears as a tab (drag to reorder)\n- Note Content: The main reading area with full markdown support\n- Table of Contents: Auto-generated outline for easy navigation\n- Reading Progress: Track your position in longer notes\n\nHeader Actions\n- Search (Ctrl+K): Global search across all notes\n- Context Filter: Switch between note categories\n- Settings (Ctrl+,): Customize your experience\n\n\ud83c\udfaf Core Concepts\n\nNotes Are Markdown Files\nAll notes are written in Markdown with YAML frontmatter:\n\nyaml\n---\ntitle: My Note Title\ntags: [tag1, tag2]\nauthor: Your Name\ncreated: 2025-01-18\n---\n\nNote content starts here\n\n\nEverything Is Searchable\nThe search indexes:\n- Note titles and content\n- Code blocks\n- Tags and metadata\n- File paths\n\nOffline-First Design\nOnce loaded, Notes Wiki works completely offline. Your notes are stored as simple markdown files that you can edit with any text editor.\n\n\ud83d\ude80 Next Steps\n\nExplore these tutorials to master Notes Wiki:\n\n1. [[../features/search-guide|Master the Search]] - Learn advanced search techniques\n2. [[../features/tab-management|Tab Management]] - Work efficiently with multiple notes\n3. [[../features/keyboard-shortcuts|Keyboard Shortcuts]] - Speed up your workflow\n4. [[../features/themes|Themes Gallery]] - Customize your appearance\n\n\ud83d\udca1 Pro Tips\n\n- Press ? anytime to see all keyboard shortcuts\n- Press F to enter focus mode for distraction-free reading\n- Use Ctrl+F to find text on the current page (browser's native find)\n- Drag and drop tabs to reorder them\n- Right-click tabs for more options\n\n\ud83c\udd98 Getting Help\n\n- Keyboard Shortcuts: Press ? to see all available shortcuts\n- This Tutorial: Return here anytime by clicking \"Welcome\" in the tutorials\n- Report Issues: Found a bug? Report it on our GitHub page\n\n---\n\nReady to dive in? Start by exploring the features tutorials or just begin taking notes. Welcome to your new knowledge management system! \ud83c\udf89 ---\ntitle: My Note Title\ntags: [tag1, tag2]\nauthor: Your Name\ncreated: 2025-01-18\n---\n\n# Note content starts here",
      "code_blocks_count": 1
    },
    {
      "path": "/notes/tutorials/features/images-media.md",
      "context": "tutorials",
      "metadata": {
        "title": "Image Usage Guide",
        "tags": [
          "documentation",
          "guide",
          "images"
        ],
        "created": "2025-01-06",
        "author": "Wiki Admin",
        "description": "How to add and use images in your notes",
        "updated": null,
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "This guide demonstrates how to add images to your notes using various methods and styling options.\n\n\n\n\nThe simplest way to add an image is using standard Markdown syntax:\n\nmarkdown\n!Alt text\n\n\nExample...",
      "searchable_content": "\nImage Usage Guide\n\nThis guide demonstrates how to add images to your notes using various methods and styling options.\n\nBasic Image Usage\n\nStandard Markdown Syntax\nThe simplest way to add an image is using standard Markdown syntax:\n\nmarkdown\n!Alt text\n\n\nExample:\nmarkdown\n!A beautiful sunset over the mountains\n\n\nHTML Image Syntax\nFor more control, use HTML img tags:\n\nhtml\n<img src=\"/images/example.jpg\" alt=\"Detailed description\" title=\"Hover tooltip text\">\n\n\nWith Click-to-Enlarge\nhtml\n<a href=\"/images/full-size/diagram.png\" target=\"blank\">\n  <img src=\"/images/thumbnails/diagram.png\" alt=\"System architecture diagram\">\n</a>\n\n\nImage Storage Organization\n\nRecommended Directory Structure\n\n/images/\n\u251c\u2500\u2500 notes/              # General note images\n\u251c\u2500\u2500 tutorials/          # Tutorial screenshots\n\u251c\u2500\u2500 reference/          # Charts, diagrams, references\n\u251c\u2500\u2500 projects/           # Project-specific images\n\u251c\u2500\u2500 screenshots/        # UI screenshots\n\u251c\u2500\u2500 diagrams/           # Technical diagrams\n\u251c\u2500\u2500 icons/             # Small icons and symbols\n\u251c\u2500\u2500 banners/           # Header/banner images\n\u251c\u2500\u2500 thumbnails/        # Smaller preview versions\n\u2514\u2500\u2500 originals/         # Full-resolution source images\n\n\nFile Naming Conventions\n- Use descriptive names: user-login-flow.png instead of img1.png\n- Include dimensions for variants: logo-256x256.png, logo-128x128.png\n- Use consistent format: project-namescreenshot2024-01-15.png\n\nImage Sizing and Alignment\n\nSize Control with Keywords\nUse size keywords in your alt text for automatic sizing:\n\nmarkdown\n!tiny: Small icon          # Max width: 100px\n!small: Medium image             # Max width: 300px  \n!medium: Standard image          # Max width: 600px\n!large: Full width image         # Max width: 900px\n!full: Container width           # 100% width\n!xlarge: Extra large             # Max width: 1200px\n\n\nAlignment Options\nControl image positioning with alignment keywords:\n\nmarkdown\n!left: Float left with text wrap\n!right: Float right with text wrap\n!center: Centered block image\n!inline: Inline with text\n\n\nCombining Size and Alignment\nmarkdown\n!left small: Small left-aligned image\n!right medium: Medium right-aligned image\n!center large: Large centered image\n\n\nCustom CSS Classes (HTML Method)\nhtml\n<img src=\"/images/example.jpg\" \n     alt=\"Description\" \n     class=\"img-responsive img-rounded img-shadow\"\n     style=\"max-width: 450px;\">\n\n\nAdvanced Image Layouts\n\nImages with Captions\nMultiple caption approaches:\n\nMethod 1: HTML Figure Element\nhtml\n<figure>\n  <img src=\"/images/architecture.png\" alt=\"System architecture overview\">\n  <figcaption>\n    <strong>Figure 1:</strong> High-level system architecture showing \n    microservices, databases, and external integrations.\n  </figcaption>\n</figure>\n\n\nMethod 2: Markdown with HTML Caption\nmarkdown\n!Database schema diagram\nFigure 2: Database relationship diagram showing all tables and foreign keys\n\n\nMethod 3: Enhanced Figure with Styling\nhtml\n<figure class=\"image-figure\">\n  <img src=\"/images/user-flow.png\" \n       alt=\"User registration and onboarding flow\" \n       title=\"Click to view full size\">\n  <figcaption>\n    <span class=\"figure-label\">User Flow Diagram</span><br>\n    Complete user journey from registration through first login, \n    including email verification and profile setup steps.\n  </figcaption>\n</figure>\n\n\nSide-by-Side Image Comparisons\nhtml\n<div class=\"image-comparison\">\n  <div class=\"comparison-item\">\n    <img src=\"/images/before.png\" alt=\"Before optimization\">\n    <p><strong>Before:</strong> Page load time 3.2 seconds</p>\n  </div>\n  <div class=\"comparison-item\">\n    <img src=\"/images/after.png\" alt=\"After optimization\">\n    <p><strong>After:</strong> Page load time 0.8 seconds</p>\n  </div>\n</div>\n\n\nImage Gallery Layout\nhtml\n<div class=\"image-gallery\">\n  <div class=\"gallery-item\">\n    <img src=\"/images/gallery/screenshot-1.png\" alt=\"Login screen\">\n    <span class=\"gallery-caption\">Login Interface</span>\n  </div>\n  <div class=\"gallery-item\">\n    <img src=\"/images/gallery/screenshot-2.png\" alt=\"Dashboard view\">\n    <span class=\"gallery-caption\">Main Dashboard</span>\n  </div>\n  <div class=\"gallery-item\">\n    <img src=\"/images/gallery/screenshot-3.png\" alt=\"Settings panel\">\n    <span class=\"gallery-caption\">Settings Panel</span>\n  </div>\n</div>\n\n\nImage Formats and Use Cases\n\nJPEG - Best for Photographs\nmarkdown\n!Mountain landscape photo\n\n- Use for: Photos, complex images with many colors\n- Compression: Lossy, smaller file sizes\n- Transparency: Not supported\n\nPNG - Best for Screenshots and Graphics\nmarkdown\n!User interface screenshot\n\n- Use for: Screenshots, logos, images with transparency\n- Compression: Lossless, larger file sizes\n- Transparency: Supported\n\nSVG - Best for Logos and Icons\nmarkdown\n!Company logo\n\n- Use for: Logos, icons, simple graphics\n- Scalability: Vector-based, infinite scaling\n- File size: Very small for simple graphics\n\nWebP - Modern Format\nhtml\n<picture>\n  <source srcset=\"/images/hero.webp\" type=\"image/webp\">\n  <img src=\"/images/hero.jpg\" alt=\"Hero image with fallback\">\n</picture>\n\n\nGIF - Animated Images\nmarkdown\n!Loading animation\n\n\nResponsive Image Techniques\n\nDifferent Sizes for Different Screens\nhtml\n<picture>\n  <source media=\"(max-width: 480px)\" srcset=\"/images/mobile/banner-480w.jpg\">\n  <source media=\"(max-width: 768px)\" srcset=\"/images/tablet/banner-768w.jpg\">\n  <source media=\"(max-width: 1200px)\" srcset=\"/images/desktop/banner-1200w.jpg\">\n  <img src=\"/images/desktop/banner-1200w.jpg\" alt=\"Responsive banner image\">\n</picture>\n\n\nHigh-DPI Display Support\nhtml\n<img src=\"/images/logo.png\" \n     srcset=\"/images/logo.png 1x, /images/logo@2x.png 2x\" \n     alt=\"Company logo\">\n\n\nLazy Loading for Performance\nhtml\n<img src=\"/images/placeholder.jpg\" \n     data-src=\"/images/large-image.jpg\" \n     alt=\"Large image with lazy loading\"\n     loading=\"lazy\">\n\n\nExternal vs Local Images\n\nLocal Images (Recommended)\nmarkdown\n<!-- Relative path from project root -->\n!Local screenshot\n\n<!-- Absolute path (if needed) -->\n!Local diagram\n\n\nExternal Images\nmarkdown\n<!-- Direct external URL -->\n!External image\n\n<!-- External with fallback -->\n!Profile photo\n\n\nCDN Images with Local Fallback\nhtml\n<img src=\"https://cdn.example.com/images/banner.jpg\" \n     alt=\"Banner image\" \n     onerror=\"this.src='/images/fallback/banner.jpg'\">\n\n\nAccessibility and SEO Optimization\n\nComprehensive Alt Text\nmarkdown\n<!-- Poor alt text -->\n!Image\n\n<!-- Good alt text -->\n!Bar chart showing 40% increase in user engagement over 6 months\n\n<!-- Context-specific alt text -->\n!Error: Form validation showing required email field highlighted in red\n\n\nTitle Attributes for Additional Context\nhtml\n<img src=\"/images/complex-diagram.png\" \n     alt=\"Database relationship diagram\" \n     title=\"Click to view full-size version with zoom capability\">\n\n\nARIA Labels for Enhanced Accessibility\nhtml\n<img src=\"/images/status-icon.png\" \n     alt=\"Success status\" \n     aria-label=\"Operation completed successfully\"\n     role=\"img\">\n\n\nDecorative Images\nhtml\n<!-- For purely decorative images -->\n<img src=\"/images/decorative-border.png\" alt=\"\" role=\"presentation\">\n\n\nImage Optimization Examples\n\nFile Size Optimization\nmarkdown\n<!-- Original: 2.5MB -->\n!Original photo\n\n<!-- Optimized: 250KB -->\n!Optimized photo\n\n<!-- Thumbnail: 15KB -->\n!Thumbnail preview\n\n\nProgressive Loading Strategy\nhtml\n<!-- Thumbnail loads first -->\n<img src=\"/images/thumbnails/preview.jpg\" \n     alt=\"Preview image\"\n     style=\"filter: blur(5px); transition: filter 0.3s;\">\n\n<!-- Full image loads in background -->\n<img src=\"/images/full/high-res.jpg\" \n     alt=\"Full resolution image\"\n     onload=\"this.previousElementSibling.style.filter='none';\"\n     style=\"position: absolute; opacity: 0; transition: opacity 0.3s;\">\n\n\nAdvanced Image Features\n\nImage Maps (Clickable Areas)\nhtml\n<img src=\"/images/office-layout.png\" alt=\"Office floor plan\" usemap=\"#office-map\">\n<map name=\"office-map\">\n  <area shape=\"rect\" coords=\"10,10,100,50\" href=\"#meeting-room\" alt=\"Conference Room A\">\n  <area shape=\"circle\" coords=\"150,75,25\" href=\"#kitchen\" alt=\"Kitchen Area\">\n  <area shape=\"poly\" coords=\"200,10,250,50,200,90,150,50\" href=\"#workspace\" alt=\"Open Workspace\">\n</map>\n\n\nImage Overlays and Annotations\nhtml\n<div class=\"image-container\">\n  <img src=\"/images/screenshot.png\" alt=\"Application interface\">\n  <div class=\"image-overlay\">\n    <div class=\"annotation\" style=\"top: 20%; left: 30%;\">\n      <span class=\"annotation-marker\">1</span>\n      <div class=\"annotation-tooltip\">Navigation menu</div>\n    </div>\n    <div class=\"annotation\" style=\"top: 50%; left: 70%;\">\n      <span class=\"annotation-marker\">2</span>\n      <div class=\"annotation-tooltip\">Main content area</div>\n    </div>\n  </div>\n</div>\n\n\nImage Carousels/Slideshows\nhtml\n<div class=\"image-slideshow\">\n  <div class=\"slide active\">\n    <img src=\"/images/slides/slide-1.jpg\" alt=\"Feature overview\">\n    <p class=\"slide-caption\">Main features and capabilities</p>\n  </div>\n  <div class=\"slide\">\n    <img src=\"/images/slides/slide-2.jpg\" alt=\"Implementation details\">\n    <p class=\"slide-caption\">Technical implementation</p>\n  </div>\n  <div class=\"slide\">\n    <img src=\"/images/slides/slide-3.jpg\" alt=\"Results and metrics\">\n    <p class=\"slide-caption\">Performance metrics and results</p>\n  </div>\n</div>\n\n\nExternal Images and Hosting\n\nGitHub Images\nmarkdown\n!README diagram\n\n\nGitLab Images  \nmarkdown\n!Architecture diagram\n\n\nImage Hosting Services\nmarkdown\n<!-- Imgur -->\n!Hosted image\n\n<!-- AWS S3 -->\n!S3 hosted\n\n<!-- Cloudinary -->\n!Cloudinary optimized\n\n\nBest Practices\n\n1. Use descriptive alt text - This helps with accessibility and SEO\n2. Optimize image sizes - Large images slow down page loading\n3. Use appropriate formats:\n   - JPEG for photographs\n   - PNG for screenshots and images with transparency\n   - SVG for logos and diagrams\n4. Organize images - Keep your images directory structure clean and logical\n\nImage Styling\n\nAll images automatically receive:\n- Rounded corners for a modern look\n- Subtle shadow on hover\n- Smooth transitions\n- Responsive sizing (never exceed container width)\n\nLive Example\n\nHere's a demonstration using a placeholder image:\n\n!Demo placeholder image\n\nExample Gallery\n\nHere's how you might create an image gallery using a combination of techniques:\n\nmarkdown\nProject Screenshots\n\n!small left: Login screen\nThe login screen features a clean, minimalist design with email and password fields.\n\n!small right: Dashboard view\nThe dashboard provides an overview of all key metrics and recent activity.\n\n<figure>\n  <img src=\"/images/projects/analytics.png\" alt=\"Analytics page showing graphs\">\n  <figcaption>The analytics page offers detailed insights with interactive charts and graphs.</figcaption>\n</figure>\n\n\nAlignment Examples\n\nLeft-aligned Image\n!left small: Sample image aligned to the left\nLorem ipsum dolor sit amet, consectetur adipiscing elit. This text wraps around the left-aligned image. The image is floated to the left with appropriate margins to create a nice visual flow. You can continue adding more text here and it will wrap around the image naturally.\n\nRight-aligned Image\n!right small: Sample image aligned to the right\nLorem ipsum dolor sit amet, consectetur adipiscing elit. This text wraps around the right-aligned image. The image is floated to the right with appropriate margins. This creates an interesting layout where text flows on the left side of the image.\n\nCentered Image with Caption\n<figure>\n  <img src=\"/images/notes/demo-placeholder.svg\" alt=\"medium: Centered demonstration image\">\n  <figcaption>This is a centered image with a caption. The caption provides additional context about the image content.</figcaption>\n</figure>\n\nTroubleshooting\n\nImage not showing?\n- Check the file path is correct\n- Ensure the image file exists in the /images/ directory\n- Verify the file extension matches (case-sensitive on some systems)\n\nImage too large?\n- Use the size keywords (small, medium, large)\n- Consider optimizing the image file itself\n- Use image compression tools before uploading\n\nText not wrapping properly?\n- Ensure you're using the correct alignment syntax\n- Add clear fixes after floated images if needed ![Alt text](path/to/image.jpg) ![A beautiful sunset over the mountains](/images/notes/sunset.jpg) <img src=\"/images/example.jpg\" alt=\"Detailed description\" title=\"Hover tooltip text\"> <a href=\"/images/full-size/diagram.png\" target=\"_blank\">\n  <img src=\"/images/thumbnails/diagram.png\" alt=\"System architecture diagram\">\n</a> /images/\n\u251c\u2500\u2500 notes/              # General note images\n\u251c\u2500\u2500 tutorials/          # Tutorial screenshots\n\u251c\u2500\u2500 reference/          # Charts, diagrams, references\n\u251c\u2500\u2500 projects/           # Project-specific images\n\u251c\u2500\u2500 screenshots/        # UI screenshots\n\u251c\u2500\u2500 diagrams/           # Technical diagrams\n\u251c\u2500\u2500 icons/             # Small icons and symbols\n\u251c\u2500\u2500 banners/           # Header/banner images\n\u251c\u2500\u2500 thumbnails/        # Smaller preview versions\n\u2514\u2500\u2500 originals/         # Full-resolution source images ![tiny: Small icon](/images/icons/settings.png)          # Max width: 100px\n![small: Medium image](/images/example.jpg)             # Max width: 300px  \n![medium: Standard image](/images/example.jpg)          # Max width: 600px\n![large: Full width image](/images/example.jpg)         # Max width: 900px\n![full: Container width](/images/example.jpg)           # 100% width\n![xlarge: Extra large](/images/example.jpg)             # Max width: 1200px ![left: Float left with text wrap](/images/example.jpg)\n![right: Float right with text wrap](/images/example.jpg)\n![center: Centered block image](/images/example.jpg)\n![inline: Inline with text](/images/small-icon.png) ![left small: Small left-aligned image](/images/thumb.jpg)\n![right medium: Medium right-aligned image](/images/screenshot.png)\n![center large: Large centered image](/images/banner.jpg) <img src=\"/images/example.jpg\" \n     alt=\"Description\" \n     class=\"img-responsive img-rounded img-shadow\"\n     style=\"max-width: 450px;\"> <figure>\n  <img src=\"/images/architecture.png\" alt=\"System architecture overview\">\n  <figcaption>\n    <strong>Figure 1:</strong> High-level system architecture showing \n    microservices, databases, and external integrations.\n  </figcaption>\n</figure> ![Database schema diagram](/images/database-schema.png)\n*Figure 2: Database relationship diagram showing all tables and foreign keys* <figure class=\"image-figure\">\n  <img src=\"/images/user-flow.png\" \n       alt=\"User registration and onboarding flow\" \n       title=\"Click to view full size\">\n  <figcaption>\n    <span class=\"figure-label\">User Flow Diagram</span><br>\n    Complete user journey from registration through first login, \n    including email verification and profile setup steps.\n  </figcaption>\n</figure> <div class=\"image-comparison\">\n  <div class=\"comparison-item\">\n    <img src=\"/images/before.png\" alt=\"Before optimization\">\n    <p><strong>Before:</strong> Page load time 3.2 seconds</p>\n  </div>\n  <div class=\"comparison-item\">\n    <img src=\"/images/after.png\" alt=\"After optimization\">\n    <p><strong>After:</strong> Page load time 0.8 seconds</p>\n  </div>\n</div> <div class=\"image-gallery\">\n  <div class=\"gallery-item\">\n    <img src=\"/images/gallery/screenshot-1.png\" alt=\"Login screen\">\n    <span class=\"gallery-caption\">Login Interface</span>\n  </div>\n  <div class=\"gallery-item\">\n    <img src=\"/images/gallery/screenshot-2.png\" alt=\"Dashboard view\">\n    <span class=\"gallery-caption\">Main Dashboard</span>\n  </div>\n  <div class=\"gallery-item\">\n    <img src=\"/images/gallery/screenshot-3.png\" alt=\"Settings panel\">\n    <span class=\"gallery-caption\">Settings Panel</span>\n  </div>\n</div> ![Mountain landscape photo](/images/landscapes/mountain-sunset.jpg) ![User interface screenshot](/images/screenshots/dashboard.png) ![Company logo](/images/logos/company-logo.svg) <picture>\n  <source srcset=\"/images/hero.webp\" type=\"image/webp\">\n  <img src=\"/images/hero.jpg\" alt=\"Hero image with fallback\">\n</picture> ![Loading animation](/images/animations/loading-spinner.gif) <picture>\n  <source media=\"(max-width: 480px)\" srcset=\"/images/mobile/banner-480w.jpg\">\n  <source media=\"(max-width: 768px)\" srcset=\"/images/tablet/banner-768w.jpg\">\n  <source media=\"(max-width: 1200px)\" srcset=\"/images/desktop/banner-1200w.jpg\">\n  <img src=\"/images/desktop/banner-1200w.jpg\" alt=\"Responsive banner image\">\n</picture> <img src=\"/images/logo.png\" \n     srcset=\"/images/logo.png 1x, /images/logo@2x.png 2x\" \n     alt=\"Company logo\"> <img src=\"/images/placeholder.jpg\" \n     data-src=\"/images/large-image.jpg\" \n     alt=\"Large image with lazy loading\"\n     loading=\"lazy\"> <!-- Relative path from project root -->\n![Local screenshot](/images/screenshots/interface.png)\n\n<!-- Absolute path (if needed) -->\n![Local diagram](../images/diagrams/flow-chart.svg) <!-- Direct external URL -->\n![External image](https://example.com/images/photo.jpg)\n\n<!-- External with fallback -->\n![Profile photo](https://avatars.githubusercontent.com/user123?s=200) <img src=\"https://cdn.example.com/images/banner.jpg\" \n     alt=\"Banner image\" \n     onerror=\"this.src='/images/fallback/banner.jpg'\"> <!-- Poor alt text -->\n![Image](/images/chart.png)\n\n<!-- Good alt text -->\n![Bar chart showing 40% increase in user engagement over 6 months](/images/engagement-chart.png)\n\n<!-- Context-specific alt text -->\n![Error: Form validation showing required email field highlighted in red](/images/form-error.png) <img src=\"/images/complex-diagram.png\" \n     alt=\"Database relationship diagram\" \n     title=\"Click to view full-size version with zoom capability\"> <img src=\"/images/status-icon.png\" \n     alt=\"Success status\" \n     aria-label=\"Operation completed successfully\"\n     role=\"img\"> <!-- For purely decorative images -->\n<img src=\"/images/decorative-border.png\" alt=\"\" role=\"presentation\"> <!-- Original: 2.5MB -->\n![Original photo](/images/originals/vacation-photo.jpg)\n\n<!-- Optimized: 250KB -->\n![Optimized photo](/images/optimized/vacation-photo-compressed.jpg)\n\n<!-- Thumbnail: 15KB -->\n![Thumbnail preview](/images/thumbnails/vacation-photo-thumb.jpg) <!-- Thumbnail loads first -->\n<img src=\"/images/thumbnails/preview.jpg\" \n     alt=\"Preview image\"\n     style=\"filter: blur(5px); transition: filter 0.3s;\">\n\n<!-- Full image loads in background -->\n<img src=\"/images/full/high-res.jpg\" \n     alt=\"Full resolution image\"\n     onload=\"this.previousElementSibling.style.filter='none';\"\n     style=\"position: absolute; opacity: 0; transition: opacity 0.3s;\"> <img src=\"/images/office-layout.png\" alt=\"Office floor plan\" usemap=\"#office-map\">\n<map name=\"office-map\">\n  <area shape=\"rect\" coords=\"10,10,100,50\" href=\"#meeting-room\" alt=\"Conference Room A\">\n  <area shape=\"circle\" coords=\"150,75,25\" href=\"#kitchen\" alt=\"Kitchen Area\">\n  <area shape=\"poly\" coords=\"200,10,250,50,200,90,150,50\" href=\"#workspace\" alt=\"Open Workspace\">\n</map> <div class=\"image-container\">\n  <img src=\"/images/screenshot.png\" alt=\"Application interface\">\n  <div class=\"image-overlay\">\n    <div class=\"annotation\" style=\"top: 20%; left: 30%;\">\n      <span class=\"annotation-marker\">1</span>\n      <div class=\"annotation-tooltip\">Navigation menu</div>\n    </div>\n    <div class=\"annotation\" style=\"top: 50%; left: 70%;\">\n      <span class=\"annotation-marker\">2</span>\n      <div class=\"annotation-tooltip\">Main content area</div>\n    </div>\n  </div>\n</div> <div class=\"image-slideshow\">\n  <div class=\"slide active\">\n    <img src=\"/images/slides/slide-1.jpg\" alt=\"Feature overview\">\n    <p class=\"slide-caption\">Main features and capabilities</p>\n  </div>\n  <div class=\"slide\">\n    <img src=\"/images/slides/slide-2.jpg\" alt=\"Implementation details\">\n    <p class=\"slide-caption\">Technical implementation</p>\n  </div>\n  <div class=\"slide\">\n    <img src=\"/images/slides/slide-3.jpg\" alt=\"Results and metrics\">\n    <p class=\"slide-caption\">Performance metrics and results</p>\n  </div>\n</div> ![README diagram](https://raw.githubusercontent.com/username/repo/main/docs/diagram.png) ![Architecture diagram](https://gitlab.com/username/project/-/raw/main/docs/architecture.png) <!-- Imgur -->\n![Hosted image](https://i.imgur.com/AbCdEfG.png)\n\n<!-- AWS S3 -->\n![S3 hosted](https://my-bucket.s3.amazonaws.com/images/photo.jpg)\n\n<!-- Cloudinary -->\n![Cloudinary optimized](https://res.cloudinary.com/account/image/upload/v1234/sample.jpg) ### Project Screenshots\n\n![small left: Login screen](/images/projects/login.png)\nThe login screen features a clean, minimalist design with email and password fields.\n\n![small right: Dashboard view](/images/projects/dashboard.png)\nThe dashboard provides an overview of all key metrics and recent activity.\n\n<figure>\n  <img src=\"/images/projects/analytics.png\" alt=\"Analytics page showing graphs\">\n  <figcaption>The analytics page offers detailed insights with interactive charts and graphs.</figcaption>\n</figure>",
      "code_blocks_count": 38
    },
    {
      "path": "/notes/tutorials/features/themes.md",
      "context": "tutorials",
      "metadata": {
        "title": "Theme System Guide",
        "tags": [
          "themes",
          "customization",
          "styling",
          "interface",
          "preferences"
        ],
        "created": "2025-01-06",
        "author": "Wiki Admin",
        "description": "Complete guide to the 74 professional themes, favorites system, and customization options",
        "updated": "2025-06-24",
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Master the Notes Wiki's powerful theme system with 74 professional themes organized in 10 categories, theme favorites, and advanced customization options.\n\n\n\n\n1. Click the theme button (\ud83c\udfa8) in the head...",
      "searchable_content": "\nTheme System Guide\n\nMaster the Notes Wiki's powerful theme system with 74 professional themes organized in 10 categories, theme favorites, and advanced customization options.\n\n\ud83c\udfa8 Theme Basics\n\nOpening the Theme Picker\n1. Click the theme button (\ud83c\udfa8) in the header\n2. Use keyboard shortcut - Press <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>T</kbd>\n3. Settings menu - Go to Settings \u2192 Appearance \u2192 Themes\n\nApplying Themes\n- Click any theme card to apply it instantly\n- Hover for preview - See live preview without applying\n- Right-click for options - Access theme context menu\n\n\u2b50 Theme Favorites System\n\nAdding to Favorites\n- Right-click any theme \u2192 \"Add to Favorites\"\n- Click the star icon (appears on favorited themes)\n- Theme context menu \u2192 \"Add to Favorites\"\n\nManaging Favorites\n- Favorite themes show a star in the top-left corner\n- Filter to favorites only using the favorites button\n- Remove from favorites by right-clicking \u2192 \"Remove from Favorites\"\n\nBenefits\n- Quick access to your preferred themes\n- Organized workflow for frequently used themes\n- Persistent across sessions - favorites are saved\n\n\ud83c\udfaf Theme Context Menu\n\nRight-click any theme card for these options:\n\n| Action | Description |\n|--------|-------------|\n| Apply Theme | Set as current theme immediately |\n| Add/Remove Favorites | Toggle favorite status with star indicator |\n| Preview Theme | Temporary preview with automatic revert |\n\n\ud83d\udcf1 Complete Theme Collection (74 Themes)\n\n\u2728 Classic Themes\n- Light - Clean, minimal light theme for daytime reading\n- Dark - Comfortable dark theme for extended coding sessions\n\n\ud83c\udfaf Editor-Inspired Themes\n- VSCode Dark Plus - The beloved VS Code default dark theme\n- One Dark Pro - Atom's iconic dark theme with enhanced colors\n- Monokai - The classic Sublime Text theme with vibrant syntax colors\n- Palenight - Material Theme's elegant purple-tinted dark theme\n- Material Ocean - Deep blue Material Design theme\n- Material Darker - Darker variant of Material theme\n- Material Palenight - Purple-hued Material theme variant\n\n\ud83c\udf38 Catppuccin Collection\n- Catppuccin Mocha - Warm, cozy dark theme with soft pastels\n- Catppuccin Latte - Light, cream-colored theme for bright environments\n\n\ud83c\udf39 Ros\u00e9 Pine Collection  \n- Ros\u00e9 Pine - Soho vibes with natural pine and faux fur tones\n- Ros\u00e9 Pine Dawn - Light variant with warm morning colors\n\n\ud83d\udc19 GitHub Themes\n- GitHub Light - GitHub's clean, professional light theme\n- GitHub Dark - GitHub's modern dark theme\n\n\ud83c\udf0a Solarized Collection\n- Solarized Light - Precision colors for machines and people (light)\n- Solarized Dark - The dark variant of the scientifically designed palette\n\n\ud83c\udfd4\ufe0f Nordic Themes\n- Nord - Arctic, north-bluish color palette inspired by the beauty of the arctic\n- Nordic - Scandinavian-inspired minimal theme\n\n\ud83c\udf42 Gruvbox Collection\n- Gruvbox Dark - Retro groove with warm, earthy dark colors\n- Gruvbox Light - Light variant with vintage paper tones\n\n\ud83c\udf03 Tokyo Night Collection\n- Tokyo Night - Inspired by the neon lights of Tokyo at night\n\n\ud83c\udfa8 Ayu Collection\n- Ayu Dark - Modern dark theme with carefully balanced colors\n- Ayu Mirage - Perfect balance between light and dark with muted colors\n- Ayu Light - Clean, bright theme with excellent contrast\n\n\ud83c\udf32 Nature-Inspired Themes\n- Everforest Dark - Forest-inspired theme with natural green tones\n- Kanagawa - Japanese aesthetic inspired by \"The Great Wave\"\n- Zenburn - Low contrast theme designed to reduce eye strain\n\n\u26a1 High-Tech Themes\n- Matrix - Enter the digital rain with green-on-black cyberpunk vibes\n- Cyberpunk - Neon-soaked future aesthetic with electric colors\n- 2077 - Inspired by futuristic cityscapes and neon lights\n- Hackthebox - Hacker terminal aesthetic with green accent colors\n\n\ud83c\udf08 Colorful & Unique Themes\n- Vaporwave - 80s retro-futuristic vibes with pink and purple gradients\n- Hotdog Stand - Windows 3.1 classic with bold red and yellow contrast\n- Shades of Purple - Rich purple theme with excellent syntax highlighting\n- Witch Hazel - Mystical purple theme with magical color combinations\n\n\ud83c\udf19 Tomorrow Collection\n- Tomorrow Night - Part of the popular Tomorrow theme family\n\n\ud83d\udc99 Blue-Tinted Themes\n- Cobalt2 - Wes Bos's popular blue-based dark theme\n- Bluloco Dark - Blue-focused dark theme with vibrant syntax colors\n- Bluloco Light - Light variant with blue accents\n- Spacegray - Space-inspired gray-blue theme\n\n\u2744\ufe0f Winter Themes\n- Winter Is Coming Dark - Dark theme inspired by winter landscapes\n- Winter Is Coming Light - Light winter theme with cool tones\n\n\ud83c\udfae Gaming & Entertainment\n- Lucario - Pok\u00e9mon-inspired blue and steel theme\n- Oxocarbon - IBM's modern design language theme\n- Noctis - Night-time inspired dark theme\n- Thinkultra - Minimalist theme with clean typography\n\n\ud83c\udfad Specialized Themes  \n- Atom One Light - Atom's default light theme\n- Protonmail - Inspired by ProtonMail's clean interface\n\nHow to Test\n\n1. Open the theme picker (sun/moon icon in header)\n2. Hover over each theme to preview it\n3. Click to apply the theme permanently\n4. Check that all code blocks below render correctly\n\nJavaScript Example\n\njavascript title:\"JavaScript Class Example\"\n// ES6 Class with various syntax elements\nclass ThemeManager {\n    constructor(options = {}) {\n        this.themes = options.themes || [];\n        this.currentTheme = options.defaultTheme || 'light';\n        this.callbacks = new Map();\n        this.initialized = false;\n    }\n\n    async initialize() {\n        try {\n            // Load saved theme from localStorage\n            const saved = localStorage.getItem('theme');\n            if (saved && this.themes.includes(saved)) {\n                this.currentTheme = saved;\n            }\n            \n            // Apply the theme\n            await this.applyTheme(this.currentTheme);\n            this.initialized = true;\n            \n            return { success: true, theme: this.currentTheme };\n        } catch (error) {\n            console.error('Failed to initialize theme:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    applyTheme(themeName) {\n        // Validate theme exists\n        if (!this.themes.includes(themeName)) {\n            throw new Error(Theme \"${themeName}\" not found);\n        }\n\n        // Apply theme to DOM\n        document.documentElement.setAttribute('data-theme', themeName);\n        \n        // Save preference\n        localStorage.setItem('theme', themeName);\n        \n        // Trigger callbacks\n        this.callbacks.forEach(callback => callback(themeName));\n    }\n\n    // Arrow function property\n    onChange = (callback) => {\n        const id = Date.now();\n        this.callbacks.set(id, callback);\n        return () => this.callbacks.delete(id);\n    }\n}\n\n// Usage\nconst manager = new ThemeManager({\n    themes: ['light', 'dark', 'monokai'],\n    defaultTheme: 'dark'\n});\n\nmanager.initialize().then(result => {\n    console.log('Theme initialized:', result);\n});\n\n\nPython Example\n\npython title:\"Python Data Processing\"\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional, Union\nimport asyncio\n\nclass DataProcessor:\n    \"\"\"Process and analyze time series data with various transformations.\"\"\"\n    \n    def init(self, datapath: str, cachesize: int = 1000):\n        self.datapath = datapath\n        self.cachesize = cachesize\n        self.cache: Dict[str, pd.DataFrame] = {}\n        self.metadata = {\n            'created': datetime.now(),\n            'version': '1.0.0',\n            'author': 'System'\n        }\n    \n    @property\n    def iscached(self) -> bool:\n        \"\"\"Check if data is currently cached.\"\"\"\n        return len(self.cache) > 0\n    \n    async def loaddataasync(self, \n                            filepath: str, \n                            columns: Optional[List[str]] = None) -> pd.DataFrame:\n        \"\"\"Asynchronously load data from CSV file.\"\"\"\n        try:\n            # Simulate async operation\n            await asyncio.sleep(0.1)\n            \n            df = pd.readcsv(filepath, usecols=columns)\n            \n            # Cache the result\n            if len(self.cache) < self.cachesize:\n                self.cache[filepath] = df\n            \n            return df\n            \n        except FileNotFoundError as e:\n            print(f\"Error: File {filepath} not found\")\n            raise e\n        except Exception as e:\n            print(f\"Unexpected error: {str(e)}\")\n            raise\n    \n    def processtimeseries(self, \n                          df: pd.DataFrame, \n                          windowsize: int = 7,\n                          aggregation: str = 'mean') -> pd.DataFrame:\n        \"\"\"Apply rolling window calculations to time series data.\"\"\"\n        \n        # Validate inputs\n        if windowsize <= 0:\n            raise ValueError(\"Window size must be positive\")\n        \n        validaggregations = ['mean', 'sum', 'min', 'max', 'std']\n        if aggregation not in validaggregations:\n            raise ValueError(f\"Aggregation must be one of {validaggregations}\")\n        \n        # Apply rolling calculation\n        numericcols = df.selectdtypes(include=[np.number]).columns\n        \n        result = df.copy()\n        for col in numericcols:\n            if aggregation == 'mean':\n                result[f'{col}rolling{windowsize}d'] = df[col].rolling(windowsize).mean()\n            elif aggregation == 'sum':\n                result[f'{col}rolling{windowsize}d'] = df[col].rolling(windowsize).sum()\n            # ... etc\n        \n        return result\n    \n    @staticmethod\n    def generatesampledata(nrows: int = 1000) -> pd.DataFrame:\n        \"\"\"Generate sample time series data for testing.\"\"\"\n        dates = pd.daterange(\n            start='2024-01-01', \n            periods=nrows, \n            freq='D'\n        )\n        \n        data = {\n            'date': dates,\n            'value': np.random.randn(nrows).cumsum() + 100,\n            'volume': np.random.randint(1000, 10000, nrows),\n            'category': np.random.choice(['A', 'B', 'C'], nrows)\n        }\n        \n        return pd.DataFrame(data)\n\nExample usage\nif name == \"main\":\n    processor = DataProcessor(\"./data\")\n    \n    # Generate and process sample data\n    df = DataProcessor.generatesampledata(365)\n    processed = processor.processtimeseries(df, windowsize=30)\n    \n    print(f\"Data shape: {processed.shape}\")\n    print(f\"Columns: {list(processed.columns)}\")\n\n\nHTML/CSS Example\n\nhtml title:\"Responsive Card Component\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Theme Card Component</title>\n    <style>\n        / CSS Custom Properties for theming /\n        :root {\n            --card-bg: #ffffff;\n            --card-border: #e5e7eb;\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            --text-primary: #111827;\n            --text-secondary: #6b7280;\n            --accent-color: #3b82f6;\n        }\n\n        / Dark theme override /\n        [data-theme=\"dark\"] {\n            --card-bg: #1f2937;\n            --card-border: #374151;\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n            --text-primary: #f3f4f6;\n            --text-secondary: #9ca3af;\n            --accent-color: #60a5fa;\n        }\n\n        / Card component styles /\n        .card {\n            background-color: var(--card-bg);\n            border: 1px solid var(--card-border);\n            border-radius: 0.5rem;\n            box-shadow: var(--card-shadow);\n            padding: 1.5rem;\n            margin: 1rem;\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\n        }\n\n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);\n        }\n\n        .card-title {\n            color: var(--text-primary);\n            font-size: 1.25rem;\n            font-weight: 600;\n            margin: 0 0 0.5rem 0;\n        }\n\n        .card-description {\n            color: var(--text-secondary);\n            line-height: 1.5;\n            margin: 0 0 1rem 0;\n        }\n\n        .card-link {\n            color: var(--accent-color);\n            text-decoration: none;\n            font-weight: 500;\n            display: inline-flex;\n            align-items: center;\n            gap: 0.25rem;\n        }\n\n        .card-link:hover {\n            text-decoration: underline;\n        }\n\n        / Responsive grid /\n        .card-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 1rem;\n            padding: 1rem;\n        }\n\n        @media (max-width: 768px) {\n            .card {\n                padding: 1rem;\n            }\n            \n            .card-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"card-grid\">\n        <article class=\"card\">\n            <h2 class=\"card-title\">Theme System</h2>\n            <p class=\"card-description\">\n                A comprehensive theming system with CSS custom properties \n                that supports multiple color schemes and automatic theme switching.\n            </p>\n            <a href=\"#\" class=\"card-link\">\n                Learn more\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                    <path d=\"M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z\"/>\n                </svg>\n            </a>\n        </article>\n    </div>\n</body>\n</html>\n\n\nBash/Shell Example\n\nbash title:\"Deployment Script\"\n#!/bin/bash\nTheme deployment and build script\n\nset -euo pipefail\n\nColor output helpers\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\nConfiguration\nTHEMESDIR=\"./themes\"\nBUILDDIR=\"./dist\"\nTHEMEFILES=(\n    \"light.css\"\n    \"dark.css\"\n    \"vscode-dark-plus.css\"\n    \"monokai.css\"\n    \"dracula.css\"\n    \"one-dark-pro.css\"\n    \"solarized-light.css\"\n    \"solarized-dark.css\"\n    \"github-light.css\"\n    \"github-dark.css\"\n    \"nord.css\"\n    \"gruvbox-dark.css\"\n    \"gruvbox-light.css\"\n    \"tokyo-night.css\"\n    \"palenight.css\"\n)\n\nFunction to print colored output\nlog() {\n    local level=$1\n    shift\n    case \"$level\" in\n        \"error\")\n            echo -e \"${RED}[ERROR]${NC} $\" >&2\n            ;;\n        \"success\")\n            echo -e \"${GREEN}[SUCCESS]${NC} $\"\n            ;;\n        \"warning\")\n            echo -e \"${YELLOW}[WARNING]${NC} $\"\n            ;;\n        )\n            echo \"[INFO] $\"\n            ;;\n    esac\n}\n\nValidate theme files exist\nvalidatethemes() {\n    log \"info\" \"Validating theme files...\"\n    \n    local missingthemes=()\n    \n    for theme in \"${THEMEFILES[@]}\"; do\n        if [[ ! -f \"$THEMESDIR/$theme\" ]]; then\n            missingthemes+=(\"$theme\")\n        fi\n    done\n    \n    if [[ ${#missingthemes[@]} -gt 0 ]]; then\n        log \"error\" \"Missing theme files:\"\n        printf '%s\\n' \"${missingthemes[@]}\"\n        return 1\n    fi\n    \n    log \"success\" \"All ${#THEMEFILES[@]} theme files found\"\n    return 0\n}\n\nMinify CSS files\nminifythemes() {\n    log \"info\" \"Minifying theme files...\"\n    \n    # Create build directory if it doesn't exist\n    mkdir -p \"$BUILDDIR/themes\"\n    \n    for theme in \"${THEMEFILES[@]}\"; do\n        local input=\"$THEMESDIR/$theme\"\n        local output=\"$BUILDDIR/themes/${theme%.css}.min.css\"\n        \n        # Simple CSS minification (remove comments and extra whitespace)\n        if command -v csso &> /dev/null; then\n            csso \"$input\" -o \"$output\"\n        else\n            # Fallback: basic minification with sed\n            sed -e 's/\\/\\[^]\\\\///g' \\\n                -e 's/\\s\\+/ /g' \\\n                -e 's/:\\s/:/g' \\\n                -e 's/;\\s/;/g' \\\n                -e 's/{\\s/{/g' \\\n                -e 's/}\\s/}/g' \\\n                -e 's/\\n//g' \\\n                \"$input\" > \"$output\"\n        fi\n        \n        log \"success\" \"Minified: ${theme%.css}.min.css\"\n    done\n}\n\nGenerate theme metadata\ngeneratemetadata() {\n    log \"info\" \"Generating theme metadata...\"\n    \n    cat > \"$BUILDDIR/themes/themes.json\" << EOF\n{\n    \"themes\": [\n        $(for i in \"${!THEMEFILES[@]}\"; do\n            theme=\"${THEMEFILES[$i]}\"\n            themeid=\"${theme%.css}\"\n            \n            # Add comma except for last item\n            if [[ $i -lt $((${#THEMEFILES[@]} - 1)) ]]; then\n                echo \"        \\\"$themeid\\\",\"\n            else\n                echo \"        \\\"$themeid\\\"\"\n            fi\n        done)\n    ],\n    \"count\": ${#THEMEFILES[@]},\n    \"generated\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\"\n}\nEOF\n    \n    log \"success\" \"Generated theme metadata\"\n}\n\nMain execution\nmain() {\n    log \"info\" \"Starting theme build process...\"\n    \n    # Validate themes\n    if ! validatethemes; then\n        log \"error\" \"Theme validation failed\"\n        exit 1\n    fi\n    \n    # Minify themes\n    minifythemes\n    \n    # Generate metadata\n    generatemetadata\n    \n    log \"success\" \"Theme build completed successfully!\"\n    log \"info\" \"Output directory: $BUILDDIR\"\n}\n\nRun main function\nmain \"$@\"\n\n\nJSON Configuration Example\n\njson title:\"Theme Configuration\"\n{\n    \"themes\": {\n        \"light\": {\n            \"id\": \"light\",\n            \"name\": \"Light\",\n            \"description\": \"Clean light theme for daytime use\",\n            \"type\": \"light\",\n            \"colors\": {\n                \"primary\": \"#3b82f6\",\n                \"secondary\": \"#10b981\",\n                \"background\": \"#ffffff\",\n                \"surface\": \"#f9fafb\",\n                \"text\": {\n                    \"primary\": \"#111827\",\n                    \"secondary\": \"#6b7280\",\n                    \"muted\": \"#9ca3af\"\n                },\n                \"syntax\": {\n                    \"keyword\": \"#2563eb\",\n                    \"string\": \"#059669\",\n                    \"number\": \"#dc2626\",\n                    \"function\": \"#7c3aed\",\n                    \"comment\": \"#6b7280\"\n                }\n            },\n            \"customizations\": {\n                \"scrollbar\": true,\n                \"selection\": true,\n                \"forms\": true\n            }\n        },\n        \"dracula\": {\n            \"id\": \"dracula\",\n            \"name\": \"Dracula\",\n            \"description\": \"Dark theme with vibrant colors\",\n            \"type\": \"dark\",\n            \"colors\": {\n                \"primary\": \"#bd93f9\",\n                \"secondary\": \"#50fa7b\",\n                \"background\": \"#282a36\",\n                \"surface\": \"#21222c\",\n                \"text\": {\n                    \"primary\": \"#f8f8f2\",\n                    \"secondary\": \"#6272a4\",\n                    \"muted\": \"#6272a4\"\n                },\n                \"syntax\": {\n                    \"keyword\": \"#ff79c6\",\n                    \"string\": \"#f1fa8c\",\n                    \"number\": \"#bd93f9\",\n                    \"function\": \"#50fa7b\",\n                    \"comment\": \"#6272a4\"\n                }\n            },\n            \"customizations\": {\n                \"scrollbar\": true,\n                \"selection\": true,\n                \"forms\": true\n            }\n        }\n    },\n    \"defaultTheme\": \"light\",\n    \"autoDetect\": true,\n    \"transitions\": {\n        \"enabled\": true,\n        \"duration\": \"250ms\",\n        \"easing\": \"ease-in-out\"\n    }\n}\n\n\nSQL Example\n\nsql title:\"Theme Usage Analytics\"\n-- Create tables for theme usage tracking\nCREATE TABLE IF NOT EXISTS themeusage (\n    id SERIAL PRIMARY KEY,\n    userid INTEGER NOT NULL,\n    themeid VARCHAR(50) NOT NULL,\n    appliedat TIMESTAMP DEFAULT CURRENTTIMESTAMP,\n    sessionduration INTEGER, -- in seconds\n    devicetype VARCHAR(20),\n    browser VARCHAR(50),\n    systemtheme VARCHAR(10) -- 'light' or 'dark'\n);\n\n-- Index for performance\nCREATE INDEX idxthemeusageusertheme ON themeusage(userid, themeid);\nCREATE INDEX idxthemeusageappliedat ON themeusage(appliedat);\n\n-- View for theme popularity\nCREATE OR REPLACE VIEW themepopularity AS\nSELECT \n    themeid,\n    COUNT(DISTINCT userid) as uniqueusers,\n    COUNT() as totalapplications,\n    AVG(sessionduration) as avgsessionduration,\n    MAX(appliedat) as lastused\nFROM themeusage\nWHERE appliedat >= CURRENTDATE - INTERVAL '30 days'\nGROUP BY themeid\nORDER BY uniqueusers DESC;\n\n-- Function to get user's theme history\nCREATE OR REPLACE FUNCTION getuserthemehistory(puserid INTEGER)\nRETURNS TABLE (\n    themeid VARCHAR(50),\n    appliedat TIMESTAMP,\n    durationhours NUMERIC,\n    devicetype VARCHAR(20)\n) AS $$\nBEGIN\n    RETURN QUERY\n    WITH themesessions AS (\n        SELECT \n            tu.themeid,\n            tu.appliedat,\n            tu.devicetype,\n            LEAD(tu.appliedat) OVER (\n                PARTITION BY tu.userid \n                ORDER BY tu.appliedat\n            ) as nextappliedat\n        FROM themeusage tu\n        WHERE tu.userid = puserid\n    )\n    SELECT \n        ts.themeid,\n        ts.appliedat,\n        ROUND(\n            EXTRACT(EPOCH FROM (\n                COALESCE(ts.nextappliedat, CURRENTTIMESTAMP) - ts.appliedat\n            )) / 3600, \n            2\n        ) as durationhours,\n        ts.devicetype\n    FROM themesessions ts\n    ORDER BY ts.appliedat DESC\n    LIMIT 50;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Query to find most popular themes by time of day\nWITH hourlyusage AS (\n    SELECT \n        themeid,\n        EXTRACT(HOUR FROM appliedat) as hourofday,\n        COUNT() as usagecount\n    FROM themeusage\n    WHERE appliedat >= CURRENTDATE - INTERVAL '7 days'\n    GROUP BY themeid, hourofday\n),\nrankedthemes AS (\n    SELECT \n        hourofday,\n        themeid,\n        usagecount,\n        ROWNUMBER() OVER (\n            PARTITION BY hourofday \n            ORDER BY usagecount DESC\n        ) as rank\n    FROM hourlyusage\n)\nSELECT \n    hourofday,\n    themeid as mostpopulartheme,\n    usagecount\nFROM rankedthemes\nWHERE rank = 1\nORDER BY hourofday;\n\n\nYAML Configuration\n\nyaml title:\"Theme Build Configuration\"\nTheme build configuration file\nversion: 1.0.0\nbuild:\n  inputdir: ./themes\n  outputdir: ./dist/themes\n  \n  # Minification settings\n  minify:\n    enabled: true\n    removecomments: true\n    removewhitespace: true\n    mergemediaqueries: true\n    \n  # Optimization settings\n  optimize:\n    mergesimilarrules: true\n    removeunusedcss: false\n    inlinecriticalcss: false\n\nTheme definitions\nthemes:\n  - id: light\n    file: light.css\n    type: light\n    default: true\n    \n  - id: dark\n    file: dark.css\n    type: dark\n    \n  - id: vscode-dark-plus\n    file: vscode-dark-plus.css\n    type: dark\n    category: editor\n    \n  - id: monokai\n    file: monokai.css\n    type: dark\n    category: editor\n    \n  - id: dracula\n    file: dracula.css\n    type: dark\n    category: popular\n    \n  - id: one-dark-pro\n    file: one-dark-pro.css\n    type: dark\n    category: editor\n    \n  - id: solarized-light\n    file: solarized-light.css\n    type: light\n    category: classic\n    \n  - id: solarized-dark\n    file: solarized-dark.css\n    type: dark\n    category: classic\n    \n  - id: github-light\n    file: github-light.css\n    type: light\n    category: git\n    \n  - id: github-dark\n    file: github-dark.css\n    type: dark\n    category: git\n    \n  - id: nord\n    file: nord.css\n    type: dark\n    category: nordic\n    \n  - id: gruvbox-dark\n    file: gruvbox-dark.css\n    type: dark\n    category: retro\n    \n  - id: gruvbox-light\n    file: gruvbox-light.css\n    type: light\n    category: retro\n    \n  - id: tokyo-night\n    file: tokyo-night.css\n    type: dark\n    category: modern\n    \n  - id: palenight\n    file: palenight.css\n    type: dark\n    category: material\n\nAuto theme detection\nautotheme:\n  enabled: true\n  lightthemes: [light, solarized-light, github-light, gruvbox-light]\n  darkthemes: [dark, vscode-dark-plus, monokai, dracula, one-dark-pro, \n                solarized-dark, github-dark, nord, gruvbox-dark, \n                tokyo-night, palenight]\n  \n  # Time-based switching (optional)\n  schedule:\n    enabled: false\n    lightstart: \"06:00\"\n    darkstart: \"18:00\"\n\nTheme preview settings\npreview:\n  delayms: 200\n  restoreonleave: true\n  showcolorswatches: true\n\n\nCollapsible Code Example\n\njavascript title:\"Collapsible Example\" collapse:\"true\"\n// This code block is collapsible!\n// Click the arrow to expand/collapse\n\nfunction generateThemeCSS(theme) {\n    const { colors, typography, spacing } = theme;\n    \n    return \n        :root[data-theme=\"${theme.id}\"] {\n            / Color System /\n            --color-primary: ${colors.primary};\n            --color-secondary: ${colors.secondary};\n            --color-accent: ${colors.accent};\n            --color-background: ${colors.background};\n            --color-surface: ${colors.surface};\n            --color-text: ${colors.text};\n            --color-text-muted: ${colors.textMuted};\n            \n            / Typography /\n            --font-family: ${typography.fontFamily};\n            --font-size-base: ${typography.sizeBase};\n            --line-height-base: ${typography.lineHeight};\n            \n            / Spacing /\n            --spacing-unit: ${spacing.unit};\n            --spacing-xs: calc(var(--spacing-unit)  0.25);\n            --spacing-sm: calc(var(--spacing-unit)  0.5);\n            --spacing-md: var(--spacing-unit);\n            --spacing-lg: calc(var(--spacing-unit)  1.5);\n            --spacing-xl: calc(var(--spacing-unit)  2);\n        }\n    ;\n}\n\n// Generate CSS for all themes\nconst themes = getThemeDefinitions();\nconst cssOutput = themes.map(generateThemeCSS).join('\\n\\n');\n\nconsole.log('Generated theme CSS:', cssOutput);\n\n\nTesting Notes\n\nWhen testing themes, pay attention to:\n\n1. Color Contrast - Ensure text is readable against backgrounds\n2. Syntax Highlighting - All token types should be distinguishable\n3. UI Elements - Buttons, links, and interactive elements should be visible\n4. Code Blocks - Headers, titles, and copy buttons should be styled appropriately\n5. Transitions - Theme switching should be smooth without flashing\n6. Hover States - Interactive elements should have clear hover feedback\n7. Selection Colors - Text selection should be visible and pleasant\n8. Scrollbars - Custom scrollbar styling should match the theme\n\n\n\n\ud83d\udee0\ufe0f Theme Customization\n\nAuto Theme Detection\n1. Open Settings \u2192 Appearance\n2. Enable \"Auto Theme\" to match system preference\n3. Automatic switching between light and dark themes\n\nTheme Persistence\n- Last used theme is automatically saved\n- Favorites are preserved across browser sessions\n- Settings sync across devices when using the same browser\n\n\u2699\ufe0f Advanced Features\n\nQuick Theme Actions\n- Random theme - Apply a random theme from all 150+\n- Category filtering - Browse themes by category\n- Search themes - Find themes by name or description\n\nTheme Integration\n- Context menu support - Right-click any UI element\n- Keyboard shortcuts - Quick access via hotkeys\n- Toast notifications - Confirmation when themes are applied\n\n\ud83d\udca1 Tips & Best Practices\n\nChoosing the Right Theme\n- Light themes for daytime work and bright environments\n- Dark themes for extended coding sessions and low light\n- High contrast themes for accessibility needs\n- Colorful themes for creative work and inspiration\n\nWorkflow Optimization\n1. Add 3-5 favorite themes for different contexts\n2. Use auto-detection to switch based on time of day\n3. Preview themes before applying to avoid disruption\n4. Use theme context menu for quick actions\n\n\ud83c\udfaf Theme Categories Overview\n\nThe 74 themes are organized into 10 main categories:\n\n1. Classic Dark (8 themes) - Traditional dark themes\n2. Classic Light (5 themes) - Clean light themes  \n3. Material Design (3 themes) - Material-inspired themes\n4. Nature & Earth (8 themes) - Natural color palettes\n5. Arctic & Winter (4 themes) - Cool, icy themes\n6. Ocean & Sky (8 themes) - Blue and aqua themes\n7. Cyberpunk & Neon (4 themes) - Futuristic themes\n8. Elegant & Pastel (4 themes) - Soft, muted colors\n9. Professional (4 themes) - Business-appropriate themes\n10. Special Effects (4 themes) - Unique visual effects\n\n\nTheme System Complete! \u2728\n\nThe Notes Wiki theme system provides:\n\n- \u2705 74 professional themes in 10 organized categories\n- \u2705 Theme favorites system with star indicators\n- \u2705 Right-click context menus for quick theme actions\n- \u2705 Live preview on hover without disrupting workflow\n- \u2705 Auto theme detection matching system preferences\n\n- \u2705 Persistent favorites and theme preferences\n- \u2705 Smooth transitions and visual feedback\n\nStart exploring: Click the theme button (\ud83c\udfa8) in the header and discover your perfect coding environment! \ud83d\ude80 javascript JavaScript Class Example // ES6 Class with various syntax elements\nclass ThemeManager {\n    constructor(options = {}) {\n        this.themes = options.themes || [];\n        this.currentTheme = options.defaultTheme || 'light';\n        this.callbacks = new Map();\n        this._initialized = false;\n    }\n\n    async initialize() {\n        try {\n            // Load saved theme from localStorage\n            const saved = localStorage.getItem('theme');\n            if (saved && this.themes.includes(saved)) {\n                this.currentTheme = saved;\n            }\n            \n            // Apply the theme\n            await this.applyTheme(this.currentTheme);\n            this._initialized = true;\n            \n            return { success: true, theme: this.currentTheme };\n        } catch (error) {\n            console.error('Failed to initialize theme:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    applyTheme(themeName) {\n        // Validate theme exists\n        if (!this.themes.includes(themeName)) {\n            throw new Error(`Theme \"${themeName}\" not found`);\n        }\n\n        // Apply theme to DOM\n        document.documentElement.setAttribute('data-theme', themeName);\n        \n        // Save preference\n        localStorage.setItem('theme', themeName);\n        \n        // Trigger callbacks\n        this.callbacks.forEach(callback => callback(themeName));\n    }\n\n    // Arrow function property\n    onChange = (callback) => {\n        const id = Date.now();\n        this.callbacks.set(id, callback);\n        return () => this.callbacks.delete(id);\n    }\n}\n\n// Usage\nconst manager = new ThemeManager({\n    themes: ['light', 'dark', 'monokai'],\n    defaultTheme: 'dark'\n});\n\nmanager.initialize().then(result => {\n    console.log('Theme initialized:', result);\n}); python Python Data Processing import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional, Union\nimport asyncio\n\nclass DataProcessor:\n    \"\"\"Process and analyze time series data with various transformations.\"\"\"\n    \n    def __init__(self, data_path: str, cache_size: int = 1000):\n        self.data_path = data_path\n        self.cache_size = cache_size\n        self._cache: Dict[str, pd.DataFrame] = {}\n        self._metadata = {\n            'created': datetime.now(),\n            'version': '1.0.0',\n            'author': 'System'\n        }\n    \n    @property\n    def is_cached(self) -> bool:\n        \"\"\"Check if data is currently cached.\"\"\"\n        return len(self._cache) > 0\n    \n    async def load_data_async(self, \n                            file_path: str, \n                            columns: Optional[List[str]] = None) -> pd.DataFrame:\n        \"\"\"Asynchronously load data from CSV file.\"\"\"\n        try:\n            # Simulate async operation\n            await asyncio.sleep(0.1)\n            \n            df = pd.read_csv(file_path, usecols=columns)\n            \n            # Cache the result\n            if len(self._cache) < self.cache_size:\n                self._cache[file_path] = df\n            \n            return df\n            \n        except FileNotFoundError as e:\n            print(f\"Error: File {file_path} not found\")\n            raise e\n        except Exception as e:\n            print(f\"Unexpected error: {str(e)}\")\n            raise\n    \n    def process_timeseries(self, \n                          df: pd.DataFrame, \n                          window_size: int = 7,\n                          aggregation: str = 'mean') -> pd.DataFrame:\n        \"\"\"Apply rolling window calculations to time series data.\"\"\"\n        \n        # Validate inputs\n        if window_size <= 0:\n            raise ValueError(\"Window size must be positive\")\n        \n        valid_aggregations = ['mean', 'sum', 'min', 'max', 'std']\n        if aggregation not in valid_aggregations:\n            raise ValueError(f\"Aggregation must be one of {valid_aggregations}\")\n        \n        # Apply rolling calculation\n        numeric_cols = df.select_dtypes(include=[np.number]).columns\n        \n        result = df.copy()\n        for col in numeric_cols:\n            if aggregation == 'mean':\n                result[f'{col}_rolling_{window_size}d'] = df[col].rolling(window_size).mean()\n            elif aggregation == 'sum':\n                result[f'{col}_rolling_{window_size}d'] = df[col].rolling(window_size).sum()\n            # ... etc\n        \n        return result\n    \n    @staticmethod\n    def generate_sample_data(n_rows: int = 1000) -> pd.DataFrame:\n        \"\"\"Generate sample time series data for testing.\"\"\"\n        dates = pd.date_range(\n            start='2024-01-01', \n            periods=n_rows, \n            freq='D'\n        )\n        \n        data = {\n            'date': dates,\n            'value': np.random.randn(n_rows).cumsum() + 100,\n            'volume': np.random.randint(1000, 10000, n_rows),\n            'category': np.random.choice(['A', 'B', 'C'], n_rows)\n        }\n        \n        return pd.DataFrame(data)\n\n# Example usage\nif __name__ == \"__main__\":\n    processor = DataProcessor(\"./data\")\n    \n    # Generate and process sample data\n    df = DataProcessor.generate_sample_data(365)\n    processed = processor.process_timeseries(df, window_size=30)\n    \n    print(f\"Data shape: {processed.shape}\")\n    print(f\"Columns: {list(processed.columns)}\") html Responsive Card Component <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Theme Card Component</title>\n    <style>\n        /* CSS Custom Properties for theming */\n        :root {\n            --card-bg: #ffffff;\n            --card-border: #e5e7eb;\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            --text-primary: #111827;\n            --text-secondary: #6b7280;\n            --accent-color: #3b82f6;\n        }\n\n        /* Dark theme override */\n        [data-theme=\"dark\"] {\n            --card-bg: #1f2937;\n            --card-border: #374151;\n            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n            --text-primary: #f3f4f6;\n            --text-secondary: #9ca3af;\n            --accent-color: #60a5fa;\n        }\n\n        /* Card component styles */\n        .card {\n            background-color: var(--card-bg);\n            border: 1px solid var(--card-border);\n            border-radius: 0.5rem;\n            box-shadow: var(--card-shadow);\n            padding: 1.5rem;\n            margin: 1rem;\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\n        }\n\n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);\n        }\n\n        .card-title {\n            color: var(--text-primary);\n            font-size: 1.25rem;\n            font-weight: 600;\n            margin: 0 0 0.5rem 0;\n        }\n\n        .card-description {\n            color: var(--text-secondary);\n            line-height: 1.5;\n            margin: 0 0 1rem 0;\n        }\n\n        .card-link {\n            color: var(--accent-color);\n            text-decoration: none;\n            font-weight: 500;\n            display: inline-flex;\n            align-items: center;\n            gap: 0.25rem;\n        }\n\n        .card-link:hover {\n            text-decoration: underline;\n        }\n\n        /* Responsive grid */\n        .card-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 1rem;\n            padding: 1rem;\n        }\n\n        @media (max-width: 768px) {\n            .card {\n                padding: 1rem;\n            }\n            \n            .card-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"card-grid\">\n        <article class=\"card\">\n            <h2 class=\"card-title\">Theme System</h2>\n            <p class=\"card-description\">\n                A comprehensive theming system with CSS custom properties \n                that supports multiple color schemes and automatic theme switching.\n            </p>\n            <a href=\"#\" class=\"card-link\">\n                Learn more\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                    <path d=\"M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z\"/>\n                </svg>\n            </a>\n        </article>\n    </div>\n</body>\n</html> bash Deployment Script #!/bin/bash\n# Theme deployment and build script\n\nset -euo pipefail\n\n# Color output helpers\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Configuration\nTHEMES_DIR=\"./themes\"\nBUILD_DIR=\"./dist\"\nTHEME_FILES=(\n    \"light.css\"\n    \"dark.css\"\n    \"vscode-dark-plus.css\"\n    \"monokai.css\"\n    \"dracula.css\"\n    \"one-dark-pro.css\"\n    \"solarized-light.css\"\n    \"solarized-dark.css\"\n    \"github-light.css\"\n    \"github-dark.css\"\n    \"nord.css\"\n    \"gruvbox-dark.css\"\n    \"gruvbox-light.css\"\n    \"tokyo-night.css\"\n    \"palenight.css\"\n)\n\n# Function to print colored output\nlog() {\n    local level=$1\n    shift\n    case \"$level\" in\n        \"error\")\n            echo -e \"${RED}[ERROR]${NC} $*\" >&2\n            ;;\n        \"success\")\n            echo -e \"${GREEN}[SUCCESS]${NC} $*\"\n            ;;\n        \"warning\")\n            echo -e \"${YELLOW}[WARNING]${NC} $*\"\n            ;;\n        *)\n            echo \"[INFO] $*\"\n            ;;\n    esac\n}\n\n# Validate theme files exist\nvalidate_themes() {\n    log \"info\" \"Validating theme files...\"\n    \n    local missing_themes=()\n    \n    for theme in \"${THEME_FILES[@]}\"; do\n        if [[ ! -f \"$THEMES_DIR/$theme\" ]]; then\n            missing_themes+=(\"$theme\")\n        fi\n    done\n    \n    if [[ ${#missing_themes[@]} -gt 0 ]]; then\n        log \"error\" \"Missing theme files:\"\n        printf '%s\\n' \"${missing_themes[@]}\"\n        return 1\n    fi\n    \n    log \"success\" \"All ${#THEME_FILES[@]} theme files found\"\n    return 0\n}\n\n# Minify CSS files\nminify_themes() {\n    log \"info\" \"Minifying theme files...\"\n    \n    # Create build directory if it doesn't exist\n    mkdir -p \"$BUILD_DIR/themes\"\n    \n    for theme in \"${THEME_FILES[@]}\"; do\n        local input=\"$THEMES_DIR/$theme\"\n        local output=\"$BUILD_DIR/themes/${theme%.css}.min.css\"\n        \n        # Simple CSS minification (remove comments and extra whitespace)\n        if command -v csso &> /dev/null; then\n            csso \"$input\" -o \"$output\"\n        else\n            # Fallback: basic minification with sed\n            sed -e 's/\\/\\*[^*]*\\*\\///g' \\\n                -e 's/\\s\\+/ /g' \\\n                -e 's/:\\s/:/g' \\\n                -e 's/;\\s/;/g' \\\n                -e 's/{\\s/{/g' \\\n                -e 's/}\\s/}/g' \\\n                -e 's/\\n//g' \\\n                \"$input\" > \"$output\"\n        fi\n        \n        log \"success\" \"Minified: ${theme%.css}.min.css\"\n    done\n}\n\n# Generate theme metadata\ngenerate_metadata() {\n    log \"info\" \"Generating theme metadata...\"\n    \n    cat > \"$BUILD_DIR/themes/themes.json\" << EOF\n{\n    \"themes\": [\n        $(for i in \"${!THEME_FILES[@]}\"; do\n            theme=\"${THEME_FILES[$i]}\"\n            theme_id=\"${theme%.css}\"\n            \n            # Add comma except for last item\n            if [[ $i -lt $((${#THEME_FILES[@]} - 1)) ]]; then\n                echo \"        \\\"$theme_id\\\",\"\n            else\n                echo \"        \\\"$theme_id\\\"\"\n            fi\n        done)\n    ],\n    \"count\": ${#THEME_FILES[@]},\n    \"generated\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\"\n}\nEOF\n    \n    log \"success\" \"Generated theme metadata\"\n}\n\n# Main execution\nmain() {\n    log \"info\" \"Starting theme build process...\"\n    \n    # Validate themes\n    if ! validate_themes; then\n        log \"error\" \"Theme validation failed\"\n        exit 1\n    fi\n    \n    # Minify themes\n    minify_themes\n    \n    # Generate metadata\n    generate_metadata\n    \n    log \"success\" \"Theme build completed successfully!\"\n    log \"info\" \"Output directory: $BUILD_DIR\"\n}\n\n# Run main function\nmain \"$@\" json Theme Configuration {\n    \"themes\": {\n        \"light\": {\n            \"id\": \"light\",\n            \"name\": \"Light\",\n            \"description\": \"Clean light theme for daytime use\",\n            \"type\": \"light\",\n            \"colors\": {\n                \"primary\": \"#3b82f6\",\n                \"secondary\": \"#10b981\",\n                \"background\": \"#ffffff\",\n                \"surface\": \"#f9fafb\",\n                \"text\": {\n                    \"primary\": \"#111827\",\n                    \"secondary\": \"#6b7280\",\n                    \"muted\": \"#9ca3af\"\n                },\n                \"syntax\": {\n                    \"keyword\": \"#2563eb\",\n                    \"string\": \"#059669\",\n                    \"number\": \"#dc2626\",\n                    \"function\": \"#7c3aed\",\n                    \"comment\": \"#6b7280\"\n                }\n            },\n            \"customizations\": {\n                \"scrollbar\": true,\n                \"selection\": true,\n                \"forms\": true\n            }\n        },\n        \"dracula\": {\n            \"id\": \"dracula\",\n            \"name\": \"Dracula\",\n            \"description\": \"Dark theme with vibrant colors\",\n            \"type\": \"dark\",\n            \"colors\": {\n                \"primary\": \"#bd93f9\",\n                \"secondary\": \"#50fa7b\",\n                \"background\": \"#282a36\",\n                \"surface\": \"#21222c\",\n                \"text\": {\n                    \"primary\": \"#f8f8f2\",\n                    \"secondary\": \"#6272a4\",\n                    \"muted\": \"#6272a4\"\n                },\n                \"syntax\": {\n                    \"keyword\": \"#ff79c6\",\n                    \"string\": \"#f1fa8c\",\n                    \"number\": \"#bd93f9\",\n                    \"function\": \"#50fa7b\",\n                    \"comment\": \"#6272a4\"\n                }\n            },\n            \"customizations\": {\n                \"scrollbar\": true,\n                \"selection\": true,\n                \"forms\": true\n            }\n        }\n    },\n    \"defaultTheme\": \"light\",\n    \"autoDetect\": true,\n    \"transitions\": {\n        \"enabled\": true,\n        \"duration\": \"250ms\",\n        \"easing\": \"ease-in-out\"\n    }\n} sql Theme Usage Analytics -- Create tables for theme usage tracking\nCREATE TABLE IF NOT EXISTS theme_usage (\n    id SERIAL PRIMARY KEY,\n    user_id INTEGER NOT NULL,\n    theme_id VARCHAR(50) NOT NULL,\n    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    session_duration INTEGER, -- in seconds\n    device_type VARCHAR(20),\n    browser VARCHAR(50),\n    system_theme VARCHAR(10) -- 'light' or 'dark'\n);\n\n-- Index for performance\nCREATE INDEX idx_theme_usage_user_theme ON theme_usage(user_id, theme_id);\nCREATE INDEX idx_theme_usage_applied_at ON theme_usage(applied_at);\n\n-- View for theme popularity\nCREATE OR REPLACE VIEW theme_popularity AS\nSELECT \n    theme_id,\n    COUNT(DISTINCT user_id) as unique_users,\n    COUNT(*) as total_applications,\n    AVG(session_duration) as avg_session_duration,\n    MAX(applied_at) as last_used\nFROM theme_usage\nWHERE applied_at >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY theme_id\nORDER BY unique_users DESC;\n\n-- Function to get user's theme history\nCREATE OR REPLACE FUNCTION get_user_theme_history(p_user_id INTEGER)\nRETURNS TABLE (\n    theme_id VARCHAR(50),\n    applied_at TIMESTAMP,\n    duration_hours NUMERIC,\n    device_type VARCHAR(20)\n) AS $$\nBEGIN\n    RETURN QUERY\n    WITH theme_sessions AS (\n        SELECT \n            tu.theme_id,\n            tu.applied_at,\n            tu.device_type,\n            LEAD(tu.applied_at) OVER (\n                PARTITION BY tu.user_id \n                ORDER BY tu.applied_at\n            ) as next_applied_at\n        FROM theme_usage tu\n        WHERE tu.user_id = p_user_id\n    )\n    SELECT \n        ts.theme_id,\n        ts.applied_at,\n        ROUND(\n            EXTRACT(EPOCH FROM (\n                COALESCE(ts.next_applied_at, CURRENT_TIMESTAMP) - ts.applied_at\n            )) / 3600, \n            2\n        ) as duration_hours,\n        ts.device_type\n    FROM theme_sessions ts\n    ORDER BY ts.applied_at DESC\n    LIMIT 50;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Query to find most popular themes by time of day\nWITH hourly_usage AS (\n    SELECT \n        theme_id,\n        EXTRACT(HOUR FROM applied_at) as hour_of_day,\n        COUNT(*) as usage_count\n    FROM theme_usage\n    WHERE applied_at >= CURRENT_DATE - INTERVAL '7 days'\n    GROUP BY theme_id, hour_of_day\n),\nranked_themes AS (\n    SELECT \n        hour_of_day,\n        theme_id,\n        usage_count,\n        ROW_NUMBER() OVER (\n            PARTITION BY hour_of_day \n            ORDER BY usage_count DESC\n        ) as rank\n    FROM hourly_usage\n)\nSELECT \n    hour_of_day,\n    theme_id as most_popular_theme,\n    usage_count\nFROM ranked_themes\nWHERE rank = 1\nORDER BY hour_of_day; yaml Theme Build Configuration # Theme build configuration file\nversion: 1.0.0\nbuild:\n  input_dir: ./themes\n  output_dir: ./dist/themes\n  \n  # Minification settings\n  minify:\n    enabled: true\n    remove_comments: true\n    remove_whitespace: true\n    merge_media_queries: true\n    \n  # Optimization settings\n  optimize:\n    merge_similar_rules: true\n    remove_unused_css: false\n    inline_critical_css: false\n\n# Theme definitions\nthemes:\n  - id: light\n    file: light.css\n    type: light\n    default: true\n    \n  - id: dark\n    file: dark.css\n    type: dark\n    \n  - id: vscode-dark-plus\n    file: vscode-dark-plus.css\n    type: dark\n    category: editor\n    \n  - id: monokai\n    file: monokai.css\n    type: dark\n    category: editor\n    \n  - id: dracula\n    file: dracula.css\n    type: dark\n    category: popular\n    \n  - id: one-dark-pro\n    file: one-dark-pro.css\n    type: dark\n    category: editor\n    \n  - id: solarized-light\n    file: solarized-light.css\n    type: light\n    category: classic\n    \n  - id: solarized-dark\n    file: solarized-dark.css\n    type: dark\n    category: classic\n    \n  - id: github-light\n    file: github-light.css\n    type: light\n    category: git\n    \n  - id: github-dark\n    file: github-dark.css\n    type: dark\n    category: git\n    \n  - id: nord\n    file: nord.css\n    type: dark\n    category: nordic\n    \n  - id: gruvbox-dark\n    file: gruvbox-dark.css\n    type: dark\n    category: retro\n    \n  - id: gruvbox-light\n    file: gruvbox-light.css\n    type: light\n    category: retro\n    \n  - id: tokyo-night\n    file: tokyo-night.css\n    type: dark\n    category: modern\n    \n  - id: palenight\n    file: palenight.css\n    type: dark\n    category: material\n\n# Auto theme detection\nauto_theme:\n  enabled: true\n  light_themes: [light, solarized-light, github-light, gruvbox-light]\n  dark_themes: [dark, vscode-dark-plus, monokai, dracula, one-dark-pro, \n                solarized-dark, github-dark, nord, gruvbox-dark, \n                tokyo-night, palenight]\n  \n  # Time-based switching (optional)\n  schedule:\n    enabled: false\n    light_start: \"06:00\"\n    dark_start: \"18:00\"\n\n# Theme preview settings\npreview:\n  delay_ms: 200\n  restore_on_leave: true\n  show_color_swatches: true",
      "code_blocks_count": 7
    },
    {
      "path": "/notes/tutorials/advanced/search-index-management.md",
      "context": "tutorials",
      "metadata": {
        "title": "Search Index Management",
        "tags": [
          "advanced",
          "search",
          "build",
          "troubleshooting"
        ],
        "created": "2024-01-20",
        "author": "Wiki Team",
        "description": "Advanced guide to managing and optimizing the search index",
        "updated": "2024-01-20",
        "category": null,
        "status": null,
        "aliases": [],
        "related": [],
        "dependencies": [],
        "keywords": [],
        "tableOfContents": "auto",
        "hideFromSearch": false
      },
      "content_preview": "Learn how to effectively manage your wiki's search index for optimal performance and comprehensive search capabilities.\n\n\n\nThe search index is the heart of your wiki's search functionality. It's a JSO...",
      "searchable_content": "\nSearch Index Management\n\nLearn how to effectively manage your wiki's search index for optimal performance and comprehensive search capabilities.\n\n\ud83d\udd0d Understanding the Search Index\n\nThe search index is the heart of your wiki's search functionality. It's a JSON file (notes-index.json) that contains:\n\n- Full text content of all markdown files\n- Metadata (title, tags, author, dates)\n- Code blocks with language information\n- File paths and relationships\n- Tag mappings for filtering\n\nHow It Works\n\nmermaid\ngraph LR\n    A[Markdown Files] --> B[build.py]\n    B --> C[YAML Parser]\n    B --> D[Content Extractor]\n    C --> E[notes-index.json]\n    D --> E\n    E --> F[Search Engine]\n\n\n\ud83d\udee0\ufe0f Building the Search Index\n\nBasic Build Command\n\nbash\nStandard build\npython3 build.py\n\nExpected output:\nScanning notes directory...\nProcessing: notes/tutorials/features/search-guide.md\n...\n\u2705 Build complete!\n\ud83d\udcca Stats:\n- Total notes: 24\n- Total tags: 15\n- Total authors: 2\n- Index size: 847.2 KB\n\n\nBuild Process Details\n\nThe build script performs these operations:\n\n1. Directory Scanning: Recursively finds all .md files in /notes/\n2. Frontmatter Parsing: Extracts YAML metadata using js-yaml\n3. Content Processing: Converts markdown to searchable text\n4. Code Block Extraction: Identifies and indexes code snippets\n5. Index Generation: Creates optimized JSON structure\n6. File Writing: Saves notes-index.json\n\n\ud83d\udcca Index Structure\n\nExample Index Entry\n\njson\n{\n  \"id\": \"tutorials/features/search-guide\",\n  \"title\": \"Advanced Search Guide\",\n  \"content\": \"Learn to master the powerful search features...\",\n  \"tags\": [\"search\", \"features\", \"tutorial\"],\n  \"author\": \"Wiki Team\",\n  \"created\": \"2024-01-15\",\n  \"updated\": \"2024-01-20\",\n  \"description\": \"Complete guide to search operators\",\n  \"codeBlocks\": [\n    {\n      \"language\": \"bash\",\n      \"content\": \"tag:tutorial author:john\",\n      \"title\": \"Search Example\"\n    }\n  ],\n  \"path\": \"notes/tutorials/features/search-guide.md\",\n  \"wordCount\": 1247,\n  \"readingTime\": 5\n}\n\n\n\ud83d\udd27 Advanced Build Options\n\nCustom Build Script\n\nYou can modify build.py for specific needs:\n\npython\nCustom build with additional processing\nimport json\nimport os\nfrom pathlib import Path\n\ndef custombuild():\n    # Add custom logic here\n    notesdir = Path(\"notes\")\n    index = []\n    \n    for mdfile in notesdir.rglob(\".md\"):\n        # Custom processing logic\n        entry = processfile(mdfile)\n        index.append(entry)\n    \n    # Save with custom formatting\n    with open(\"notes-index.json\", \"w\") as f:\n        json.dump(index, f, indent=2, ensureascii=False)\n\n\nBuild Automation\n\nGit Hooks\nbash\n#!/bin/sh\n.git/hooks/pre-commit\necho \"Rebuilding search index...\"\npython3 build.py\ngit add notes-index.json\n\n\nGitHub Actions\nyaml\n.github/workflows/build-index.yml\nname: Build Search Index\non:\n  push:\n    paths: ['notes//.md']\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build index\n        run: python3 build.py\n      - name: Commit updated index\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add notes-index.json\n          git commit -m \"Update search index\" || exit 0\n          git push\n\n\nGitLab CI\nyaml\n.gitlab-ci.yml addition\nbuildindex:\n  stage: build\n  script:\n    - python3 build.py\n  artifacts:\n    paths:\n      - notes-index.json\n  only:\n    changes:\n      - notes//.md\n\n\n\ud83d\udea8 Troubleshooting\n\nCommon Issues\n\n1. Build Fails with YAML Error\nbash\nError: yaml.scanner.ScannerError\nCause: Invalid YAML frontmatter\n\nSolution: Check frontmatter syntax\nhead -10 problematic-file.md\n\nFix common issues:\n- Use spaces, not tabs for indentation\n- Quote strings with special characters\n- Check for unmatched brackets/quotes\n\n\n2. Empty Search Results\nbash\nCheck if index file exists\nls -la notes-index.json\n\nCheck file size (should be > 1KB)\ndu -h notes-index.json\n\nValidate JSON structure\npython3 -m json.tool notes-index.json > /dev/null\n\n\n3. Missing Notes in Search\nbash\nCheck file permissions\nfind notes/ -name \".md\" ! -perm -644\n\nCheck for hidden files\nfind notes/ -name \".\" -type f\n\nVerify file encoding\nfile notes/your-file.md\n\n\n4. Performance Issues\nbash\nCheck index size\nls -lh notes-index.json\n\nIf index is > 10MB, consider optimization:\n- Remove large code blocks from index\n- Split large notes into smaller files\n- Use excerpt fields instead of full content\n\n\nDiagnostic Commands\n\nbash\nCount indexed notes\ngrep -o '\"id\":' notes-index.json | wc -l\n\nCheck for duplicate IDs\ngrep '\"id\":' notes-index.json | sort | uniq -d\n\nFind largest entries\npython3 -c \"\nimport json\nwith open('notes-index.json') as f:\n    data = json.load(f)\nentries = [(len(str(item)), item['id']) for item in data]\nfor size, id in sorted(entries, reverse=True)[:5]:\n    print(f'{size:6d} bytes: {id}')\n\"\n\nValidate all frontmatter\nfind notes/ -name \".md\" -exec python3 -c \"\nimport yaml\nimport sys\ntry:\n    with open(sys.argv[1]) as f:\n        content = f.read()\n    if content.startswith('---'):\n        frontmatter = content.split('---')[1]\n        yaml.safeload(frontmatter)\n    print(f'\u2705 {sys.argv[1]}')\nexcept Exception as e:\n    print(f'\u274c {sys.argv[1]}: {e}')\n\" {} \\;\n\n\n\u26a1 Performance Optimization\n\nIndex Size Management\n\npython\nOptimize build.py for large wikis\ndef optimizecontent(content):\n    # Limit content length for search\n    if len(content) > 10000:  # 10KB limit\n        content = content[:9900] + \"...\"\n    return content\n\ndef extractexcerpt(content, length=500):\n    # Create search-optimized excerpt\n    lines = content.split('\\n')\n    excerpt = []\n    charcount = 0\n    \n    for line in lines:\n        if charcount + len(line) > length:\n            break\n        excerpt.append(line)\n        charcount += len(line)\n    \n    return '\\n'.join(excerpt)\n\n\nSearch Performance\n\njavascript\n// Client-side search optimization\nclass SearchOptimizer {\n    constructor() {\n        this.searchCache = new Map();\n        this.indexedDB = null; // For large indexes\n    }\n    \n    // Cache frequent searches\n    cacheSearch(query, results) {\n        this.searchCache.set(query, results);\n        if (this.searchCache.size > 100) {\n            const firstKey = this.searchCache.keys().next().value;\n            this.searchCache.delete(firstKey);\n        }\n    }\n    \n    // Progressive search loading\n    async loadIndexProgressive() {\n        const response = await fetch('notes-index.json');\n        const reader = response.body.getReader();\n        // Process chunks as they arrive\n    }\n}\n\n\n\ud83d\udcc8 Monitoring Index Health\n\nIndex Statistics\n\nbash\nCreate index health check script\ncat > check-index.sh << 'EOF'\n#!/bin/bash\n\necho \"=== Search Index Health Check ===\"\necho\n\nFile info\nINDEXFILE=\"notes-index.json\"\nif [ -f \"$INDEXFILE\" ]; then\n    echo \"\u2705 Index file exists\"\n    echo \"\ud83d\udcca Size: $(du -h $INDEXFILE | cut -f1)\"\n    echo \"\ud83d\udcc5 Modified: $(date -r $INDEXFILE)\"\nelse\n    echo \"\u274c Index file missing\"\n    exit 1\nfi\n\nJSON validation\nif python3 -m json.tool $INDEXFILE > /dev/null 2>&1; then\n    echo \"\u2705 Valid JSON structure\"\nelse\n    echo \"\u274c Invalid JSON structure\"\n    exit 1\nfi\n\nEntry count\nENTRYCOUNT=$(grep -o '\"id\":' $INDEXFILE | wc -l)\necho \"\ud83d\udcdd Entries: $ENTRYCOUNT\"\n\nFile count comparison\nMDCOUNT=$(find notes/ -name \".md\" | wc -l)\necho \"\ud83d\udcc1 Markdown files: $MDCOUNT\"\n\nif [ $ENTRYCOUNT -eq $MDCOUNT ]; then\n    echo \"\u2705 All files indexed\"\nelse\n    echo \"\u26a0\ufe0f  Index/file count mismatch\"\nfi\n\nSize analysis\nLARGEENTRIES=$(python3 -c \"\nimport json\nwith open('$INDEXFILE') as f:\n    data = json.load(f)\nlarge = [item['id'] for item in data if len(str(item)) > 50000]\nprint(len(large))\n\")\necho \"\ud83d\udccf Large entries (>50KB): $LARGEENTRIES\"\n\necho\necho \"=== Health Check Complete ===\"\nEOF\n\nchmod +x check-index.sh\n./check-index.sh\n\n\nAutomated Monitoring\n\nbash\nCron job for index monitoring\nAdd to crontab: crontab -e\n0 2    /path/to/wiki/check-index.sh >> /var/log/wiki-index.log 2>&1\n\n\n\ud83d\udd04 Index Maintenance\n\nRegular Maintenance Tasks\n\nbash\nWeekly maintenance script\ncat > maintain-index.sh << 'EOF'\n#!/bin/bash\n\necho \"Starting weekly index maintenance...\"\n\nBackup current index\ncp notes-index.json \"backups/notes-index-$(date +%Y%m%d).json\"\n\nRebuild index\necho \"Rebuilding index...\"\npython3 build.py\n\nValidate new index\nif python3 -m json.tool notes-index.json > /dev/null 2>&1; then\n    echo \"\u2705 Index rebuilt successfully\"\nelse\n    echo \"\u274c Index rebuild failed, restoring backup\"\n    cp \"backups/notes-index-$(date +%Y%m%d).json\" notes-index.json\n    exit 1\nfi\n\nCleanup old backups (keep last 10)\nls -t backups/notes-index-.json | tail -n +11 | xargs rm -f\n\necho \"Maintenance complete\"\nEOF\n\n\nVersion Control Integration\n\nbash\nTrack index changes\ngit log --oneline notes-index.json | head -10\n\nCompare index versions\ngit diff HEAD1 notes-index.json | grep '\"id\":'\n\nRollback index if needed\ngit checkout HEAD1 -- notes-index.json\n\n\n\ud83c\udfaf Best Practices\n\nContent Organization\n- \u2705 Use consistent frontmatter structure\n- \u2705 Keep individual files under 100KB\n- \u2705 Use descriptive filenames and paths\n- \u2705 Maintain consistent tagging scheme\n- \u2705 Include descriptions in frontmatter\n\nBuild Management\n- \u2705 Rebuild index after content changes\n- \u2705 Validate index after building\n- \u2705 Automate builds in CI/CD\n- \u2705 Monitor index size growth\n- \u2705 Backup index before major changes\n\nPerformance\n- \u2705 Optimize large content files\n- \u2705 Use excerpts for long documents\n- \u2705 Implement search result caching\n- \u2705 Consider pagination for large indexes\n- \u2705 Monitor search performance metrics\n\n---\n\nRelated Topics\n\n- \ud83d\udd0d Search Guide\n- \ud83d\ude80 Deployment Options\n- \u2699\ufe0f Settings & Customization\n- \ud83d\udee0\ufe0f Troubleshooting Common Issues (Coming Soon) graph LR\n    A[Markdown Files] --> B[build.py]\n    B --> C[YAML Parser]\n    B --> D[Content Extractor]\n    C --> E[notes-index.json]\n    D --> E\n    E --> F[Search Engine] # Standard build\npython3 build.py\n\n# Expected output:\n# Scanning notes directory...\n# Processing: notes/tutorials/features/search-guide.md\n# ...\n# \u2705 Build complete!\n# \ud83d\udcca Stats:\n#    - Total notes: 24\n#    - Total tags: 15\n#    - Total authors: 2\n#    - Index size: 847.2 KB {\n  \"id\": \"tutorials/features/search-guide\",\n  \"title\": \"Advanced Search Guide\",\n  \"content\": \"Learn to master the powerful search features...\",\n  \"tags\": [\"search\", \"features\", \"tutorial\"],\n  \"author\": \"Wiki Team\",\n  \"created\": \"2024-01-15\",\n  \"updated\": \"2024-01-20\",\n  \"description\": \"Complete guide to search operators\",\n  \"codeBlocks\": [\n    {\n      \"language\": \"bash\",\n      \"content\": \"tag:tutorial author:john\",\n      \"title\": \"Search Example\"\n    }\n  ],\n  \"path\": \"notes/tutorials/features/search-guide.md\",\n  \"wordCount\": 1247,\n  \"readingTime\": 5\n} # Custom build with additional processing\nimport json\nimport os\nfrom pathlib import Path\n\ndef custom_build():\n    # Add custom logic here\n    notes_dir = Path(\"notes\")\n    index = []\n    \n    for md_file in notes_dir.rglob(\"*.md\"):\n        # Custom processing logic\n        entry = process_file(md_file)\n        index.append(entry)\n    \n    # Save with custom formatting\n    with open(\"notes-index.json\", \"w\") as f:\n        json.dump(index, f, indent=2, ensure_ascii=False) #!/bin/sh\n# .git/hooks/pre-commit\necho \"Rebuilding search index...\"\npython3 build.py\ngit add notes-index.json # .github/workflows/build-index.yml\nname: Build Search Index\non:\n  push:\n    paths: ['notes/**/*.md']\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build index\n        run: python3 build.py\n      - name: Commit updated index\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add notes-index.json\n          git commit -m \"Update search index\" || exit 0\n          git push # .gitlab-ci.yml addition\nbuild_index:\n  stage: build\n  script:\n    - python3 build.py\n  artifacts:\n    paths:\n      - notes-index.json\n  only:\n    changes:\n      - notes/**/*.md # Error: yaml.scanner.ScannerError\n# Cause: Invalid YAML frontmatter\n\n# Solution: Check frontmatter syntax\nhead -10 problematic-file.md\n\n# Fix common issues:\n# - Use spaces, not tabs for indentation\n# - Quote strings with special characters\n# - Check for unmatched brackets/quotes # Check if index file exists\nls -la notes-index.json\n\n# Check file size (should be > 1KB)\ndu -h notes-index.json\n\n# Validate JSON structure\npython3 -m json.tool notes-index.json > /dev/null # Check file permissions\nfind notes/ -name \"*.md\" ! -perm -644\n\n# Check for hidden files\nfind notes/ -name \".*\" -type f\n\n# Verify file encoding\nfile notes/your-file.md # Check index size\nls -lh notes-index.json\n\n# If index is > 10MB, consider optimization:\n# - Remove large code blocks from index\n# - Split large notes into smaller files\n# - Use excerpt fields instead of full content # Count indexed notes\ngrep -o '\"id\":' notes-index.json | wc -l\n\n# Check for duplicate IDs\ngrep '\"id\":' notes-index.json | sort | uniq -d\n\n# Find largest entries\npython3 -c \"\nimport json\nwith open('notes-index.json') as f:\n    data = json.load(f)\nentries = [(len(str(item)), item['id']) for item in data]\nfor size, id in sorted(entries, reverse=True)[:5]:\n    print(f'{size:6d} bytes: {id}')\n\"\n\n# Validate all frontmatter\nfind notes/ -name \"*.md\" -exec python3 -c \"\nimport yaml\nimport sys\ntry:\n    with open(sys.argv[1]) as f:\n        content = f.read()\n    if content.startswith('---'):\n        frontmatter = content.split('---')[1]\n        yaml.safe_load(frontmatter)\n    print(f'\u2705 {sys.argv[1]}')\nexcept Exception as e:\n    print(f'\u274c {sys.argv[1]}: {e}')\n\" {} \\; # Optimize build.py for large wikis\ndef optimize_content(content):\n    # Limit content length for search\n    if len(content) > 10000:  # 10KB limit\n        content = content[:9900] + \"...\"\n    return content\n\ndef extract_excerpt(content, length=500):\n    # Create search-optimized excerpt\n    lines = content.split('\\n')\n    excerpt = []\n    char_count = 0\n    \n    for line in lines:\n        if char_count + len(line) > length:\n            break\n        excerpt.append(line)\n        char_count += len(line)\n    \n    return '\\n'.join(excerpt) // Client-side search optimization\nclass SearchOptimizer {\n    constructor() {\n        this.searchCache = new Map();\n        this.indexedDB = null; // For large indexes\n    }\n    \n    // Cache frequent searches\n    cacheSearch(query, results) {\n        this.searchCache.set(query, results);\n        if (this.searchCache.size > 100) {\n            const firstKey = this.searchCache.keys().next().value;\n            this.searchCache.delete(firstKey);\n        }\n    }\n    \n    // Progressive search loading\n    async loadIndexProgressive() {\n        const response = await fetch('notes-index.json');\n        const reader = response.body.getReader();\n        // Process chunks as they arrive\n    }\n} # Create index health check script\ncat > check-index.sh << 'EOF'\n#!/bin/bash\n\necho \"=== Search Index Health Check ===\"\necho\n\n# File info\nINDEX_FILE=\"notes-index.json\"\nif [ -f \"$INDEX_FILE\" ]; then\n    echo \"\u2705 Index file exists\"\n    echo \"\ud83d\udcca Size: $(du -h $INDEX_FILE | cut -f1)\"\n    echo \"\ud83d\udcc5 Modified: $(date -r $INDEX_FILE)\"\nelse\n    echo \"\u274c Index file missing\"\n    exit 1\nfi\n\n# JSON validation\nif python3 -m json.tool $INDEX_FILE > /dev/null 2>&1; then\n    echo \"\u2705 Valid JSON structure\"\nelse\n    echo \"\u274c Invalid JSON structure\"\n    exit 1\nfi\n\n# Entry count\nENTRY_COUNT=$(grep -o '\"id\":' $INDEX_FILE | wc -l)\necho \"\ud83d\udcdd Entries: $ENTRY_COUNT\"\n\n# File count comparison\nMD_COUNT=$(find notes/ -name \"*.md\" | wc -l)\necho \"\ud83d\udcc1 Markdown files: $MD_COUNT\"\n\nif [ $ENTRY_COUNT -eq $MD_COUNT ]; then\n    echo \"\u2705 All files indexed\"\nelse\n    echo \"\u26a0\ufe0f  Index/file count mismatch\"\nfi\n\n# Size analysis\nLARGE_ENTRIES=$(python3 -c \"\nimport json\nwith open('$INDEX_FILE') as f:\n    data = json.load(f)\nlarge = [item['id'] for item in data if len(str(item)) > 50000]\nprint(len(large))\n\")\necho \"\ud83d\udccf Large entries (>50KB): $LARGE_ENTRIES\"\n\necho\necho \"=== Health Check Complete ===\"\nEOF\n\nchmod +x check-index.sh\n./check-index.sh # Cron job for index monitoring\n# Add to crontab: crontab -e\n# 0 2 * * * /path/to/wiki/check-index.sh >> /var/log/wiki-index.log 2>&1 # Weekly maintenance script\ncat > maintain-index.sh << 'EOF'\n#!/bin/bash\n\necho \"Starting weekly index maintenance...\"\n\n# Backup current index\ncp notes-index.json \"backups/notes-index-$(date +%Y%m%d).json\"\n\n# Rebuild index\necho \"Rebuilding index...\"\npython3 build.py\n\n# Validate new index\nif python3 -m json.tool notes-index.json > /dev/null 2>&1; then\n    echo \"\u2705 Index rebuilt successfully\"\nelse\n    echo \"\u274c Index rebuild failed, restoring backup\"\n    cp \"backups/notes-index-$(date +%Y%m%d).json\" notes-index.json\n    exit 1\nfi\n\n# Cleanup old backups (keep last 10)\nls -t backups/notes-index-*.json | tail -n +11 | xargs rm -f\n\necho \"Maintenance complete\"\nEOF # Track index changes\ngit log --oneline notes-index.json | head -10\n\n# Compare index versions\ngit diff HEAD~1 notes-index.json | grep '\"id\":'\n\n# Rollback index if needed\ngit checkout HEAD~1 -- notes-index.json",
      "code_blocks_count": 18
    }
  ],
  "tags": {
    "home": 1,
    "index": 1,
    "documentation": 3,
    "tutorial": 6,
    "code": 2,
    "advanced": 4,
    "automation": 1,
    "performance": 1,
    "optimization": 1,
    "large-collections": 1,
    "speed": 1,
    "search": 3,
    "build": 1,
    "troubleshooting": 2,
    "bookmarks": 1,
    "organization": 3,
    "navigation": 4,
    "markdown": 3,
    "syntax-highlighting": 1,
    "interface": 4,
    "context-menus": 1,
    "productivity": 8,
    "right-click": 1,
    "shortcuts": 2,
    "customization": 3,
    "styling": 2,
    "css": 1,
    "themes": 2,
    "focus-mode": 1,
    "distraction-free": 1,
    "reading": 1,
    "concentration": 1,
    "guide": 2,
    "images": 1,
    "demo": 3,
    "callouts": 1,
    "formatting": 1,
    "pomodoro": 1,
    "timer": 1,
    "focus": 1,
    "time-management": 1,
    "workflow": 3,
    "quick-notes": 1,
    "temporary-notes": 1,
    "panel": 1,
    "operators": 1,
    "filtering": 2,
    "settings": 1,
    "configuration": 1,
    "preferences": 2,
    "tabs": 2,
    "tags": 1,
    "best-practices": 1,
    "note-taking": 1,
    "getting-started": 3,
    "frontmatter": 2,
    "installation": 1,
    "setup": 1,
    "deployment": 1,
    "github-pages": 1,
    "help": 1,
    "debugging": 1,
    "common-issues": 1,
    "support": 1,
    "template": 1,
    "yaml": 1,
    "reference": 1
  },
  "authors": [
    "NotesWiki Team",
    "Wiki Team",
    "Wiki Admin"
  ],
  "categories": [
    "templates"
  ],
  "contexts": [
    {
      "id": "tutorials",
      "name": "Tutorials",
      "noteCount": 25
    }
  ],
  "generated": "2025-07-11T20:25:09.846454",
  "totalNotes": 26
}